#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/Foundation.framework/Headers/NSCalendarDate.h>
value caml_init_NSCalendarDate(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSDate");
   arg2 = caml_wrap_id([NSDate class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("dateWithNaturalLanguageString:");
   arg2 = caml_wrap_pointer(@selector(dateWithNaturalLanguageString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dateWithNaturalLanguageString:locale:");
   arg2 = caml_wrap_pointer(@selector(dateWithNaturalLanguageString:locale:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dateWithString:");
   arg2 = caml_wrap_pointer(@selector(dateWithString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithString:");
   arg2 = caml_wrap_pointer(@selector(initWithString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dateWithCalendarFormat:timeZone:");
   arg2 = caml_wrap_pointer(@selector(dateWithCalendarFormat:timeZone:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("descriptionWithLocale:");
   arg2 = caml_wrap_pointer(@selector(descriptionWithLocale:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("descriptionWithCalendarFormat:timeZone:locale:");
   arg2 = caml_wrap_pointer(@selector(descriptionWithCalendarFormat:timeZone:locale:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSCalendarDate");
   arg2 = caml_wrap_id([NSCalendarDate class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("dateWithYear:month:day:hour:minute:second:timeZone:");
   arg2 = caml_wrap_pointer(@selector(dateWithYear:month:day:hour:minute:second:timeZone:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dateWithString:calendarFormat:");
   arg2 = caml_wrap_pointer(@selector(dateWithString:calendarFormat:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dateWithString:calendarFormat:locale:");
   arg2 = caml_wrap_pointer(@selector(dateWithString:calendarFormat:locale:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("calendarDate:");
   arg2 = caml_wrap_pointer(@selector(calendarDate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithYear:month:day:hour:minute:second:timeZone:");
   arg2 = caml_wrap_pointer(@selector(initWithYear:month:day:hour:minute:second:timeZone:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithString:");
   arg2 = caml_wrap_pointer(@selector(initWithString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithString:calendarFormat:");
   arg2 = caml_wrap_pointer(@selector(initWithString:calendarFormat:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithString:calendarFormat:locale:");
   arg2 = caml_wrap_pointer(@selector(initWithString:calendarFormat:locale:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("timeZone:");
   arg2 = caml_wrap_pointer(@selector(timeZone ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTimeZone:");
   arg2 = caml_wrap_pointer(@selector(setTimeZone:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("calendarFormat:");
   arg2 = caml_wrap_pointer(@selector(calendarFormat ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setCalendarFormat:");
   arg2 = caml_wrap_pointer(@selector(setCalendarFormat:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("yearOfCommonEra:");
   arg2 = caml_wrap_pointer(@selector(yearOfCommonEra ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("monthOfYear:");
   arg2 = caml_wrap_pointer(@selector(monthOfYear ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dayOfMonth:");
   arg2 = caml_wrap_pointer(@selector(dayOfMonth ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dayOfWeek:");
   arg2 = caml_wrap_pointer(@selector(dayOfWeek ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dayOfYear:");
   arg2 = caml_wrap_pointer(@selector(dayOfYear ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dayOfCommonEra:");
   arg2 = caml_wrap_pointer(@selector(dayOfCommonEra ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("hourOfDay:");
   arg2 = caml_wrap_pointer(@selector(hourOfDay ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("minuteOfHour:");
   arg2 = caml_wrap_pointer(@selector(minuteOfHour ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("secondOfMinute:");
   arg2 = caml_wrap_pointer(@selector(secondOfMinute ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dateByAddingYears:months:days:hours:minutes:seconds:");
   arg2 = caml_wrap_pointer(@selector(dateByAddingYears:months:days:hours:minutes:seconds:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("years:months:days:hours:minutes:seconds:sinceDate:");
   arg2 = caml_wrap_pointer(@selector(years:months:days:hours:minutes:seconds:sinceDate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("description:");
   arg2 = caml_wrap_pointer(@selector(description ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("descriptionWithLocale:");
   arg2 = caml_wrap_pointer(@selector(descriptionWithLocale:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("descriptionWithCalendarFormat:");
   arg2 = caml_wrap_pointer(@selector(descriptionWithCalendarFormat:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("descriptionWithCalendarFormat:locale:");
   arg2 = caml_wrap_pointer(@selector(descriptionWithCalendarFormat:locale:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
