// THIS FILE IS GENERATED - ALL CHANGES WILL BE LOST AT THE NEXT BUILD
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/Foundation.framework/Headers/NSNumberFormatter.h>
value caml_init_NSNumberFormatter(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSNumberFormatter");
   arg2 = caml_wrap_id([NSNumberFormatter class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("hasThousandSeparators:");
   arg2 = caml_wrap_pointer(@selector(hasThousandSeparators ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setHasThousandSeparators:");
   arg2 = caml_wrap_pointer(@selector(setHasThousandSeparators:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("thousandSeparator:");
   arg2 = caml_wrap_pointer(@selector(thousandSeparator ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setThousandSeparator:");
   arg2 = caml_wrap_pointer(@selector(setThousandSeparator:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("localizesFormat:");
   arg2 = caml_wrap_pointer(@selector(localizesFormat ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setLocalizesFormat:");
   arg2 = caml_wrap_pointer(@selector(setLocalizesFormat:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("format:");
   arg2 = caml_wrap_pointer(@selector(format ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFormat:");
   arg2 = caml_wrap_pointer(@selector(setFormat:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("attributedStringForZero:");
   arg2 = caml_wrap_pointer(@selector(attributedStringForZero ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAttributedStringForZero:");
   arg2 = caml_wrap_pointer(@selector(setAttributedStringForZero:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("attributedStringForNil:");
   arg2 = caml_wrap_pointer(@selector(attributedStringForNil ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAttributedStringForNil:");
   arg2 = caml_wrap_pointer(@selector(setAttributedStringForNil:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("attributedStringForNotANumber:");
   arg2 = caml_wrap_pointer(@selector(attributedStringForNotANumber ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAttributedStringForNotANumber:");
   arg2 = caml_wrap_pointer(@selector(setAttributedStringForNotANumber:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("roundingBehavior:");
   arg2 = caml_wrap_pointer(@selector(roundingBehavior ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setRoundingBehavior:");
   arg2 = caml_wrap_pointer(@selector(setRoundingBehavior:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("minimum:");
   arg2 = caml_wrap_pointer(@selector(minimum ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMinimum:");
   arg2 = caml_wrap_pointer(@selector(setMinimum:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("maximum:");
   arg2 = caml_wrap_pointer(@selector(maximum ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMaximum:");
   arg2 = caml_wrap_pointer(@selector(setMaximum:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("init:");
   arg2 = caml_wrap_pointer(@selector(init ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getObjectValue:forString:range:error:");
   arg2 = caml_wrap_pointer(@selector(getObjectValue:forString:range:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stringFromNumber:");
   arg2 = caml_wrap_pointer(@selector(stringFromNumber:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberFromString:");
   arg2 = caml_wrap_pointer(@selector(numberFromString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberStyle:");
   arg2 = caml_wrap_pointer(@selector(numberStyle ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setNumberStyle:");
   arg2 = caml_wrap_pointer(@selector(setNumberStyle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("locale:");
   arg2 = caml_wrap_pointer(@selector(locale ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setLocale:");
   arg2 = caml_wrap_pointer(@selector(setLocale:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("generatesDecimalNumbers:");
   arg2 = caml_wrap_pointer(@selector(generatesDecimalNumbers ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setGeneratesDecimalNumbers:");
   arg2 = caml_wrap_pointer(@selector(setGeneratesDecimalNumbers:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("formatterBehavior:");
   arg2 = caml_wrap_pointer(@selector(formatterBehavior ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFormatterBehavior:");
   arg2 = caml_wrap_pointer(@selector(setFormatterBehavior:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("defaultFormatterBehavior:");
   arg2 = caml_wrap_pointer(@selector(defaultFormatterBehavior ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDefaultFormatterBehavior:");
   arg2 = caml_wrap_pointer(@selector(setDefaultFormatterBehavior:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("negativeFormat:");
   arg2 = caml_wrap_pointer(@selector(negativeFormat ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setNegativeFormat:");
   arg2 = caml_wrap_pointer(@selector(setNegativeFormat:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textAttributesForNegativeValues:");
   arg2 = caml_wrap_pointer(@selector(textAttributesForNegativeValues ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTextAttributesForNegativeValues:");
   arg2 = caml_wrap_pointer(@selector(setTextAttributesForNegativeValues:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("positiveFormat:");
   arg2 = caml_wrap_pointer(@selector(positiveFormat ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPositiveFormat:");
   arg2 = caml_wrap_pointer(@selector(setPositiveFormat:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textAttributesForPositiveValues:");
   arg2 = caml_wrap_pointer(@selector(textAttributesForPositiveValues ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTextAttributesForPositiveValues:");
   arg2 = caml_wrap_pointer(@selector(setTextAttributesForPositiveValues:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("allowsFloats:");
   arg2 = caml_wrap_pointer(@selector(allowsFloats ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAllowsFloats:");
   arg2 = caml_wrap_pointer(@selector(setAllowsFloats:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decimalSeparator:");
   arg2 = caml_wrap_pointer(@selector(decimalSeparator ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDecimalSeparator:");
   arg2 = caml_wrap_pointer(@selector(setDecimalSeparator:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("alwaysShowsDecimalSeparator:");
   arg2 = caml_wrap_pointer(@selector(alwaysShowsDecimalSeparator ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAlwaysShowsDecimalSeparator:");
   arg2 = caml_wrap_pointer(@selector(setAlwaysShowsDecimalSeparator:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("currencyDecimalSeparator:");
   arg2 = caml_wrap_pointer(@selector(currencyDecimalSeparator ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setCurrencyDecimalSeparator:");
   arg2 = caml_wrap_pointer(@selector(setCurrencyDecimalSeparator:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("usesGroupingSeparator:");
   arg2 = caml_wrap_pointer(@selector(usesGroupingSeparator ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setUsesGroupingSeparator:");
   arg2 = caml_wrap_pointer(@selector(setUsesGroupingSeparator:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("groupingSeparator:");
   arg2 = caml_wrap_pointer(@selector(groupingSeparator ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setGroupingSeparator:");
   arg2 = caml_wrap_pointer(@selector(setGroupingSeparator:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("zeroSymbol:");
   arg2 = caml_wrap_pointer(@selector(zeroSymbol ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setZeroSymbol:");
   arg2 = caml_wrap_pointer(@selector(setZeroSymbol:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textAttributesForZero:");
   arg2 = caml_wrap_pointer(@selector(textAttributesForZero ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTextAttributesForZero:");
   arg2 = caml_wrap_pointer(@selector(setTextAttributesForZero:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("nilSymbol:");
   arg2 = caml_wrap_pointer(@selector(nilSymbol ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setNilSymbol:");
   arg2 = caml_wrap_pointer(@selector(setNilSymbol:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textAttributesForNil:");
   arg2 = caml_wrap_pointer(@selector(textAttributesForNil ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTextAttributesForNil:");
   arg2 = caml_wrap_pointer(@selector(setTextAttributesForNil:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("notANumberSymbol:");
   arg2 = caml_wrap_pointer(@selector(notANumberSymbol ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setNotANumberSymbol:");
   arg2 = caml_wrap_pointer(@selector(setNotANumberSymbol:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textAttributesForNotANumber:");
   arg2 = caml_wrap_pointer(@selector(textAttributesForNotANumber ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTextAttributesForNotANumber:");
   arg2 = caml_wrap_pointer(@selector(setTextAttributesForNotANumber:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("positiveInfinitySymbol:");
   arg2 = caml_wrap_pointer(@selector(positiveInfinitySymbol ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPositiveInfinitySymbol:");
   arg2 = caml_wrap_pointer(@selector(setPositiveInfinitySymbol:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textAttributesForPositiveInfinity:");
   arg2 = caml_wrap_pointer(@selector(textAttributesForPositiveInfinity ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTextAttributesForPositiveInfinity:");
   arg2 = caml_wrap_pointer(@selector(setTextAttributesForPositiveInfinity:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("negativeInfinitySymbol:");
   arg2 = caml_wrap_pointer(@selector(negativeInfinitySymbol ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setNegativeInfinitySymbol:");
   arg2 = caml_wrap_pointer(@selector(setNegativeInfinitySymbol:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textAttributesForNegativeInfinity:");
   arg2 = caml_wrap_pointer(@selector(textAttributesForNegativeInfinity ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTextAttributesForNegativeInfinity:");
   arg2 = caml_wrap_pointer(@selector(setTextAttributesForNegativeInfinity:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("positivePrefix:");
   arg2 = caml_wrap_pointer(@selector(positivePrefix ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPositivePrefix:");
   arg2 = caml_wrap_pointer(@selector(setPositivePrefix:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("positiveSuffix:");
   arg2 = caml_wrap_pointer(@selector(positiveSuffix ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPositiveSuffix:");
   arg2 = caml_wrap_pointer(@selector(setPositiveSuffix:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("negativePrefix:");
   arg2 = caml_wrap_pointer(@selector(negativePrefix ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setNegativePrefix:");
   arg2 = caml_wrap_pointer(@selector(setNegativePrefix:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("negativeSuffix:");
   arg2 = caml_wrap_pointer(@selector(negativeSuffix ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setNegativeSuffix:");
   arg2 = caml_wrap_pointer(@selector(setNegativeSuffix:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("currencyCode:");
   arg2 = caml_wrap_pointer(@selector(currencyCode ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setCurrencyCode:");
   arg2 = caml_wrap_pointer(@selector(setCurrencyCode:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("currencySymbol:");
   arg2 = caml_wrap_pointer(@selector(currencySymbol ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setCurrencySymbol:");
   arg2 = caml_wrap_pointer(@selector(setCurrencySymbol:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("internationalCurrencySymbol:");
   arg2 = caml_wrap_pointer(@selector(internationalCurrencySymbol ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setInternationalCurrencySymbol:");
   arg2 = caml_wrap_pointer(@selector(setInternationalCurrencySymbol:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("percentSymbol:");
   arg2 = caml_wrap_pointer(@selector(percentSymbol ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPercentSymbol:");
   arg2 = caml_wrap_pointer(@selector(setPercentSymbol:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("perMillSymbol:");
   arg2 = caml_wrap_pointer(@selector(perMillSymbol ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPerMillSymbol:");
   arg2 = caml_wrap_pointer(@selector(setPerMillSymbol:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("minusSign:");
   arg2 = caml_wrap_pointer(@selector(minusSign ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMinusSign:");
   arg2 = caml_wrap_pointer(@selector(setMinusSign:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("plusSign:");
   arg2 = caml_wrap_pointer(@selector(plusSign ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPlusSign:");
   arg2 = caml_wrap_pointer(@selector(setPlusSign:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("exponentSymbol:");
   arg2 = caml_wrap_pointer(@selector(exponentSymbol ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setExponentSymbol:");
   arg2 = caml_wrap_pointer(@selector(setExponentSymbol:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("groupingSize:");
   arg2 = caml_wrap_pointer(@selector(groupingSize ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setGroupingSize:");
   arg2 = caml_wrap_pointer(@selector(setGroupingSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("secondaryGroupingSize:");
   arg2 = caml_wrap_pointer(@selector(secondaryGroupingSize ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setSecondaryGroupingSize:");
   arg2 = caml_wrap_pointer(@selector(setSecondaryGroupingSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("multiplier:");
   arg2 = caml_wrap_pointer(@selector(multiplier ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMultiplier:");
   arg2 = caml_wrap_pointer(@selector(setMultiplier:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("formatWidth:");
   arg2 = caml_wrap_pointer(@selector(formatWidth ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFormatWidth:");
   arg2 = caml_wrap_pointer(@selector(setFormatWidth:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("paddingCharacter:");
   arg2 = caml_wrap_pointer(@selector(paddingCharacter ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPaddingCharacter:");
   arg2 = caml_wrap_pointer(@selector(setPaddingCharacter:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("paddingPosition:");
   arg2 = caml_wrap_pointer(@selector(paddingPosition ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPaddingPosition:");
   arg2 = caml_wrap_pointer(@selector(setPaddingPosition:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("roundingMode:");
   arg2 = caml_wrap_pointer(@selector(roundingMode ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setRoundingMode:");
   arg2 = caml_wrap_pointer(@selector(setRoundingMode:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("roundingIncrement:");
   arg2 = caml_wrap_pointer(@selector(roundingIncrement ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setRoundingIncrement:");
   arg2 = caml_wrap_pointer(@selector(setRoundingIncrement:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("minimumIntegerDigits:");
   arg2 = caml_wrap_pointer(@selector(minimumIntegerDigits ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMinimumIntegerDigits:");
   arg2 = caml_wrap_pointer(@selector(setMinimumIntegerDigits:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("maximumIntegerDigits:");
   arg2 = caml_wrap_pointer(@selector(maximumIntegerDigits ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMaximumIntegerDigits:");
   arg2 = caml_wrap_pointer(@selector(setMaximumIntegerDigits:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("minimumFractionDigits:");
   arg2 = caml_wrap_pointer(@selector(minimumFractionDigits ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMinimumFractionDigits:");
   arg2 = caml_wrap_pointer(@selector(setMinimumFractionDigits:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("maximumFractionDigits:");
   arg2 = caml_wrap_pointer(@selector(maximumFractionDigits ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMaximumFractionDigits:");
   arg2 = caml_wrap_pointer(@selector(setMaximumFractionDigits:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("minimum:");
   arg2 = caml_wrap_pointer(@selector(minimum ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMinimum:");
   arg2 = caml_wrap_pointer(@selector(setMinimum:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("maximum:");
   arg2 = caml_wrap_pointer(@selector(maximum ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMaximum:");
   arg2 = caml_wrap_pointer(@selector(setMaximum:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
