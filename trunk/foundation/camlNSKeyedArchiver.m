// THIS FILE IS GENERATED - ALL CHANGES WILL BE LOST AT THE NEXT BUILD
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/Foundation.framework/Headers/NSKeyedArchiver.h>
value caml_init_NSKeyedArchiver(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSKeyedArchiver");
   arg2 = caml_wrap_id([NSKeyedArchiver class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("archivedDataWithRootObject:");
   arg2 = caml_wrap_pointer(@selector(archivedDataWithRootObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("archiveRootObject:toFile:");
   arg2 = caml_wrap_pointer(@selector(archiveRootObject:toFile:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initForWritingWithMutableData:");
   arg2 = caml_wrap_pointer(@selector(initForWritingWithMutableData:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDelegate:");
   arg2 = caml_wrap_pointer(@selector(setDelegate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("delegate:");
   arg2 = caml_wrap_pointer(@selector(delegate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setOutputFormat:");
   arg2 = caml_wrap_pointer(@selector(setOutputFormat:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("outputFormat:");
   arg2 = caml_wrap_pointer(@selector(outputFormat ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("finishEncoding:");
   arg2 = caml_wrap_pointer(@selector(finishEncoding ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setClassName:forClass:");
   arg2 = caml_wrap_pointer(@selector(setClassName:forClass:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setClassName:forClass:");
   arg2 = caml_wrap_pointer(@selector(setClassName:forClass:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("classNameForClass:");
   arg2 = caml_wrap_pointer(@selector(classNameForClass:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("classNameForClass:");
   arg2 = caml_wrap_pointer(@selector(classNameForClass:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeObject:forKey:");
   arg2 = caml_wrap_pointer(@selector(encodeObject:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeConditionalObject:forKey:");
   arg2 = caml_wrap_pointer(@selector(encodeConditionalObject:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeBool:forKey:");
   arg2 = caml_wrap_pointer(@selector(encodeBool:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeInt:forKey:");
   arg2 = caml_wrap_pointer(@selector(encodeInt:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeInt32:forKey:");
   arg2 = caml_wrap_pointer(@selector(encodeInt32:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeInt64:forKey:");
   arg2 = caml_wrap_pointer(@selector(encodeInt64:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeFloat:forKey:");
   arg2 = caml_wrap_pointer(@selector(encodeFloat:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeDouble:forKey:");
   arg2 = caml_wrap_pointer(@selector(encodeDouble:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeBytes:length:forKey:");
   arg2 = caml_wrap_pointer(@selector(encodeBytes:length:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSKeyedUnarchiver");
   arg2 = caml_wrap_id([NSKeyedUnarchiver class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("unarchiveObjectWithData:");
   arg2 = caml_wrap_pointer(@selector(unarchiveObjectWithData:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("unarchiveObjectWithFile:");
   arg2 = caml_wrap_pointer(@selector(unarchiveObjectWithFile:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initForReadingWithData:");
   arg2 = caml_wrap_pointer(@selector(initForReadingWithData:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDelegate:");
   arg2 = caml_wrap_pointer(@selector(setDelegate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("delegate:");
   arg2 = caml_wrap_pointer(@selector(delegate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("finishDecoding:");
   arg2 = caml_wrap_pointer(@selector(finishDecoding ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setClass:forClassName:");
   arg2 = caml_wrap_pointer(@selector(setClass:forClassName:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setClass:forClassName:");
   arg2 = caml_wrap_pointer(@selector(setClass:forClassName:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("classForClassName:");
   arg2 = caml_wrap_pointer(@selector(classForClassName:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("classForClassName:");
   arg2 = caml_wrap_pointer(@selector(classForClassName:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("containsValueForKey:");
   arg2 = caml_wrap_pointer(@selector(containsValueForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decodeObjectForKey:");
   arg2 = caml_wrap_pointer(@selector(decodeObjectForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decodeBoolForKey:");
   arg2 = caml_wrap_pointer(@selector(decodeBoolForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decodeIntForKey:");
   arg2 = caml_wrap_pointer(@selector(decodeIntForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decodeInt32ForKey:");
   arg2 = caml_wrap_pointer(@selector(decodeInt32ForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decodeInt64ForKey:");
   arg2 = caml_wrap_pointer(@selector(decodeInt64ForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decodeFloatForKey:");
   arg2 = caml_wrap_pointer(@selector(decodeFloatForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decodeDoubleForKey:");
   arg2 = caml_wrap_pointer(@selector(decodeDoubleForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decodeBytesForKey:returnedLength:");
   arg2 = caml_wrap_pointer(@selector(decodeBytesForKey:returnedLength:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSCoder");
   arg2 = caml_wrap_id([NSCoder class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("encodePoint:forKey:");
   arg2 = caml_wrap_pointer(@selector(encodePoint:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeSize:forKey:");
   arg2 = caml_wrap_pointer(@selector(encodeSize:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeRect:forKey:");
   arg2 = caml_wrap_pointer(@selector(encodeRect:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decodePointForKey:");
   arg2 = caml_wrap_pointer(@selector(decodePointForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decodeSizeForKey:");
   arg2 = caml_wrap_pointer(@selector(decodeSizeForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decodeRectForKey:");
   arg2 = caml_wrap_pointer(@selector(decodeRectForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSObject");
   arg2 = caml_wrap_id([NSObject class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("classForKeyedUnarchiver:");
   arg2 = caml_wrap_pointer(@selector(classForKeyedUnarchiver ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("classForKeyedArchiver:");
   arg2 = caml_wrap_pointer(@selector(classForKeyedArchiver ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("replacementObjectForKeyedArchiver:");
   arg2 = caml_wrap_pointer(@selector(replacementObjectForKeyedArchiver:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("classFallbacksForKeyedArchiver:");
   arg2 = caml_wrap_pointer(@selector(classFallbacksForKeyedArchiver ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("unarchiver:cannotDecodeObjectOfClassName:originalClasses:");
   arg2 = caml_wrap_pointer(@selector(unarchiver:cannotDecodeObjectOfClassName:originalClasses:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("unarchiver:didDecodeObject:");
   arg2 = caml_wrap_pointer(@selector(unarchiver:didDecodeObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("unarchiver:willReplaceObject:withObject:");
   arg2 = caml_wrap_pointer(@selector(unarchiver:willReplaceObject:withObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("unarchiverWillFinish:");
   arg2 = caml_wrap_pointer(@selector(unarchiverWillFinish:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("unarchiverDidFinish:");
   arg2 = caml_wrap_pointer(@selector(unarchiverDidFinish:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("archiver:willEncodeObject:");
   arg2 = caml_wrap_pointer(@selector(archiver:willEncodeObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("archiver:didEncodeObject:");
   arg2 = caml_wrap_pointer(@selector(archiver:didEncodeObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("archiver:willReplaceObject:withObject:");
   arg2 = caml_wrap_pointer(@selector(archiver:willReplaceObject:withObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("archiverWillFinish:");
   arg2 = caml_wrap_pointer(@selector(archiverWillFinish:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("archiverDidFinish:");
   arg2 = caml_wrap_pointer(@selector(archiverDidFinish:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
