#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/Foundation.framework/Headers/NSStream.h>
value caml_init_NSStream(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSOutputStream");
   arg2 = caml_wrap_id([NSOutputStream class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("initToMemory:");
   arg2 = caml_wrap_pointer(@selector(initToMemory ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initToBuffer:capacity:");
   arg2 = caml_wrap_pointer(@selector(initToBuffer:capacity:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initToFileAtPath:append:");
   arg2 = caml_wrap_pointer(@selector(initToFileAtPath:append:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("outputStreamToMemory:");
   arg2 = caml_wrap_pointer(@selector(outputStreamToMemory ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("outputStreamToBuffer:capacity:");
   arg2 = caml_wrap_pointer(@selector(outputStreamToBuffer:capacity:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("outputStreamToFileAtPath:append:");
   arg2 = caml_wrap_pointer(@selector(outputStreamToFileAtPath:append:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("write:maxLength:");
   arg2 = caml_wrap_pointer(@selector(write:maxLength:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("hasSpaceAvailable:");
   arg2 = caml_wrap_pointer(@selector(hasSpaceAvailable ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSInputStream");
   arg2 = caml_wrap_id([NSInputStream class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("initWithData:");
   arg2 = caml_wrap_pointer(@selector(initWithData:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithFileAtPath:");
   arg2 = caml_wrap_pointer(@selector(initWithFileAtPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("inputStreamWithData:");
   arg2 = caml_wrap_pointer(@selector(inputStreamWithData:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("inputStreamWithFileAtPath:");
   arg2 = caml_wrap_pointer(@selector(inputStreamWithFileAtPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("read:maxLength:");
   arg2 = caml_wrap_pointer(@selector(read:maxLength:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getBuffer:length:");
   arg2 = caml_wrap_pointer(@selector(getBuffer:length:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("hasBytesAvailable:");
   arg2 = caml_wrap_pointer(@selector(hasBytesAvailable ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSObject");
   arg2 = caml_wrap_id([NSObject class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("stream:handleEvent:");
   arg2 = caml_wrap_pointer(@selector(stream:handleEvent:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSStream");
   arg2 = caml_wrap_id([NSStream class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("getStreamsToHost:port:inputStream:outputStream:");
   arg2 = caml_wrap_pointer(@selector(getStreamsToHost:port:inputStream:outputStream:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("open:");
   arg2 = caml_wrap_pointer(@selector(open ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("close:");
   arg2 = caml_wrap_pointer(@selector(close ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("delegate:");
   arg2 = caml_wrap_pointer(@selector(delegate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDelegate:");
   arg2 = caml_wrap_pointer(@selector(setDelegate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("propertyForKey:");
   arg2 = caml_wrap_pointer(@selector(propertyForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setProperty:forKey:");
   arg2 = caml_wrap_pointer(@selector(setProperty:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scheduleInRunLoop:forMode:");
   arg2 = caml_wrap_pointer(@selector(scheduleInRunLoop:forMode:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeFromRunLoop:forMode:");
   arg2 = caml_wrap_pointer(@selector(removeFromRunLoop:forMode:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("streamStatus:");
   arg2 = caml_wrap_pointer(@selector(streamStatus ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("streamError:");
   arg2 = caml_wrap_pointer(@selector(streamError ));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
