#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/Foundation.framework/Headers/NSNetServices.h>
value caml_init_NSNetServices(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSNetServiceBrowser");
   arg2 = caml_wrap_id([NSNetServiceBrowser class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("searchForAllDomains:");
   arg2 = caml_wrap_pointer(@selector(searchForAllDomains ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("init:");
   arg2 = caml_wrap_pointer(@selector(init ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("delegate:");
   arg2 = caml_wrap_pointer(@selector(delegate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDelegate:");
   arg2 = caml_wrap_pointer(@selector(setDelegate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scheduleInRunLoop:forMode:");
   arg2 = caml_wrap_pointer(@selector(scheduleInRunLoop:forMode:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeFromRunLoop:forMode:");
   arg2 = caml_wrap_pointer(@selector(removeFromRunLoop:forMode:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("searchForBrowsableDomains:");
   arg2 = caml_wrap_pointer(@selector(searchForBrowsableDomains ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("searchForRegistrationDomains:");
   arg2 = caml_wrap_pointer(@selector(searchForRegistrationDomains ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("searchForServicesOfType:inDomain:");
   arg2 = caml_wrap_pointer(@selector(searchForServicesOfType:inDomain:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stop:");
   arg2 = caml_wrap_pointer(@selector(stop ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSObject");
   arg2 = caml_wrap_id([NSObject class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("netServiceBrowserWillSearch:");
   arg2 = caml_wrap_pointer(@selector(netServiceBrowserWillSearch:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("netServiceBrowser:didFindDomain:moreComing:");
   arg2 = caml_wrap_pointer(@selector(netServiceBrowser:didFindDomain:moreComing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("netServiceBrowser:didFindService:moreComing:");
   arg2 = caml_wrap_pointer(@selector(netServiceBrowser:didFindService:moreComing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("netServiceBrowser:didNotSearch:");
   arg2 = caml_wrap_pointer(@selector(netServiceBrowser:didNotSearch:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("netServiceBrowserDidStopSearch:");
   arg2 = caml_wrap_pointer(@selector(netServiceBrowserDidStopSearch:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("netServiceBrowser:didRemoveDomain:moreComing:");
   arg2 = caml_wrap_pointer(@selector(netServiceBrowser:didRemoveDomain:moreComing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("netServiceBrowser:didRemoveService:moreComing:");
   arg2 = caml_wrap_pointer(@selector(netServiceBrowser:didRemoveService:moreComing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("netServiceWillPublish:");
   arg2 = caml_wrap_pointer(@selector(netServiceWillPublish:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("netServiceWillResolve:");
   arg2 = caml_wrap_pointer(@selector(netServiceWillResolve:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("netService:didNotPublish:");
   arg2 = caml_wrap_pointer(@selector(netService:didNotPublish:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("netServiceDidResolveAddress:");
   arg2 = caml_wrap_pointer(@selector(netServiceDidResolveAddress:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("netService:didNotResolve:");
   arg2 = caml_wrap_pointer(@selector(netService:didNotResolve:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("netServiceDidStop:");
   arg2 = caml_wrap_pointer(@selector(netServiceDidStop:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("netService:didUpdateTXTRecordData:");
   arg2 = caml_wrap_pointer(@selector(netService:didUpdateTXTRecordData:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("netServiceDidPublish:");
   arg2 = caml_wrap_pointer(@selector(netServiceDidPublish:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSNetService");
   arg2 = caml_wrap_id([NSNetService class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("protocolSpecificInformation:");
   arg2 = caml_wrap_pointer(@selector(protocolSpecificInformation ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setProtocolSpecificInformation:");
   arg2 = caml_wrap_pointer(@selector(setProtocolSpecificInformation:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("resolve:");
   arg2 = caml_wrap_pointer(@selector(resolve ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithDomain:l_type:name:port:");
   arg2 = caml_wrap_pointer(@selector(initWithDomain:l_type:name:port:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithDomain:l_type:name:");
   arg2 = caml_wrap_pointer(@selector(initWithDomain:l_type:name:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("delegate:");
   arg2 = caml_wrap_pointer(@selector(delegate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDelegate:");
   arg2 = caml_wrap_pointer(@selector(setDelegate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scheduleInRunLoop:forMode:");
   arg2 = caml_wrap_pointer(@selector(scheduleInRunLoop:forMode:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeFromRunLoop:forMode:");
   arg2 = caml_wrap_pointer(@selector(removeFromRunLoop:forMode:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("domain:");
   arg2 = caml_wrap_pointer(@selector(domain ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_type:");
   arg2 = caml_wrap_pointer(@selector(l_type ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("name:");
   arg2 = caml_wrap_pointer(@selector(name ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addresses:");
   arg2 = caml_wrap_pointer(@selector(addresses ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("publish:");
   arg2 = caml_wrap_pointer(@selector(publish ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stop:");
   arg2 = caml_wrap_pointer(@selector(stop ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getInputStream:outputStream:");
   arg2 = caml_wrap_pointer(@selector(getInputStream:outputStream:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("resolveWithTimeout:");
   arg2 = caml_wrap_pointer(@selector(resolveWithTimeout:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTXTRecordData:");
   arg2 = caml_wrap_pointer(@selector(setTXTRecordData:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_TXTRecordData:");
   arg2 = caml_wrap_pointer(@selector(l_TXTRecordData ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("startMonitoring:");
   arg2 = caml_wrap_pointer(@selector(startMonitoring ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stopMonitoring:");
   arg2 = caml_wrap_pointer(@selector(stopMonitoring ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("hostName:");
   arg2 = caml_wrap_pointer(@selector(hostName ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dictionaryFromTXTRecordData:");
   arg2 = caml_wrap_pointer(@selector(dictionaryFromTXTRecordData:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dataFromTXTRecordDictionary:");
   arg2 = caml_wrap_pointer(@selector(dataFromTXTRecordDictionary:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
