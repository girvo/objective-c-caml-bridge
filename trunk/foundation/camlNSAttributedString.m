#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/Foundation.framework/Headers/NSAttributedString.h>
value caml_init_NSAttributedString(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSMutableAttributedString");
   arg2 = caml_wrap_id([NSMutableAttributedString class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("mutableString:");
   arg2 = caml_wrap_pointer(@selector(mutableString ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addAttribute:value:range:");
   arg2 = caml_wrap_pointer(@selector(addAttribute:value:range:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addAttributes:range:");
   arg2 = caml_wrap_pointer(@selector(addAttributes:range:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeAttribute:range:");
   arg2 = caml_wrap_pointer(@selector(removeAttribute:range:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("replaceCharactersInRange:withAttributedString:");
   arg2 = caml_wrap_pointer(@selector(replaceCharactersInRange:withAttributedString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("insertAttributedString:atIndex:");
   arg2 = caml_wrap_pointer(@selector(insertAttributedString:atIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("appendAttributedString:");
   arg2 = caml_wrap_pointer(@selector(appendAttributedString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("deleteCharactersInRange:");
   arg2 = caml_wrap_pointer(@selector(deleteCharactersInRange:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAttributedString:");
   arg2 = caml_wrap_pointer(@selector(setAttributedString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("beginEditing:");
   arg2 = caml_wrap_pointer(@selector(beginEditing ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("endEditing:");
   arg2 = caml_wrap_pointer(@selector(endEditing ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("replaceCharactersInRange:withString:");
   arg2 = caml_wrap_pointer(@selector(replaceCharactersInRange:withString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAttributes:range:");
   arg2 = caml_wrap_pointer(@selector(setAttributes:range:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSAttributedString");
   arg2 = caml_wrap_id([NSAttributedString class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("length:");
   arg2 = caml_wrap_pointer(@selector(length ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("attribute:atIndex:effectiveRange:");
   arg2 = caml_wrap_pointer(@selector(attribute:atIndex:effectiveRange:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("attributedSubstringFromRange:");
   arg2 = caml_wrap_pointer(@selector(attributedSubstringFromRange:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("attributesAtIndex:longestEffectiveRange:inRange:");
   arg2 = caml_wrap_pointer(@selector(attributesAtIndex:longestEffectiveRange:inRange:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("attribute:atIndex:longestEffectiveRange:inRange:");
   arg2 = caml_wrap_pointer(@selector(attribute:atIndex:longestEffectiveRange:inRange:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isEqualToAttributedString:");
   arg2 = caml_wrap_pointer(@selector(isEqualToAttributedString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithString:");
   arg2 = caml_wrap_pointer(@selector(initWithString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithString:attributes:");
   arg2 = caml_wrap_pointer(@selector(initWithString:attributes:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithAttributedString:");
   arg2 = caml_wrap_pointer(@selector(initWithAttributedString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("string:");
   arg2 = caml_wrap_pointer(@selector(string ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("attributesAtIndex:effectiveRange:");
   arg2 = caml_wrap_pointer(@selector(attributesAtIndex:effectiveRange:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
