// THIS FILE IS GENERATED - ALL CHANGES WILL BE LOST AT THE NEXT BUILD
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/Foundation.framework/Headers/NSAppleEventDescriptor.h>
value caml_init_NSAppleEventDescriptor(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSAppleEventDescriptor");
   arg2 = caml_wrap_id([NSAppleEventDescriptor class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("nullDescriptor:");
   arg2 = caml_wrap_pointer(@selector(nullDescriptor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("descriptorWithDescriptorType:bytes:length:");
   arg2 = caml_wrap_pointer(@selector(descriptorWithDescriptorType:bytes:length:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("descriptorWithDescriptorType:data:");
   arg2 = caml_wrap_pointer(@selector(descriptorWithDescriptorType:data:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("descriptorWithBoolean:");
   arg2 = caml_wrap_pointer(@selector(descriptorWithBoolean:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("descriptorWithEnumCode:");
   arg2 = caml_wrap_pointer(@selector(descriptorWithEnumCode:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("descriptorWithInt32:");
   arg2 = caml_wrap_pointer(@selector(descriptorWithInt32:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("descriptorWithTypeCode:");
   arg2 = caml_wrap_pointer(@selector(descriptorWithTypeCode:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("descriptorWithString:");
   arg2 = caml_wrap_pointer(@selector(descriptorWithString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("appleEventWithEventClass:eventID:targetDescriptor:returnID:transactionID:");
   arg2 = caml_wrap_pointer(@selector(appleEventWithEventClass:eventID:targetDescriptor:returnID:transactionID:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("listDescriptor:");
   arg2 = caml_wrap_pointer(@selector(listDescriptor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("recordDescriptor:");
   arg2 = caml_wrap_pointer(@selector(recordDescriptor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithAEDescNoCopy:");
   arg2 = caml_wrap_pointer(@selector(initWithAEDescNoCopy:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithDescriptorType:bytes:length:");
   arg2 = caml_wrap_pointer(@selector(initWithDescriptorType:bytes:length:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithDescriptorType:data:");
   arg2 = caml_wrap_pointer(@selector(initWithDescriptorType:data:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithEventClass:eventID:targetDescriptor:returnID:transactionID:");
   arg2 = caml_wrap_pointer(@selector(initWithEventClass:eventID:targetDescriptor:returnID:transactionID:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initListDescriptor:");
   arg2 = caml_wrap_pointer(@selector(initListDescriptor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initRecordDescriptor:");
   arg2 = caml_wrap_pointer(@selector(initRecordDescriptor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("aeDesc:");
   arg2 = caml_wrap_pointer(@selector(aeDesc ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("descriptorType:");
   arg2 = caml_wrap_pointer(@selector(descriptorType ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("data:");
   arg2 = caml_wrap_pointer(@selector(data ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("booleanValue:");
   arg2 = caml_wrap_pointer(@selector(booleanValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("enumCodeValue:");
   arg2 = caml_wrap_pointer(@selector(enumCodeValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("int32Value:");
   arg2 = caml_wrap_pointer(@selector(int32Value ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("typeCodeValue:");
   arg2 = caml_wrap_pointer(@selector(typeCodeValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stringValue:");
   arg2 = caml_wrap_pointer(@selector(stringValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("eventClass:");
   arg2 = caml_wrap_pointer(@selector(eventClass ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("eventID:");
   arg2 = caml_wrap_pointer(@selector(eventID ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("returnID:");
   arg2 = caml_wrap_pointer(@selector(returnID ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("transactionID:");
   arg2 = caml_wrap_pointer(@selector(transactionID ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setParamDescriptor:forKeyword:");
   arg2 = caml_wrap_pointer(@selector(setParamDescriptor:forKeyword:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("paramDescriptorForKeyword:");
   arg2 = caml_wrap_pointer(@selector(paramDescriptorForKeyword:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeParamDescriptorWithKeyword:");
   arg2 = caml_wrap_pointer(@selector(removeParamDescriptorWithKeyword:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAttributeDescriptor:forKeyword:");
   arg2 = caml_wrap_pointer(@selector(setAttributeDescriptor:forKeyword:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("attributeDescriptorForKeyword:");
   arg2 = caml_wrap_pointer(@selector(attributeDescriptorForKeyword:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberOfItems:");
   arg2 = caml_wrap_pointer(@selector(numberOfItems ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("insertDescriptor:atIndex:");
   arg2 = caml_wrap_pointer(@selector(insertDescriptor:atIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("descriptorAtIndex:");
   arg2 = caml_wrap_pointer(@selector(descriptorAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeDescriptorAtIndex:");
   arg2 = caml_wrap_pointer(@selector(removeDescriptorAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeDecriptorAtIndex:");
   arg2 = caml_wrap_pointer(@selector(removeDecriptorAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDescriptor:forKeyword:");
   arg2 = caml_wrap_pointer(@selector(setDescriptor:forKeyword:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("descriptorForKeyword:");
   arg2 = caml_wrap_pointer(@selector(descriptorForKeyword:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeDescriptorWithKeyword:");
   arg2 = caml_wrap_pointer(@selector(removeDescriptorWithKeyword:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("keywordForDescriptorAtIndex:");
   arg2 = caml_wrap_pointer(@selector(keywordForDescriptorAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("coerceToDescriptorType:");
   arg2 = caml_wrap_pointer(@selector(coerceToDescriptorType:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
