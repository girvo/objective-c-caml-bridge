#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/Foundation.framework/Headers/NSCoder.h>
value caml_init_NSCoder(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSCoder");
   arg2 = caml_wrap_id([NSCoder class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("encodeNXObject:");
   arg2 = caml_wrap_pointer(@selector(encodeNXObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decodeNXObject:");
   arg2 = caml_wrap_pointer(@selector(decodeNXObject ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeObject:");
   arg2 = caml_wrap_pointer(@selector(encodeObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodePropertyList:");
   arg2 = caml_wrap_pointer(@selector(encodePropertyList:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeRootObject:");
   arg2 = caml_wrap_pointer(@selector(encodeRootObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeBycopyObject:");
   arg2 = caml_wrap_pointer(@selector(encodeBycopyObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeByrefObject:");
   arg2 = caml_wrap_pointer(@selector(encodeByrefObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeConditionalObject:");
   arg2 = caml_wrap_pointer(@selector(encodeConditionalObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeValuesOfObjCTypes:");
   arg2 = caml_wrap_pointer(@selector(encodeValuesOfObjCTypes:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeArrayOfObjCType:count:at:");
   arg2 = caml_wrap_pointer(@selector(encodeArrayOfObjCType:count:at:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeBytes:length:");
   arg2 = caml_wrap_pointer(@selector(encodeBytes:length:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decodeObject:");
   arg2 = caml_wrap_pointer(@selector(decodeObject ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decodePropertyList:");
   arg2 = caml_wrap_pointer(@selector(decodePropertyList ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decodeValuesOfObjCTypes:");
   arg2 = caml_wrap_pointer(@selector(decodeValuesOfObjCTypes:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decodeArrayOfObjCType:count:at:");
   arg2 = caml_wrap_pointer(@selector(decodeArrayOfObjCType:count:at:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decodeBytesWithReturnedLength:");
   arg2 = caml_wrap_pointer(@selector(decodeBytesWithReturnedLength:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setObjectZone:");
   arg2 = caml_wrap_pointer(@selector(setObjectZone:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("objectZone:");
   arg2 = caml_wrap_pointer(@selector(objectZone ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("systemVersion:");
   arg2 = caml_wrap_pointer(@selector(systemVersion ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("allowsKeyedCoding:");
   arg2 = caml_wrap_pointer(@selector(allowsKeyedCoding ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeObject:forKey:");
   arg2 = caml_wrap_pointer(@selector(encodeObject:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeConditionalObject:forKey:");
   arg2 = caml_wrap_pointer(@selector(encodeConditionalObject:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeBool:forKey:");
   arg2 = caml_wrap_pointer(@selector(encodeBool:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeInt:forKey:");
   arg2 = caml_wrap_pointer(@selector(encodeInt:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeInt32:forKey:");
   arg2 = caml_wrap_pointer(@selector(encodeInt32:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeInt64:forKey:");
   arg2 = caml_wrap_pointer(@selector(encodeInt64:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeFloat:forKey:");
   arg2 = caml_wrap_pointer(@selector(encodeFloat:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeDouble:forKey:");
   arg2 = caml_wrap_pointer(@selector(encodeDouble:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeBytes:length:forKey:");
   arg2 = caml_wrap_pointer(@selector(encodeBytes:length:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("containsValueForKey:");
   arg2 = caml_wrap_pointer(@selector(containsValueForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decodeObjectForKey:");
   arg2 = caml_wrap_pointer(@selector(decodeObjectForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decodeBoolForKey:");
   arg2 = caml_wrap_pointer(@selector(decodeBoolForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decodeIntForKey:");
   arg2 = caml_wrap_pointer(@selector(decodeIntForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decodeInt32ForKey:");
   arg2 = caml_wrap_pointer(@selector(decodeInt32ForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decodeInt64ForKey:");
   arg2 = caml_wrap_pointer(@selector(decodeInt64ForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decodeFloatForKey:");
   arg2 = caml_wrap_pointer(@selector(decodeFloatForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decodeDoubleForKey:");
   arg2 = caml_wrap_pointer(@selector(decodeDoubleForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decodeBytesForKey:returnedLength:");
   arg2 = caml_wrap_pointer(@selector(decodeBytesForKey:returnedLength:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeValueOfObjCType:at:");
   arg2 = caml_wrap_pointer(@selector(encodeValueOfObjCType:at:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodeDataObject:");
   arg2 = caml_wrap_pointer(@selector(encodeDataObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decodeValueOfObjCType:at:");
   arg2 = caml_wrap_pointer(@selector(decodeValueOfObjCType:at:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decodeDataObject:");
   arg2 = caml_wrap_pointer(@selector(decodeDataObject ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("versionForClassName:");
   arg2 = caml_wrap_pointer(@selector(versionForClassName:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
