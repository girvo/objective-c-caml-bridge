#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/Foundation.framework/Headers/NSString.h>
value caml_init_NSString(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSMutableString");
   arg2 = caml_wrap_id([NSMutableString class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("insertString:atIndex:");
   arg2 = caml_wrap_pointer(@selector(insertString:atIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("deleteCharactersInRange:");
   arg2 = caml_wrap_pointer(@selector(deleteCharactersInRange:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("appendString:");
   arg2 = caml_wrap_pointer(@selector(appendString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("appendFormat:");
   arg2 = caml_wrap_pointer(@selector(appendFormat:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setString:");
   arg2 = caml_wrap_pointer(@selector(setString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithCapacity:");
   arg2 = caml_wrap_pointer(@selector(initWithCapacity:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stringWithCapacity:");
   arg2 = caml_wrap_pointer(@selector(stringWithCapacity:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("replaceOccurrencesOfString:withString:options:range:");
   arg2 = caml_wrap_pointer(@selector(replaceOccurrencesOfString:withString:options:range:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("replaceCharactersInRange:withString:");
   arg2 = caml_wrap_pointer(@selector(replaceCharactersInRange:withString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSString");
   arg2 = caml_wrap_id([NSString class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("cString:");
   arg2 = caml_wrap_pointer(@selector(cString ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("lossyCString:");
   arg2 = caml_wrap_pointer(@selector(lossyCString ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("cStringLength:");
   arg2 = caml_wrap_pointer(@selector(cStringLength ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getCString:");
   arg2 = caml_wrap_pointer(@selector(getCString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getCString:maxLength:");
   arg2 = caml_wrap_pointer(@selector(getCString:maxLength:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getCString:maxLength:range:remainingRange:");
   arg2 = caml_wrap_pointer(@selector(getCString:maxLength:range:remainingRange:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("writeToFile:atomically:");
   arg2 = caml_wrap_pointer(@selector(writeToFile:atomically:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("writeToURL:atomically:");
   arg2 = caml_wrap_pointer(@selector(writeToURL:atomically:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithContentsOfFile:");
   arg2 = caml_wrap_pointer(@selector(initWithContentsOfFile:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithContentsOfURL:");
   arg2 = caml_wrap_pointer(@selector(initWithContentsOfURL:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stringWithContentsOfFile:");
   arg2 = caml_wrap_pointer(@selector(stringWithContentsOfFile:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stringWithContentsOfURL:");
   arg2 = caml_wrap_pointer(@selector(stringWithContentsOfURL:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithCStringNoCopy:length:freeWhenDone:");
   arg2 = caml_wrap_pointer(@selector(initWithCStringNoCopy:length:freeWhenDone:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithCString:length:");
   arg2 = caml_wrap_pointer(@selector(initWithCString:length:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithCString:");
   arg2 = caml_wrap_pointer(@selector(initWithCString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stringWithCString:length:");
   arg2 = caml_wrap_pointer(@selector(stringWithCString:length:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stringWithCString:");
   arg2 = caml_wrap_pointer(@selector(stringWithCString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("propertyList:");
   arg2 = caml_wrap_pointer(@selector(propertyList ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("propertyListFromStringsFileFormat:");
   arg2 = caml_wrap_pointer(@selector(propertyListFromStringsFileFormat ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getCharacters:");
   arg2 = caml_wrap_pointer(@selector(getCharacters:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getCharacters:range:");
   arg2 = caml_wrap_pointer(@selector(getCharacters:range:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("substringFromIndex:");
   arg2 = caml_wrap_pointer(@selector(substringFromIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("substringToIndex:");
   arg2 = caml_wrap_pointer(@selector(substringToIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("substringWithRange:");
   arg2 = caml_wrap_pointer(@selector(substringWithRange:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("compare:");
   arg2 = caml_wrap_pointer(@selector(compare:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("compare:options:");
   arg2 = caml_wrap_pointer(@selector(compare:options:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("compare:options:range:");
   arg2 = caml_wrap_pointer(@selector(compare:options:range:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("compare:options:range:locale:");
   arg2 = caml_wrap_pointer(@selector(compare:options:range:locale:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("caseInsensitiveCompare:");
   arg2 = caml_wrap_pointer(@selector(caseInsensitiveCompare:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("localizedCompare:");
   arg2 = caml_wrap_pointer(@selector(localizedCompare:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("localizedCaseInsensitiveCompare:");
   arg2 = caml_wrap_pointer(@selector(localizedCaseInsensitiveCompare:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isEqualToString:");
   arg2 = caml_wrap_pointer(@selector(isEqualToString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("hasPrefix:");
   arg2 = caml_wrap_pointer(@selector(hasPrefix:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("hasSuffix:");
   arg2 = caml_wrap_pointer(@selector(hasSuffix:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("rangeOfString:");
   arg2 = caml_wrap_pointer(@selector(rangeOfString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("rangeOfString:options:");
   arg2 = caml_wrap_pointer(@selector(rangeOfString:options:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("rangeOfString:options:range:");
   arg2 = caml_wrap_pointer(@selector(rangeOfString:options:range:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("rangeOfCharacterFromSet:");
   arg2 = caml_wrap_pointer(@selector(rangeOfCharacterFromSet:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("rangeOfCharacterFromSet:options:");
   arg2 = caml_wrap_pointer(@selector(rangeOfCharacterFromSet:options:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("rangeOfCharacterFromSet:options:range:");
   arg2 = caml_wrap_pointer(@selector(rangeOfCharacterFromSet:options:range:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("rangeOfComposedCharacterSequenceAtIndex:");
   arg2 = caml_wrap_pointer(@selector(rangeOfComposedCharacterSequenceAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stringByAppendingString:");
   arg2 = caml_wrap_pointer(@selector(stringByAppendingString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stringByAppendingFormat:");
   arg2 = caml_wrap_pointer(@selector(stringByAppendingFormat:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("doubleValue:");
   arg2 = caml_wrap_pointer(@selector(doubleValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("floatValue:");
   arg2 = caml_wrap_pointer(@selector(floatValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("intValue:");
   arg2 = caml_wrap_pointer(@selector(intValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("componentsSeparatedByString:");
   arg2 = caml_wrap_pointer(@selector(componentsSeparatedByString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("commonPrefixWithString:options:");
   arg2 = caml_wrap_pointer(@selector(commonPrefixWithString:options:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("uppercaseString:");
   arg2 = caml_wrap_pointer(@selector(uppercaseString ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("lowercaseString:");
   arg2 = caml_wrap_pointer(@selector(lowercaseString ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("capitalizedString:");
   arg2 = caml_wrap_pointer(@selector(capitalizedString ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stringByTrimmingCharactersInSet:");
   arg2 = caml_wrap_pointer(@selector(stringByTrimmingCharactersInSet:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stringByPaddingToLength:withString:startingAtIndex:");
   arg2 = caml_wrap_pointer(@selector(stringByPaddingToLength:withString:startingAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getLineStart:l_end:contentsEnd:forRange:");
   arg2 = caml_wrap_pointer(@selector(getLineStart:l_end:contentsEnd:forRange:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("lineRangeForRange:");
   arg2 = caml_wrap_pointer(@selector(lineRangeForRange:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getParagraphStart:l_end:contentsEnd:forRange:");
   arg2 = caml_wrap_pointer(@selector(getParagraphStart:l_end:contentsEnd:forRange:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("paragraphRangeForRange:");
   arg2 = caml_wrap_pointer(@selector(paragraphRangeForRange:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("description:");
   arg2 = caml_wrap_pointer(@selector(description ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("hash:");
   arg2 = caml_wrap_pointer(@selector(hash ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fastestEncoding:");
   arg2 = caml_wrap_pointer(@selector(fastestEncoding ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("smallestEncoding:");
   arg2 = caml_wrap_pointer(@selector(smallestEncoding ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dataUsingEncoding:allowLossyConversion:");
   arg2 = caml_wrap_pointer(@selector(dataUsingEncoding:allowLossyConversion:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dataUsingEncoding:");
   arg2 = caml_wrap_pointer(@selector(dataUsingEncoding:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("canBeConvertedToEncoding:");
   arg2 = caml_wrap_pointer(@selector(canBeConvertedToEncoding:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("cStringUsingEncoding:");
   arg2 = caml_wrap_pointer(@selector(cStringUsingEncoding:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getCString:maxLength:encoding:");
   arg2 = caml_wrap_pointer(@selector(getCString:maxLength:encoding:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("maximumLengthOfBytesUsingEncoding:");
   arg2 = caml_wrap_pointer(@selector(maximumLengthOfBytesUsingEncoding:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("lengthOfBytesUsingEncoding:");
   arg2 = caml_wrap_pointer(@selector(lengthOfBytesUsingEncoding:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decomposedStringWithCanonicalMapping:");
   arg2 = caml_wrap_pointer(@selector(decomposedStringWithCanonicalMapping ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("precomposedStringWithCanonicalMapping:");
   arg2 = caml_wrap_pointer(@selector(precomposedStringWithCanonicalMapping ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decomposedStringWithCompatibilityMapping:");
   arg2 = caml_wrap_pointer(@selector(decomposedStringWithCompatibilityMapping ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("precomposedStringWithCompatibilityMapping:");
   arg2 = caml_wrap_pointer(@selector(precomposedStringWithCompatibilityMapping ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_UTF8String:");
   arg2 = caml_wrap_pointer(@selector(l_UTF8String ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("defaultCStringEncoding:");
   arg2 = caml_wrap_pointer(@selector(defaultCStringEncoding ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("availableStringEncodings:");
   arg2 = caml_wrap_pointer(@selector(availableStringEncodings ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("localizedNameOfStringEncoding:");
   arg2 = caml_wrap_pointer(@selector(localizedNameOfStringEncoding:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("init:");
   arg2 = caml_wrap_pointer(@selector(init ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithCharactersNoCopy:length:freeWhenDone:");
   arg2 = caml_wrap_pointer(@selector(initWithCharactersNoCopy:length:freeWhenDone:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithCharacters:length:");
   arg2 = caml_wrap_pointer(@selector(initWithCharacters:length:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithUTF8String:");
   arg2 = caml_wrap_pointer(@selector(initWithUTF8String:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithString:");
   arg2 = caml_wrap_pointer(@selector(initWithString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithFormat:");
   arg2 = caml_wrap_pointer(@selector(initWithFormat:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithFormat:arguments:");
   arg2 = caml_wrap_pointer(@selector(initWithFormat:arguments:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithFormat:locale:");
   arg2 = caml_wrap_pointer(@selector(initWithFormat:locale:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithFormat:locale:arguments:");
   arg2 = caml_wrap_pointer(@selector(initWithFormat:locale:arguments:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithData:encoding:");
   arg2 = caml_wrap_pointer(@selector(initWithData:encoding:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithBytes:length:encoding:");
   arg2 = caml_wrap_pointer(@selector(initWithBytes:length:encoding:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithBytesNoCopy:length:encoding:freeWhenDone:");
   arg2 = caml_wrap_pointer(@selector(initWithBytesNoCopy:length:encoding:freeWhenDone:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("string:");
   arg2 = caml_wrap_pointer(@selector(string ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stringWithString:");
   arg2 = caml_wrap_pointer(@selector(stringWithString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stringWithCharacters:length:");
   arg2 = caml_wrap_pointer(@selector(stringWithCharacters:length:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stringWithUTF8String:");
   arg2 = caml_wrap_pointer(@selector(stringWithUTF8String:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stringWithFormat:");
   arg2 = caml_wrap_pointer(@selector(stringWithFormat:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("localizedStringWithFormat:");
   arg2 = caml_wrap_pointer(@selector(localizedStringWithFormat:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithCString:encoding:");
   arg2 = caml_wrap_pointer(@selector(initWithCString:encoding:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stringWithCString:encoding:");
   arg2 = caml_wrap_pointer(@selector(stringWithCString:encoding:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithContentsOfURL:encoding:error:");
   arg2 = caml_wrap_pointer(@selector(initWithContentsOfURL:encoding:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithContentsOfFile:encoding:error:");
   arg2 = caml_wrap_pointer(@selector(initWithContentsOfFile:encoding:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stringWithContentsOfURL:encoding:error:");
   arg2 = caml_wrap_pointer(@selector(stringWithContentsOfURL:encoding:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stringWithContentsOfFile:encoding:error:");
   arg2 = caml_wrap_pointer(@selector(stringWithContentsOfFile:encoding:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithContentsOfURL:usedEncoding:error:");
   arg2 = caml_wrap_pointer(@selector(initWithContentsOfURL:usedEncoding:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithContentsOfFile:usedEncoding:error:");
   arg2 = caml_wrap_pointer(@selector(initWithContentsOfFile:usedEncoding:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stringWithContentsOfURL:usedEncoding:error:");
   arg2 = caml_wrap_pointer(@selector(stringWithContentsOfURL:usedEncoding:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stringWithContentsOfFile:usedEncoding:error:");
   arg2 = caml_wrap_pointer(@selector(stringWithContentsOfFile:usedEncoding:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("writeToURL:atomically:encoding:error:");
   arg2 = caml_wrap_pointer(@selector(writeToURL:atomically:encoding:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("writeToFile:atomically:encoding:error:");
   arg2 = caml_wrap_pointer(@selector(writeToFile:atomically:encoding:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("length:");
   arg2 = caml_wrap_pointer(@selector(length ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("characterAtIndex:");
   arg2 = caml_wrap_pointer(@selector(characterAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSSimpleCString");
   arg2 = caml_wrap_id([NSSimpleCString class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("NSConstantString");
   arg2 = caml_wrap_id([NSConstantString class]);
   caml_callback2(*register_class,arg1,arg2);
   CAMLreturn(Val_int(0));
}
