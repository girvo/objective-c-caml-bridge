#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSTextField.h>
value caml_init_NSTextField(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSTextField");
   arg2 = caml_wrap_id([NSTextField class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("allowsEditingTextAttributes:");
   arg2 = caml_wrap_pointer(@selector(allowsEditingTextAttributes ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAllowsEditingTextAttributes:");
   arg2 = caml_wrap_pointer(@selector(setAllowsEditingTextAttributes:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("importsGraphics:");
   arg2 = caml_wrap_pointer(@selector(importsGraphics ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setImportsGraphics:");
   arg2 = caml_wrap_pointer(@selector(setImportsGraphics:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTitleWithMnemonic:");
   arg2 = caml_wrap_pointer(@selector(setTitleWithMnemonic:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setBackgroundColor:");
   arg2 = caml_wrap_pointer(@selector(setBackgroundColor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("backgroundColor:");
   arg2 = caml_wrap_pointer(@selector(backgroundColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDrawsBackground:");
   arg2 = caml_wrap_pointer(@selector(setDrawsBackground:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawsBackground:");
   arg2 = caml_wrap_pointer(@selector(drawsBackground ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTextColor:");
   arg2 = caml_wrap_pointer(@selector(setTextColor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textColor:");
   arg2 = caml_wrap_pointer(@selector(textColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isBordered:");
   arg2 = caml_wrap_pointer(@selector(isBordered ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setBordered:");
   arg2 = caml_wrap_pointer(@selector(setBordered:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isBezeled:");
   arg2 = caml_wrap_pointer(@selector(isBezeled ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setBezeled:");
   arg2 = caml_wrap_pointer(@selector(setBezeled:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isEditable:");
   arg2 = caml_wrap_pointer(@selector(isEditable ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setEditable:");
   arg2 = caml_wrap_pointer(@selector(setEditable:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isSelectable:");
   arg2 = caml_wrap_pointer(@selector(isSelectable ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setSelectable:");
   arg2 = caml_wrap_pointer(@selector(setSelectable:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectText:");
   arg2 = caml_wrap_pointer(@selector(selectText:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("delegate:");
   arg2 = caml_wrap_pointer(@selector(delegate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDelegate:");
   arg2 = caml_wrap_pointer(@selector(setDelegate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textShouldBeginEditing:");
   arg2 = caml_wrap_pointer(@selector(textShouldBeginEditing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textShouldEndEditing:");
   arg2 = caml_wrap_pointer(@selector(textShouldEndEditing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textDidBeginEditing:");
   arg2 = caml_wrap_pointer(@selector(textDidBeginEditing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textDidEndEditing:");
   arg2 = caml_wrap_pointer(@selector(textDidEndEditing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textDidChange:");
   arg2 = caml_wrap_pointer(@selector(textDidChange:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("acceptsFirstResponder:");
   arg2 = caml_wrap_pointer(@selector(acceptsFirstResponder ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setBezelStyle:");
   arg2 = caml_wrap_pointer(@selector(setBezelStyle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("bezelStyle:");
   arg2 = caml_wrap_pointer(@selector(bezelStyle ));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
