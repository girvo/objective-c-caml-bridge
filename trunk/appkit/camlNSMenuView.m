#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSMenuView.h>
value caml_init_NSMenuView(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSMenuView");
   arg2 = caml_wrap_id([NSMenuView class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("menuBarHeight:");
   arg2 = caml_wrap_pointer(@selector(menuBarHeight ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithFrame:");
   arg2 = caml_wrap_pointer(@selector(initWithFrame:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initAsTearOff:");
   arg2 = caml_wrap_pointer(@selector(initAsTearOff ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMenu:");
   arg2 = caml_wrap_pointer(@selector(setMenu:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("menu:");
   arg2 = caml_wrap_pointer(@selector(menu ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("itemChanged:");
   arg2 = caml_wrap_pointer(@selector(itemChanged:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("itemAdded:");
   arg2 = caml_wrap_pointer(@selector(itemAdded:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("itemRemoved:");
   arg2 = caml_wrap_pointer(@selector(itemRemoved:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("update:");
   arg2 = caml_wrap_pointer(@selector(update ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setHorizontal:");
   arg2 = caml_wrap_pointer(@selector(setHorizontal:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isHorizontal:");
   arg2 = caml_wrap_pointer(@selector(isHorizontal ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFont:");
   arg2 = caml_wrap_pointer(@selector(setFont:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("font:");
   arg2 = caml_wrap_pointer(@selector(font ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("innerRect:");
   arg2 = caml_wrap_pointer(@selector(innerRect ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("rectOfItemAtIndex:");
   arg2 = caml_wrap_pointer(@selector(rectOfItemAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("indexOfItemAtPoint:");
   arg2 = caml_wrap_pointer(@selector(indexOfItemAtPoint:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setNeedsDisplayForItemAtIndex:");
   arg2 = caml_wrap_pointer(@selector(setNeedsDisplayForItemAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setHighlightedItemIndex:");
   arg2 = caml_wrap_pointer(@selector(setHighlightedItemIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("highlightedItemIndex:");
   arg2 = caml_wrap_pointer(@selector(highlightedItemIndex ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stateImageOffset:");
   arg2 = caml_wrap_pointer(@selector(stateImageOffset ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stateImageWidth:");
   arg2 = caml_wrap_pointer(@selector(stateImageWidth ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("imageAndTitleOffset:");
   arg2 = caml_wrap_pointer(@selector(imageAndTitleOffset ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("imageAndTitleWidth:");
   arg2 = caml_wrap_pointer(@selector(imageAndTitleWidth ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("keyEquivalentOffset:");
   arg2 = caml_wrap_pointer(@selector(keyEquivalentOffset ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("keyEquivalentWidth:");
   arg2 = caml_wrap_pointer(@selector(keyEquivalentWidth ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMenuItemCell:forItemAtIndex:");
   arg2 = caml_wrap_pointer(@selector(setMenuItemCell:forItemAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("menuItemCellForItemAtIndex:");
   arg2 = caml_wrap_pointer(@selector(menuItemCellForItemAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("attachedMenuView:");
   arg2 = caml_wrap_pointer(@selector(attachedMenuView ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setNeedsSizing:");
   arg2 = caml_wrap_pointer(@selector(setNeedsSizing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("needsSizing:");
   arg2 = caml_wrap_pointer(@selector(needsSizing ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sizeToFit:");
   arg2 = caml_wrap_pointer(@selector(sizeToFit ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("attachedMenu:");
   arg2 = caml_wrap_pointer(@selector(attachedMenu ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isAttached:");
   arg2 = caml_wrap_pointer(@selector(isAttached ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isTornOff:");
   arg2 = caml_wrap_pointer(@selector(isTornOff ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("locationForSubmenu:");
   arg2 = caml_wrap_pointer(@selector(locationForSubmenu:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setWindowFrameForAttachingToRect:onScreen:preferredEdge:popUpSelectedItem:");
   arg2 = caml_wrap_pointer(@selector(setWindowFrameForAttachingToRect:onScreen:preferredEdge:popUpSelectedItem:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("detachSubmenu:");
   arg2 = caml_wrap_pointer(@selector(detachSubmenu ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("attachSubmenuForItemAtIndex:");
   arg2 = caml_wrap_pointer(@selector(attachSubmenuForItemAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("performActionWithHighlightingForItemAtIndex:");
   arg2 = caml_wrap_pointer(@selector(performActionWithHighlightingForItemAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("trackWithEvent:");
   arg2 = caml_wrap_pointer(@selector(trackWithEvent:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("horizontalEdgePadding:");
   arg2 = caml_wrap_pointer(@selector(horizontalEdgePadding ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setHorizontalEdgePadding:");
   arg2 = caml_wrap_pointer(@selector(setHorizontalEdgePadding:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
