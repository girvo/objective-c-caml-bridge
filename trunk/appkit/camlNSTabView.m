#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSTabView.h>
value caml_init_NSTabView(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSTabView");
   arg2 = caml_wrap_id([NSTabView class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("selectTabViewItem:");
   arg2 = caml_wrap_pointer(@selector(selectTabViewItem:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectTabViewItemAtIndex:");
   arg2 = caml_wrap_pointer(@selector(selectTabViewItemAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectTabViewItemWithIdentifier:");
   arg2 = caml_wrap_pointer(@selector(selectTabViewItemWithIdentifier:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("takeSelectedTabViewItemFromSender:");
   arg2 = caml_wrap_pointer(@selector(takeSelectedTabViewItemFromSender:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectFirstTabViewItem:");
   arg2 = caml_wrap_pointer(@selector(selectFirstTabViewItem:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectLastTabViewItem:");
   arg2 = caml_wrap_pointer(@selector(selectLastTabViewItem:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectNextTabViewItem:");
   arg2 = caml_wrap_pointer(@selector(selectNextTabViewItem:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectPreviousTabViewItem:");
   arg2 = caml_wrap_pointer(@selector(selectPreviousTabViewItem:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectedTabViewItem:");
   arg2 = caml_wrap_pointer(@selector(selectedTabViewItem ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("font:");
   arg2 = caml_wrap_pointer(@selector(font ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tabViewType:");
   arg2 = caml_wrap_pointer(@selector(tabViewType ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tabViewItems:");
   arg2 = caml_wrap_pointer(@selector(tabViewItems ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("allowsTruncatedLabels:");
   arg2 = caml_wrap_pointer(@selector(allowsTruncatedLabels ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("minimumSize:");
   arg2 = caml_wrap_pointer(@selector(minimumSize ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawsBackground:");
   arg2 = caml_wrap_pointer(@selector(drawsBackground ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("controlTint:");
   arg2 = caml_wrap_pointer(@selector(controlTint ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("controlSize:");
   arg2 = caml_wrap_pointer(@selector(controlSize ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFont:");
   arg2 = caml_wrap_pointer(@selector(setFont:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTabViewType:");
   arg2 = caml_wrap_pointer(@selector(setTabViewType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAllowsTruncatedLabels:");
   arg2 = caml_wrap_pointer(@selector(setAllowsTruncatedLabels:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDrawsBackground:");
   arg2 = caml_wrap_pointer(@selector(setDrawsBackground:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setControlTint:");
   arg2 = caml_wrap_pointer(@selector(setControlTint:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setControlSize:");
   arg2 = caml_wrap_pointer(@selector(setControlSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addTabViewItem:");
   arg2 = caml_wrap_pointer(@selector(addTabViewItem:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("insertTabViewItem:atIndex:");
   arg2 = caml_wrap_pointer(@selector(insertTabViewItem:atIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeTabViewItem:");
   arg2 = caml_wrap_pointer(@selector(removeTabViewItem:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDelegate:");
   arg2 = caml_wrap_pointer(@selector(setDelegate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("delegate:");
   arg2 = caml_wrap_pointer(@selector(delegate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tabViewItemAtPoint:");
   arg2 = caml_wrap_pointer(@selector(tabViewItemAtPoint:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("contentRect:");
   arg2 = caml_wrap_pointer(@selector(contentRect ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberOfTabViewItems:");
   arg2 = caml_wrap_pointer(@selector(numberOfTabViewItems ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("indexOfTabViewItem:");
   arg2 = caml_wrap_pointer(@selector(indexOfTabViewItem:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tabViewItemAtIndex:");
   arg2 = caml_wrap_pointer(@selector(tabViewItemAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("indexOfTabViewItemWithIdentifier:");
   arg2 = caml_wrap_pointer(@selector(indexOfTabViewItemWithIdentifier:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSObject");
   arg2 = caml_wrap_id([NSObject class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("tabView:shouldSelectTabViewItem:");
   arg2 = caml_wrap_pointer(@selector(tabView:shouldSelectTabViewItem:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tabView:willSelectTabViewItem:");
   arg2 = caml_wrap_pointer(@selector(tabView:willSelectTabViewItem:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tabView:didSelectTabViewItem:");
   arg2 = caml_wrap_pointer(@selector(tabView:didSelectTabViewItem:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tabViewDidChangeNumberOfTabViewItems:");
   arg2 = caml_wrap_pointer(@selector(tabViewDidChangeNumberOfTabViewItems:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
