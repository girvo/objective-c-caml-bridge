// THIS FILE IS GENERATED - ALL CHANGES WILL BE LOST AT THE NEXT BUILD
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSMenuItem.h>
value caml_init_NSMenuItem(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSMenuItem");
   arg2 = caml_wrap_id([NSMenuItem class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("setUsesUserKeyEquivalents:");
   arg2 = caml_wrap_pointer(@selector(setUsesUserKeyEquivalents:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("usesUserKeyEquivalents:");
   arg2 = caml_wrap_pointer(@selector(usesUserKeyEquivalents ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("separatorItem:");
   arg2 = caml_wrap_pointer(@selector(separatorItem ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithTitle:action:keyEquivalent:");
   arg2 = caml_wrap_pointer(@selector(initWithTitle:action:keyEquivalent:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMenu:");
   arg2 = caml_wrap_pointer(@selector(setMenu:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("menu:");
   arg2 = caml_wrap_pointer(@selector(menu ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("hasSubmenu:");
   arg2 = caml_wrap_pointer(@selector(hasSubmenu ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setSubmenu:");
   arg2 = caml_wrap_pointer(@selector(setSubmenu:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("submenu:");
   arg2 = caml_wrap_pointer(@selector(submenu ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTitle:");
   arg2 = caml_wrap_pointer(@selector(setTitle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("title:");
   arg2 = caml_wrap_pointer(@selector(title ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAttributedTitle:");
   arg2 = caml_wrap_pointer(@selector(setAttributedTitle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("attributedTitle:");
   arg2 = caml_wrap_pointer(@selector(attributedTitle ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isSeparatorItem:");
   arg2 = caml_wrap_pointer(@selector(isSeparatorItem ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setKeyEquivalent:");
   arg2 = caml_wrap_pointer(@selector(setKeyEquivalent:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("keyEquivalent:");
   arg2 = caml_wrap_pointer(@selector(keyEquivalent ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setKeyEquivalentModifierMask:");
   arg2 = caml_wrap_pointer(@selector(setKeyEquivalentModifierMask:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("keyEquivalentModifierMask:");
   arg2 = caml_wrap_pointer(@selector(keyEquivalentModifierMask ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("userKeyEquivalent:");
   arg2 = caml_wrap_pointer(@selector(userKeyEquivalent ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMnemonicLocation:");
   arg2 = caml_wrap_pointer(@selector(setMnemonicLocation:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("mnemonicLocation:");
   arg2 = caml_wrap_pointer(@selector(mnemonicLocation ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("mnemonic:");
   arg2 = caml_wrap_pointer(@selector(mnemonic ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTitleWithMnemonic:");
   arg2 = caml_wrap_pointer(@selector(setTitleWithMnemonic:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setImage:");
   arg2 = caml_wrap_pointer(@selector(setImage:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("image:");
   arg2 = caml_wrap_pointer(@selector(image ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setState:");
   arg2 = caml_wrap_pointer(@selector(setState:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("state:");
   arg2 = caml_wrap_pointer(@selector(state ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setOnStateImage:");
   arg2 = caml_wrap_pointer(@selector(setOnStateImage:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("onStateImage:");
   arg2 = caml_wrap_pointer(@selector(onStateImage ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setOffStateImage:");
   arg2 = caml_wrap_pointer(@selector(setOffStateImage:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("offStateImage:");
   arg2 = caml_wrap_pointer(@selector(offStateImage ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMixedStateImage:");
   arg2 = caml_wrap_pointer(@selector(setMixedStateImage:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("mixedStateImage:");
   arg2 = caml_wrap_pointer(@selector(mixedStateImage ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setEnabled:");
   arg2 = caml_wrap_pointer(@selector(setEnabled:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isEnabled:");
   arg2 = caml_wrap_pointer(@selector(isEnabled ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAlternate:");
   arg2 = caml_wrap_pointer(@selector(setAlternate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isAlternate:");
   arg2 = caml_wrap_pointer(@selector(isAlternate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setIndentationLevel:");
   arg2 = caml_wrap_pointer(@selector(setIndentationLevel:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("indentationLevel:");
   arg2 = caml_wrap_pointer(@selector(indentationLevel ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTarget:");
   arg2 = caml_wrap_pointer(@selector(setTarget:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("target:");
   arg2 = caml_wrap_pointer(@selector(target ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAction:");
   arg2 = caml_wrap_pointer(@selector(setAction:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("action:");
   arg2 = caml_wrap_pointer(@selector(action ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTag:");
   arg2 = caml_wrap_pointer(@selector(setTag:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tag:");
   arg2 = caml_wrap_pointer(@selector(tag ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setRepresentedObject:");
   arg2 = caml_wrap_pointer(@selector(setRepresentedObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("representedObject:");
   arg2 = caml_wrap_pointer(@selector(representedObject ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setToolTip:");
   arg2 = caml_wrap_pointer(@selector(setToolTip:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("toolTip:");
   arg2 = caml_wrap_pointer(@selector(toolTip ));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
