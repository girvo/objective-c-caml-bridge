// THIS FILE IS GENERATED - ALL CHANGES WILL BE LOST AT THE NEXT BUILD
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSMatrix.h>
value caml_init_NSMatrix(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSMatrix");
   arg2 = caml_wrap_id([NSMatrix class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("setTabKeyTraversesCells:");
   arg2 = caml_wrap_pointer(@selector(setTabKeyTraversesCells:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tabKeyTraversesCells:");
   arg2 = caml_wrap_pointer(@selector(tabKeyTraversesCells ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setKeyCell:");
   arg2 = caml_wrap_pointer(@selector(setKeyCell:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("keyCell:");
   arg2 = caml_wrap_pointer(@selector(keyCell ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithFrame:");
   arg2 = caml_wrap_pointer(@selector(initWithFrame:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithFrame:mode:prototype:numberOfRows:numberOfColumns:");
   arg2 = caml_wrap_pointer(@selector(initWithFrame:mode:prototype:numberOfRows:numberOfColumns:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithFrame:mode:cellClass:numberOfRows:numberOfColumns:");
   arg2 = caml_wrap_pointer(@selector(initWithFrame:mode:cellClass:numberOfRows:numberOfColumns:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setCellClass:");
   arg2 = caml_wrap_pointer(@selector(setCellClass:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("cellClass:");
   arg2 = caml_wrap_pointer(@selector(cellClass ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("prototype:");
   arg2 = caml_wrap_pointer(@selector(prototype ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPrototype:");
   arg2 = caml_wrap_pointer(@selector(setPrototype:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("makeCellAtRow:column:");
   arg2 = caml_wrap_pointer(@selector(makeCellAtRow:column:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("mode:");
   arg2 = caml_wrap_pointer(@selector(mode ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMode:");
   arg2 = caml_wrap_pointer(@selector(setMode:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAllowsEmptySelection:");
   arg2 = caml_wrap_pointer(@selector(setAllowsEmptySelection:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("allowsEmptySelection:");
   arg2 = caml_wrap_pointer(@selector(allowsEmptySelection ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sendAction:l_to:forAllCells:");
   arg2 = caml_wrap_pointer(@selector(sendAction:l_to:forAllCells:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("cells:");
   arg2 = caml_wrap_pointer(@selector(cells ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sortUsingSelector:");
   arg2 = caml_wrap_pointer(@selector(sortUsingSelector:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sortUsingFunction:context:");
   arg2 = caml_wrap_pointer(@selector(sortUsingFunction:context:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectedCell:");
   arg2 = caml_wrap_pointer(@selector(selectedCell ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectedCells:");
   arg2 = caml_wrap_pointer(@selector(selectedCells ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectedRow:");
   arg2 = caml_wrap_pointer(@selector(selectedRow ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectedColumn:");
   arg2 = caml_wrap_pointer(@selector(selectedColumn ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setSelectionByRect:");
   arg2 = caml_wrap_pointer(@selector(setSelectionByRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isSelectionByRect:");
   arg2 = caml_wrap_pointer(@selector(isSelectionByRect ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setSelectionFrom:l_to:anchor:highlight:");
   arg2 = caml_wrap_pointer(@selector(setSelectionFrom:l_to:anchor:highlight:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("deselectSelectedCell:");
   arg2 = caml_wrap_pointer(@selector(deselectSelectedCell ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("deselectAllCells:");
   arg2 = caml_wrap_pointer(@selector(deselectAllCells ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectCellAtRow:column:");
   arg2 = caml_wrap_pointer(@selector(selectCellAtRow:column:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectAll:");
   arg2 = caml_wrap_pointer(@selector(selectAll:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectCellWithTag:");
   arg2 = caml_wrap_pointer(@selector(selectCellWithTag:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("cellSize:");
   arg2 = caml_wrap_pointer(@selector(cellSize ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setCellSize:");
   arg2 = caml_wrap_pointer(@selector(setCellSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("intercellSpacing:");
   arg2 = caml_wrap_pointer(@selector(intercellSpacing ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setIntercellSpacing:");
   arg2 = caml_wrap_pointer(@selector(setIntercellSpacing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setScrollable:");
   arg2 = caml_wrap_pointer(@selector(setScrollable:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setBackgroundColor:");
   arg2 = caml_wrap_pointer(@selector(setBackgroundColor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("backgroundColor:");
   arg2 = caml_wrap_pointer(@selector(backgroundColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setCellBackgroundColor:");
   arg2 = caml_wrap_pointer(@selector(setCellBackgroundColor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("cellBackgroundColor:");
   arg2 = caml_wrap_pointer(@selector(cellBackgroundColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDrawsCellBackground:");
   arg2 = caml_wrap_pointer(@selector(setDrawsCellBackground:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawsCellBackground:");
   arg2 = caml_wrap_pointer(@selector(drawsCellBackground ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDrawsBackground:");
   arg2 = caml_wrap_pointer(@selector(setDrawsBackground:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawsBackground:");
   arg2 = caml_wrap_pointer(@selector(drawsBackground ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setState:atRow:column:");
   arg2 = caml_wrap_pointer(@selector(setState:atRow:column:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getNumberOfRows:columns:");
   arg2 = caml_wrap_pointer(@selector(getNumberOfRows:columns:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberOfRows:");
   arg2 = caml_wrap_pointer(@selector(numberOfRows ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberOfColumns:");
   arg2 = caml_wrap_pointer(@selector(numberOfColumns ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("cellAtRow:column:");
   arg2 = caml_wrap_pointer(@selector(cellAtRow:column:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("cellFrameAtRow:column:");
   arg2 = caml_wrap_pointer(@selector(cellFrameAtRow:column:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getRow:column:ofCell:");
   arg2 = caml_wrap_pointer(@selector(getRow:column:ofCell:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getRow:column:forPoint:");
   arg2 = caml_wrap_pointer(@selector(getRow:column:forPoint:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("renewRows:columns:");
   arg2 = caml_wrap_pointer(@selector(renewRows:columns:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("putCell:atRow:column:");
   arg2 = caml_wrap_pointer(@selector(putCell:atRow:column:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addRow:");
   arg2 = caml_wrap_pointer(@selector(addRow ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addRowWithCells:");
   arg2 = caml_wrap_pointer(@selector(addRowWithCells:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("insertRow:");
   arg2 = caml_wrap_pointer(@selector(insertRow:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("insertRow:withCells:");
   arg2 = caml_wrap_pointer(@selector(insertRow:withCells:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeRow:");
   arg2 = caml_wrap_pointer(@selector(removeRow:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addColumn:");
   arg2 = caml_wrap_pointer(@selector(addColumn ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addColumnWithCells:");
   arg2 = caml_wrap_pointer(@selector(addColumnWithCells:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("insertColumn:");
   arg2 = caml_wrap_pointer(@selector(insertColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("insertColumn:withCells:");
   arg2 = caml_wrap_pointer(@selector(insertColumn:withCells:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeColumn:");
   arg2 = caml_wrap_pointer(@selector(removeColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("cellWithTag:");
   arg2 = caml_wrap_pointer(@selector(cellWithTag:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("doubleAction:");
   arg2 = caml_wrap_pointer(@selector(doubleAction ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDoubleAction:");
   arg2 = caml_wrap_pointer(@selector(setDoubleAction:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAutosizesCells:");
   arg2 = caml_wrap_pointer(@selector(setAutosizesCells:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("autosizesCells:");
   arg2 = caml_wrap_pointer(@selector(autosizesCells ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sizeToCells:");
   arg2 = caml_wrap_pointer(@selector(sizeToCells ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setValidateSize:");
   arg2 = caml_wrap_pointer(@selector(setValidateSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawCellAtRow:column:");
   arg2 = caml_wrap_pointer(@selector(drawCellAtRow:column:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("highlightCell:atRow:column:");
   arg2 = caml_wrap_pointer(@selector(highlightCell:atRow:column:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAutoscroll:");
   arg2 = caml_wrap_pointer(@selector(setAutoscroll:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isAutoscroll:");
   arg2 = caml_wrap_pointer(@selector(isAutoscroll ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scrollCellToVisibleAtRow:column:");
   arg2 = caml_wrap_pointer(@selector(scrollCellToVisibleAtRow:column:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("mouseDownFlags:");
   arg2 = caml_wrap_pointer(@selector(mouseDownFlags ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("mouseDown:");
   arg2 = caml_wrap_pointer(@selector(mouseDown:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("performKeyEquivalent:");
   arg2 = caml_wrap_pointer(@selector(performKeyEquivalent:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sendAction:");
   arg2 = caml_wrap_pointer(@selector(sendAction ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sendDoubleAction:");
   arg2 = caml_wrap_pointer(@selector(sendDoubleAction ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("delegate:");
   arg2 = caml_wrap_pointer(@selector(delegate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDelegate:");
   arg2 = caml_wrap_pointer(@selector(setDelegate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textShouldBeginEditing:");
   arg2 = caml_wrap_pointer(@selector(textShouldBeginEditing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textShouldEndEditing:");
   arg2 = caml_wrap_pointer(@selector(textShouldEndEditing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textDidBeginEditing:");
   arg2 = caml_wrap_pointer(@selector(textDidBeginEditing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textDidEndEditing:");
   arg2 = caml_wrap_pointer(@selector(textDidEndEditing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textDidChange:");
   arg2 = caml_wrap_pointer(@selector(textDidChange:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectText:");
   arg2 = caml_wrap_pointer(@selector(selectText:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectTextAtRow:column:");
   arg2 = caml_wrap_pointer(@selector(selectTextAtRow:column:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("acceptsFirstMouse:");
   arg2 = caml_wrap_pointer(@selector(acceptsFirstMouse:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("resetCursorRects:");
   arg2 = caml_wrap_pointer(@selector(resetCursorRects ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setToolTip:forCell:");
   arg2 = caml_wrap_pointer(@selector(setToolTip:forCell:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("toolTipForCell:");
   arg2 = caml_wrap_pointer(@selector(toolTipForCell:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
