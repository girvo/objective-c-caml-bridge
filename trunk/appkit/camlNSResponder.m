// THIS FILE IS GENERATED - ALL CHANGES WILL BE LOST AT THE NEXT BUILD
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSResponder.h>
value caml_init_NSResponder(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSResponder");
   arg2 = caml_wrap_id([NSResponder class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("presentError:modalForWindow:delegate:didPresentSelector:contextInfo:");
   arg2 = caml_wrap_pointer(@selector(presentError:modalForWindow:delegate:didPresentSelector:contextInfo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("presentError:");
   arg2 = caml_wrap_pointer(@selector(presentError:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("willPresentError:");
   arg2 = caml_wrap_pointer(@selector(willPresentError:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("undoManager:");
   arg2 = caml_wrap_pointer(@selector(undoManager ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("insertText:");
   arg2 = caml_wrap_pointer(@selector(insertText:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("doCommandBySelector:");
   arg2 = caml_wrap_pointer(@selector(doCommandBySelector:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("moveForward:");
   arg2 = caml_wrap_pointer(@selector(moveForward:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("moveRight:");
   arg2 = caml_wrap_pointer(@selector(moveRight:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("moveBackward:");
   arg2 = caml_wrap_pointer(@selector(moveBackward:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("moveLeft:");
   arg2 = caml_wrap_pointer(@selector(moveLeft:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("moveUp:");
   arg2 = caml_wrap_pointer(@selector(moveUp:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("moveDown:");
   arg2 = caml_wrap_pointer(@selector(moveDown:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("moveWordForward:");
   arg2 = caml_wrap_pointer(@selector(moveWordForward:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("moveWordBackward:");
   arg2 = caml_wrap_pointer(@selector(moveWordBackward:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("moveToBeginningOfLine:");
   arg2 = caml_wrap_pointer(@selector(moveToBeginningOfLine:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("moveToEndOfLine:");
   arg2 = caml_wrap_pointer(@selector(moveToEndOfLine:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("moveToBeginningOfParagraph:");
   arg2 = caml_wrap_pointer(@selector(moveToBeginningOfParagraph:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("moveToEndOfParagraph:");
   arg2 = caml_wrap_pointer(@selector(moveToEndOfParagraph:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("moveToEndOfDocument:");
   arg2 = caml_wrap_pointer(@selector(moveToEndOfDocument:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("moveToBeginningOfDocument:");
   arg2 = caml_wrap_pointer(@selector(moveToBeginningOfDocument:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("pageDown:");
   arg2 = caml_wrap_pointer(@selector(pageDown:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("pageUp:");
   arg2 = caml_wrap_pointer(@selector(pageUp:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("centerSelectionInVisibleArea:");
   arg2 = caml_wrap_pointer(@selector(centerSelectionInVisibleArea:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("moveBackwardAndModifySelection:");
   arg2 = caml_wrap_pointer(@selector(moveBackwardAndModifySelection:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("moveForwardAndModifySelection:");
   arg2 = caml_wrap_pointer(@selector(moveForwardAndModifySelection:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("moveWordForwardAndModifySelection:");
   arg2 = caml_wrap_pointer(@selector(moveWordForwardAndModifySelection:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("moveWordBackwardAndModifySelection:");
   arg2 = caml_wrap_pointer(@selector(moveWordBackwardAndModifySelection:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("moveUpAndModifySelection:");
   arg2 = caml_wrap_pointer(@selector(moveUpAndModifySelection:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("moveDownAndModifySelection:");
   arg2 = caml_wrap_pointer(@selector(moveDownAndModifySelection:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("moveWordRight:");
   arg2 = caml_wrap_pointer(@selector(moveWordRight:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("moveWordLeft:");
   arg2 = caml_wrap_pointer(@selector(moveWordLeft:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("moveRightAndModifySelection:");
   arg2 = caml_wrap_pointer(@selector(moveRightAndModifySelection:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("moveLeftAndModifySelection:");
   arg2 = caml_wrap_pointer(@selector(moveLeftAndModifySelection:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("moveWordRightAndModifySelection:");
   arg2 = caml_wrap_pointer(@selector(moveWordRightAndModifySelection:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("moveWordLeftAndModifySelection:");
   arg2 = caml_wrap_pointer(@selector(moveWordLeftAndModifySelection:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scrollPageUp:");
   arg2 = caml_wrap_pointer(@selector(scrollPageUp:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scrollPageDown:");
   arg2 = caml_wrap_pointer(@selector(scrollPageDown:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scrollLineUp:");
   arg2 = caml_wrap_pointer(@selector(scrollLineUp:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scrollLineDown:");
   arg2 = caml_wrap_pointer(@selector(scrollLineDown:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("transpose:");
   arg2 = caml_wrap_pointer(@selector(transpose:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("transposeWords:");
   arg2 = caml_wrap_pointer(@selector(transposeWords:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectAll:");
   arg2 = caml_wrap_pointer(@selector(selectAll:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectParagraph:");
   arg2 = caml_wrap_pointer(@selector(selectParagraph:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectLine:");
   arg2 = caml_wrap_pointer(@selector(selectLine:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectWord:");
   arg2 = caml_wrap_pointer(@selector(selectWord:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("indent:");
   arg2 = caml_wrap_pointer(@selector(indent:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("insertTab:");
   arg2 = caml_wrap_pointer(@selector(insertTab:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("insertBacktab:");
   arg2 = caml_wrap_pointer(@selector(insertBacktab:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("insertNewline:");
   arg2 = caml_wrap_pointer(@selector(insertNewline:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("insertParagraphSeparator:");
   arg2 = caml_wrap_pointer(@selector(insertParagraphSeparator:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("insertNewlineIgnoringFieldEditor:");
   arg2 = caml_wrap_pointer(@selector(insertNewlineIgnoringFieldEditor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("insertTabIgnoringFieldEditor:");
   arg2 = caml_wrap_pointer(@selector(insertTabIgnoringFieldEditor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("insertLineBreak:");
   arg2 = caml_wrap_pointer(@selector(insertLineBreak:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("insertContainerBreak:");
   arg2 = caml_wrap_pointer(@selector(insertContainerBreak:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("changeCaseOfLetter:");
   arg2 = caml_wrap_pointer(@selector(changeCaseOfLetter:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("uppercaseWord:");
   arg2 = caml_wrap_pointer(@selector(uppercaseWord:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("lowercaseWord:");
   arg2 = caml_wrap_pointer(@selector(lowercaseWord:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("capitalizeWord:");
   arg2 = caml_wrap_pointer(@selector(capitalizeWord:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("deleteForward:");
   arg2 = caml_wrap_pointer(@selector(deleteForward:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("deleteBackward:");
   arg2 = caml_wrap_pointer(@selector(deleteBackward:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("deleteBackwardByDecomposingPreviousCharacter:");
   arg2 = caml_wrap_pointer(@selector(deleteBackwardByDecomposingPreviousCharacter:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("deleteWordForward:");
   arg2 = caml_wrap_pointer(@selector(deleteWordForward:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("deleteWordBackward:");
   arg2 = caml_wrap_pointer(@selector(deleteWordBackward:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("deleteToBeginningOfLine:");
   arg2 = caml_wrap_pointer(@selector(deleteToBeginningOfLine:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("deleteToEndOfLine:");
   arg2 = caml_wrap_pointer(@selector(deleteToEndOfLine:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("deleteToBeginningOfParagraph:");
   arg2 = caml_wrap_pointer(@selector(deleteToBeginningOfParagraph:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("deleteToEndOfParagraph:");
   arg2 = caml_wrap_pointer(@selector(deleteToEndOfParagraph:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("yank:");
   arg2 = caml_wrap_pointer(@selector(yank:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("complete:");
   arg2 = caml_wrap_pointer(@selector(complete:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMark:");
   arg2 = caml_wrap_pointer(@selector(setMark:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("deleteToMark:");
   arg2 = caml_wrap_pointer(@selector(deleteToMark:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectToMark:");
   arg2 = caml_wrap_pointer(@selector(selectToMark:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("swapWithMark:");
   arg2 = caml_wrap_pointer(@selector(swapWithMark:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("cancelOperation:");
   arg2 = caml_wrap_pointer(@selector(cancelOperation:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("performMnemonic:");
   arg2 = caml_wrap_pointer(@selector(performMnemonic:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("nextResponder:");
   arg2 = caml_wrap_pointer(@selector(nextResponder ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setNextResponder:");
   arg2 = caml_wrap_pointer(@selector(setNextResponder:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tryToPerform:l_with:");
   arg2 = caml_wrap_pointer(@selector(tryToPerform:l_with:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("performKeyEquivalent:");
   arg2 = caml_wrap_pointer(@selector(performKeyEquivalent:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("validRequestorForSendType:returnType:");
   arg2 = caml_wrap_pointer(@selector(validRequestorForSendType:returnType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("mouseDown:");
   arg2 = caml_wrap_pointer(@selector(mouseDown:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("rightMouseDown:");
   arg2 = caml_wrap_pointer(@selector(rightMouseDown:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("otherMouseDown:");
   arg2 = caml_wrap_pointer(@selector(otherMouseDown:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("mouseUp:");
   arg2 = caml_wrap_pointer(@selector(mouseUp:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("rightMouseUp:");
   arg2 = caml_wrap_pointer(@selector(rightMouseUp:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("otherMouseUp:");
   arg2 = caml_wrap_pointer(@selector(otherMouseUp:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("mouseMoved:");
   arg2 = caml_wrap_pointer(@selector(mouseMoved:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("mouseDragged:");
   arg2 = caml_wrap_pointer(@selector(mouseDragged:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scrollWheel:");
   arg2 = caml_wrap_pointer(@selector(scrollWheel:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("rightMouseDragged:");
   arg2 = caml_wrap_pointer(@selector(rightMouseDragged:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("otherMouseDragged:");
   arg2 = caml_wrap_pointer(@selector(otherMouseDragged:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("mouseEntered:");
   arg2 = caml_wrap_pointer(@selector(mouseEntered:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("mouseExited:");
   arg2 = caml_wrap_pointer(@selector(mouseExited:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("keyDown:");
   arg2 = caml_wrap_pointer(@selector(keyDown:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("keyUp:");
   arg2 = caml_wrap_pointer(@selector(keyUp:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("flagsChanged:");
   arg2 = caml_wrap_pointer(@selector(flagsChanged:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tabletPoint:");
   arg2 = caml_wrap_pointer(@selector(tabletPoint:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tabletProximity:");
   arg2 = caml_wrap_pointer(@selector(tabletProximity:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("noResponderFor:");
   arg2 = caml_wrap_pointer(@selector(noResponderFor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("acceptsFirstResponder:");
   arg2 = caml_wrap_pointer(@selector(acceptsFirstResponder ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("becomeFirstResponder:");
   arg2 = caml_wrap_pointer(@selector(becomeFirstResponder ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("resignFirstResponder:");
   arg2 = caml_wrap_pointer(@selector(resignFirstResponder ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("interpretKeyEvents:");
   arg2 = caml_wrap_pointer(@selector(interpretKeyEvents:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("flushBufferedKeyEvents:");
   arg2 = caml_wrap_pointer(@selector(flushBufferedKeyEvents ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMenu:");
   arg2 = caml_wrap_pointer(@selector(setMenu:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("menu:");
   arg2 = caml_wrap_pointer(@selector(menu ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("showContextHelp:");
   arg2 = caml_wrap_pointer(@selector(showContextHelp:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("helpRequested:");
   arg2 = caml_wrap_pointer(@selector(helpRequested:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("shouldBeTreatedAsInkEvent:");
   arg2 = caml_wrap_pointer(@selector(shouldBeTreatedAsInkEvent:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
