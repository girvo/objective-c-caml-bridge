#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSScrollView.h>
value caml_init_NSScrollView(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSScrollView");
   arg2 = caml_wrap_id([NSScrollView class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("setRulerViewClass:");
   arg2 = caml_wrap_pointer(@selector(setRulerViewClass:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("rulerViewClass:");
   arg2 = caml_wrap_pointer(@selector(rulerViewClass ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setRulersVisible:");
   arg2 = caml_wrap_pointer(@selector(setRulersVisible:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("rulersVisible:");
   arg2 = caml_wrap_pointer(@selector(rulersVisible ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setHasHorizontalRuler:");
   arg2 = caml_wrap_pointer(@selector(setHasHorizontalRuler:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("hasHorizontalRuler:");
   arg2 = caml_wrap_pointer(@selector(hasHorizontalRuler ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setHasVerticalRuler:");
   arg2 = caml_wrap_pointer(@selector(setHasVerticalRuler:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("hasVerticalRuler:");
   arg2 = caml_wrap_pointer(@selector(hasVerticalRuler ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setHorizontalRulerView:");
   arg2 = caml_wrap_pointer(@selector(setHorizontalRulerView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("horizontalRulerView:");
   arg2 = caml_wrap_pointer(@selector(horizontalRulerView ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setVerticalRulerView:");
   arg2 = caml_wrap_pointer(@selector(setVerticalRulerView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("verticalRulerView:");
   arg2 = caml_wrap_pointer(@selector(verticalRulerView ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("frameSizeForContentSize:hasHorizontalScroller:hasVerticalScroller:borderType:");
   arg2 = caml_wrap_pointer(@selector(frameSizeForContentSize:hasHorizontalScroller:hasVerticalScroller:borderType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("contentSizeForFrameSize:hasHorizontalScroller:hasVerticalScroller:borderType:");
   arg2 = caml_wrap_pointer(@selector(contentSizeForFrameSize:hasHorizontalScroller:hasVerticalScroller:borderType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("documentVisibleRect:");
   arg2 = caml_wrap_pointer(@selector(documentVisibleRect ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("contentSize:");
   arg2 = caml_wrap_pointer(@selector(contentSize ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDocumentView:");
   arg2 = caml_wrap_pointer(@selector(setDocumentView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("documentView:");
   arg2 = caml_wrap_pointer(@selector(documentView ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setContentView:");
   arg2 = caml_wrap_pointer(@selector(setContentView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("contentView:");
   arg2 = caml_wrap_pointer(@selector(contentView ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDocumentCursor:");
   arg2 = caml_wrap_pointer(@selector(setDocumentCursor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("documentCursor:");
   arg2 = caml_wrap_pointer(@selector(documentCursor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setBorderType:");
   arg2 = caml_wrap_pointer(@selector(setBorderType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("borderType:");
   arg2 = caml_wrap_pointer(@selector(borderType ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setBackgroundColor:");
   arg2 = caml_wrap_pointer(@selector(setBackgroundColor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("backgroundColor:");
   arg2 = caml_wrap_pointer(@selector(backgroundColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDrawsBackground:");
   arg2 = caml_wrap_pointer(@selector(setDrawsBackground:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawsBackground:");
   arg2 = caml_wrap_pointer(@selector(drawsBackground ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setHasVerticalScroller:");
   arg2 = caml_wrap_pointer(@selector(setHasVerticalScroller:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("hasVerticalScroller:");
   arg2 = caml_wrap_pointer(@selector(hasVerticalScroller ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setHasHorizontalScroller:");
   arg2 = caml_wrap_pointer(@selector(setHasHorizontalScroller:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("hasHorizontalScroller:");
   arg2 = caml_wrap_pointer(@selector(hasHorizontalScroller ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setVerticalScroller:");
   arg2 = caml_wrap_pointer(@selector(setVerticalScroller:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("verticalScroller:");
   arg2 = caml_wrap_pointer(@selector(verticalScroller ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setHorizontalScroller:");
   arg2 = caml_wrap_pointer(@selector(setHorizontalScroller:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("horizontalScroller:");
   arg2 = caml_wrap_pointer(@selector(horizontalScroller ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("autohidesScrollers:");
   arg2 = caml_wrap_pointer(@selector(autohidesScrollers ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAutohidesScrollers:");
   arg2 = caml_wrap_pointer(@selector(setAutohidesScrollers:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setHorizontalLineScroll:");
   arg2 = caml_wrap_pointer(@selector(setHorizontalLineScroll:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setVerticalLineScroll:");
   arg2 = caml_wrap_pointer(@selector(setVerticalLineScroll:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setLineScroll:");
   arg2 = caml_wrap_pointer(@selector(setLineScroll:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("horizontalLineScroll:");
   arg2 = caml_wrap_pointer(@selector(horizontalLineScroll ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("verticalLineScroll:");
   arg2 = caml_wrap_pointer(@selector(verticalLineScroll ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("lineScroll:");
   arg2 = caml_wrap_pointer(@selector(lineScroll ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setHorizontalPageScroll:");
   arg2 = caml_wrap_pointer(@selector(setHorizontalPageScroll:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setVerticalPageScroll:");
   arg2 = caml_wrap_pointer(@selector(setVerticalPageScroll:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPageScroll:");
   arg2 = caml_wrap_pointer(@selector(setPageScroll:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("horizontalPageScroll:");
   arg2 = caml_wrap_pointer(@selector(horizontalPageScroll ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("verticalPageScroll:");
   arg2 = caml_wrap_pointer(@selector(verticalPageScroll ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("pageScroll:");
   arg2 = caml_wrap_pointer(@selector(pageScroll ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setScrollsDynamically:");
   arg2 = caml_wrap_pointer(@selector(setScrollsDynamically:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scrollsDynamically:");
   arg2 = caml_wrap_pointer(@selector(scrollsDynamically ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tile:");
   arg2 = caml_wrap_pointer(@selector(tile ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("reflectScrolledClipView:");
   arg2 = caml_wrap_pointer(@selector(reflectScrolledClipView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scrollWheel:");
   arg2 = caml_wrap_pointer(@selector(scrollWheel:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
