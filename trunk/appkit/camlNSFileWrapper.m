#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSFileWrapper.h>
value caml_init_NSFileWrapper(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSFileWrapper");
   arg2 = caml_wrap_id([NSFileWrapper class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("initDirectoryWithFileWrappers:");
   arg2 = caml_wrap_pointer(@selector(initDirectoryWithFileWrappers:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initRegularFileWithContents:");
   arg2 = caml_wrap_pointer(@selector(initRegularFileWithContents:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initSymbolicLinkWithDestination:");
   arg2 = caml_wrap_pointer(@selector(initSymbolicLinkWithDestination:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithPath:");
   arg2 = caml_wrap_pointer(@selector(initWithPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithSerializedRepresentation:");
   arg2 = caml_wrap_pointer(@selector(initWithSerializedRepresentation:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("writeToFile:atomically:updateFilenames:");
   arg2 = caml_wrap_pointer(@selector(writeToFile:atomically:updateFilenames:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("serializedRepresentation:");
   arg2 = caml_wrap_pointer(@selector(serializedRepresentation ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFilename:");
   arg2 = caml_wrap_pointer(@selector(setFilename:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("filename:");
   arg2 = caml_wrap_pointer(@selector(filename ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPreferredFilename:");
   arg2 = caml_wrap_pointer(@selector(setPreferredFilename:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("preferredFilename:");
   arg2 = caml_wrap_pointer(@selector(preferredFilename ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFileAttributes:");
   arg2 = caml_wrap_pointer(@selector(setFileAttributes:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileAttributes:");
   arg2 = caml_wrap_pointer(@selector(fileAttributes ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isRegularFile:");
   arg2 = caml_wrap_pointer(@selector(isRegularFile ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isDirectory:");
   arg2 = caml_wrap_pointer(@selector(isDirectory ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isSymbolicLink:");
   arg2 = caml_wrap_pointer(@selector(isSymbolicLink ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setIcon:");
   arg2 = caml_wrap_pointer(@selector(setIcon:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("icon:");
   arg2 = caml_wrap_pointer(@selector(icon ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("needsToBeUpdatedFromPath:");
   arg2 = caml_wrap_pointer(@selector(needsToBeUpdatedFromPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("updateFromPath:");
   arg2 = caml_wrap_pointer(@selector(updateFromPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addFileWrapper:");
   arg2 = caml_wrap_pointer(@selector(addFileWrapper:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeFileWrapper:");
   arg2 = caml_wrap_pointer(@selector(removeFileWrapper:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileWrappers:");
   arg2 = caml_wrap_pointer(@selector(fileWrappers ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("keyForFileWrapper:");
   arg2 = caml_wrap_pointer(@selector(keyForFileWrapper:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addFileWithPath:");
   arg2 = caml_wrap_pointer(@selector(addFileWithPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addRegularFileWithContents:preferredFilename:");
   arg2 = caml_wrap_pointer(@selector(addRegularFileWithContents:preferredFilename:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addSymbolicLinkWithDestination:preferredFilename:");
   arg2 = caml_wrap_pointer(@selector(addSymbolicLinkWithDestination:preferredFilename:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("regularFileContents:");
   arg2 = caml_wrap_pointer(@selector(regularFileContents ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("symbolicLinkDestination:");
   arg2 = caml_wrap_pointer(@selector(symbolicLinkDestination ));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
