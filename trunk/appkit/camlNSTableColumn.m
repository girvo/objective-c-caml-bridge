#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSTableColumn.h>
value caml_init_NSTableColumn(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSTableColumn");
   arg2 = caml_wrap_id([NSTableColumn class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("initWithIdentifier:");
   arg2 = caml_wrap_pointer(@selector(initWithIdentifier:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setIdentifier:");
   arg2 = caml_wrap_pointer(@selector(setIdentifier:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("identifier:");
   arg2 = caml_wrap_pointer(@selector(identifier ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTableView:");
   arg2 = caml_wrap_pointer(@selector(setTableView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tableView:");
   arg2 = caml_wrap_pointer(@selector(tableView ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setWidth:");
   arg2 = caml_wrap_pointer(@selector(setWidth:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("width:");
   arg2 = caml_wrap_pointer(@selector(width ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMinWidth:");
   arg2 = caml_wrap_pointer(@selector(setMinWidth:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("minWidth:");
   arg2 = caml_wrap_pointer(@selector(minWidth ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMaxWidth:");
   arg2 = caml_wrap_pointer(@selector(setMaxWidth:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("maxWidth:");
   arg2 = caml_wrap_pointer(@selector(maxWidth ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setHeaderCell:");
   arg2 = caml_wrap_pointer(@selector(setHeaderCell:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("headerCell:");
   arg2 = caml_wrap_pointer(@selector(headerCell ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDataCell:");
   arg2 = caml_wrap_pointer(@selector(setDataCell:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dataCell:");
   arg2 = caml_wrap_pointer(@selector(dataCell ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dataCellForRow:");
   arg2 = caml_wrap_pointer(@selector(dataCellForRow:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setEditable:");
   arg2 = caml_wrap_pointer(@selector(setEditable:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isEditable:");
   arg2 = caml_wrap_pointer(@selector(isEditable ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sizeToFit:");
   arg2 = caml_wrap_pointer(@selector(sizeToFit ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setSortDescriptorPrototype:");
   arg2 = caml_wrap_pointer(@selector(setSortDescriptorPrototype:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sortDescriptorPrototype:");
   arg2 = caml_wrap_pointer(@selector(sortDescriptorPrototype ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setResizingMask:");
   arg2 = caml_wrap_pointer(@selector(setResizingMask:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("resizingMask:");
   arg2 = caml_wrap_pointer(@selector(resizingMask ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setResizable:");
   arg2 = caml_wrap_pointer(@selector(setResizable:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isResizable:");
   arg2 = caml_wrap_pointer(@selector(isResizable ));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
