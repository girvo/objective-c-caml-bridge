// THIS FILE IS GENERATED - ALL CHANGES WILL BE LOST AT THE NEXT BUILD
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSView.h>
value caml_init_NSView(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSView");
   arg2 = caml_wrap_id([NSView class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("dragImage:at:offset:event:pasteboard:source:slideBack:");
   arg2 = caml_wrap_pointer(@selector(dragImage:at:offset:event:pasteboard:source:slideBack:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("registeredDraggedTypes:");
   arg2 = caml_wrap_pointer(@selector(registeredDraggedTypes ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("registerForDraggedTypes:");
   arg2 = caml_wrap_pointer(@selector(registerForDraggedTypes:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("unregisterDraggedTypes:");
   arg2 = caml_wrap_pointer(@selector(unregisterDraggedTypes ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dragFile:fromRect:slideBack:event:");
   arg2 = caml_wrap_pointer(@selector(dragFile:fromRect:slideBack:event:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dragPromisedFilesOfTypes:fromRect:source:slideBack:event:");
   arg2 = caml_wrap_pointer(@selector(dragPromisedFilesOfTypes:fromRect:source:slideBack:event:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("writeEPSInsideRect:toPasteboard:");
   arg2 = caml_wrap_pointer(@selector(writeEPSInsideRect:toPasteboard:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dataWithEPSInsideRect:");
   arg2 = caml_wrap_pointer(@selector(dataWithEPSInsideRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("writePDFInsideRect:toPasteboard:");
   arg2 = caml_wrap_pointer(@selector(writePDFInsideRect:toPasteboard:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dataWithPDFInsideRect:");
   arg2 = caml_wrap_pointer(@selector(dataWithPDFInsideRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("print:");
   arg2 = caml_wrap_pointer(@selector(print:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("knowsPageRange:");
   arg2 = caml_wrap_pointer(@selector(knowsPageRange:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("heightAdjustLimit:");
   arg2 = caml_wrap_pointer(@selector(heightAdjustLimit ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("widthAdjustLimit:");
   arg2 = caml_wrap_pointer(@selector(widthAdjustLimit ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("adjustPageWidthNew:left:right:limit:");
   arg2 = caml_wrap_pointer(@selector(adjustPageWidthNew:left:right:limit:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("adjustPageHeightNew:top:bottom:limit:");
   arg2 = caml_wrap_pointer(@selector(adjustPageHeightNew:top:bottom:limit:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("rectForPage:");
   arg2 = caml_wrap_pointer(@selector(rectForPage:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("locationOfPrintRect:");
   arg2 = caml_wrap_pointer(@selector(locationOfPrintRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawPageBorderWithSize:");
   arg2 = caml_wrap_pointer(@selector(drawPageBorderWithSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("pageHeader:");
   arg2 = caml_wrap_pointer(@selector(pageHeader ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("pageFooter:");
   arg2 = caml_wrap_pointer(@selector(pageFooter ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawSheetBorderWithSize:");
   arg2 = caml_wrap_pointer(@selector(drawSheetBorderWithSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("printJobTitle:");
   arg2 = caml_wrap_pointer(@selector(printJobTitle ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("beginDocument:");
   arg2 = caml_wrap_pointer(@selector(beginDocument ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("endDocument:");
   arg2 = caml_wrap_pointer(@selector(endDocument ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("beginPageInRect:atPlacement:");
   arg2 = caml_wrap_pointer(@selector(beginPageInRect:atPlacement:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("endPage:");
   arg2 = caml_wrap_pointer(@selector(endPage ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("performMnemonic:");
   arg2 = caml_wrap_pointer(@selector(performMnemonic:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setNextKeyView:");
   arg2 = caml_wrap_pointer(@selector(setNextKeyView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("nextKeyView:");
   arg2 = caml_wrap_pointer(@selector(nextKeyView ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("previousKeyView:");
   arg2 = caml_wrap_pointer(@selector(previousKeyView ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("nextValidKeyView:");
   arg2 = caml_wrap_pointer(@selector(nextValidKeyView ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("previousValidKeyView:");
   arg2 = caml_wrap_pointer(@selector(previousValidKeyView ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("canBecomeKeyView:");
   arg2 = caml_wrap_pointer(@selector(canBecomeKeyView ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setKeyboardFocusRingNeedsDisplayInRect:");
   arg2 = caml_wrap_pointer(@selector(setKeyboardFocusRingNeedsDisplayInRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFocusRingType:");
   arg2 = caml_wrap_pointer(@selector(setFocusRingType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("focusRingType:");
   arg2 = caml_wrap_pointer(@selector(focusRingType ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("defaultFocusRingType:");
   arg2 = caml_wrap_pointer(@selector(defaultFocusRingType ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithFrame:");
   arg2 = caml_wrap_pointer(@selector(initWithFrame:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("window:");
   arg2 = caml_wrap_pointer(@selector(window ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("superview:");
   arg2 = caml_wrap_pointer(@selector(superview ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("subviews:");
   arg2 = caml_wrap_pointer(@selector(subviews ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isDescendantOf:");
   arg2 = caml_wrap_pointer(@selector(isDescendantOf:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("ancestorSharedWithView:");
   arg2 = caml_wrap_pointer(@selector(ancestorSharedWithView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("opaqueAncestor:");
   arg2 = caml_wrap_pointer(@selector(opaqueAncestor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setHidden:");
   arg2 = caml_wrap_pointer(@selector(setHidden:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isHidden:");
   arg2 = caml_wrap_pointer(@selector(isHidden ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isHiddenOrHasHiddenAncestor:");
   arg2 = caml_wrap_pointer(@selector(isHiddenOrHasHiddenAncestor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getRectsBeingDrawn:count:");
   arg2 = caml_wrap_pointer(@selector(getRectsBeingDrawn:count:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("needsToDrawRect:");
   arg2 = caml_wrap_pointer(@selector(needsToDrawRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("wantsDefaultClipping:");
   arg2 = caml_wrap_pointer(@selector(wantsDefaultClipping ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addSubview:");
   arg2 = caml_wrap_pointer(@selector(addSubview:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addSubview:positioned:relativeTo:");
   arg2 = caml_wrap_pointer(@selector(addSubview:positioned:relativeTo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sortSubviewsUsingFunction:context:");
   arg2 = caml_wrap_pointer(@selector(sortSubviewsUsingFunction:context:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("viewWillMoveToWindow:");
   arg2 = caml_wrap_pointer(@selector(viewWillMoveToWindow:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("viewDidMoveToWindow:");
   arg2 = caml_wrap_pointer(@selector(viewDidMoveToWindow ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("viewWillMoveToSuperview:");
   arg2 = caml_wrap_pointer(@selector(viewWillMoveToSuperview:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("viewDidMoveToSuperview:");
   arg2 = caml_wrap_pointer(@selector(viewDidMoveToSuperview ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("didAddSubview:");
   arg2 = caml_wrap_pointer(@selector(didAddSubview:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("willRemoveSubview:");
   arg2 = caml_wrap_pointer(@selector(willRemoveSubview:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeFromSuperview:");
   arg2 = caml_wrap_pointer(@selector(removeFromSuperview ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("replaceSubview:l_with:");
   arg2 = caml_wrap_pointer(@selector(replaceSubview:l_with:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeFromSuperviewWithoutNeedingDisplay:");
   arg2 = caml_wrap_pointer(@selector(removeFromSuperviewWithoutNeedingDisplay ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPostsFrameChangedNotifications:");
   arg2 = caml_wrap_pointer(@selector(setPostsFrameChangedNotifications:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("postsFrameChangedNotifications:");
   arg2 = caml_wrap_pointer(@selector(postsFrameChangedNotifications ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("resizeSubviewsWithOldSize:");
   arg2 = caml_wrap_pointer(@selector(resizeSubviewsWithOldSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("resizeWithOldSuperviewSize:");
   arg2 = caml_wrap_pointer(@selector(resizeWithOldSuperviewSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAutoresizesSubviews:");
   arg2 = caml_wrap_pointer(@selector(setAutoresizesSubviews:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("autoresizesSubviews:");
   arg2 = caml_wrap_pointer(@selector(autoresizesSubviews ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAutoresizingMask:");
   arg2 = caml_wrap_pointer(@selector(setAutoresizingMask:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("autoresizingMask:");
   arg2 = caml_wrap_pointer(@selector(autoresizingMask ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFrameOrigin:");
   arg2 = caml_wrap_pointer(@selector(setFrameOrigin:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFrameSize:");
   arg2 = caml_wrap_pointer(@selector(setFrameSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFrame:");
   arg2 = caml_wrap_pointer(@selector(setFrame:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("frame:");
   arg2 = caml_wrap_pointer(@selector(frame ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFrameRotation:");
   arg2 = caml_wrap_pointer(@selector(setFrameRotation:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("frameRotation:");
   arg2 = caml_wrap_pointer(@selector(frameRotation ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setBoundsOrigin:");
   arg2 = caml_wrap_pointer(@selector(setBoundsOrigin:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setBoundsSize:");
   arg2 = caml_wrap_pointer(@selector(setBoundsSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setBoundsRotation:");
   arg2 = caml_wrap_pointer(@selector(setBoundsRotation:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("boundsRotation:");
   arg2 = caml_wrap_pointer(@selector(boundsRotation ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("translateOriginToPoint:");
   arg2 = caml_wrap_pointer(@selector(translateOriginToPoint:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scaleUnitSquareToSize:");
   arg2 = caml_wrap_pointer(@selector(scaleUnitSquareToSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("rotateByAngle:");
   arg2 = caml_wrap_pointer(@selector(rotateByAngle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setBounds:");
   arg2 = caml_wrap_pointer(@selector(setBounds:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("bounds:");
   arg2 = caml_wrap_pointer(@selector(bounds ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isFlipped:");
   arg2 = caml_wrap_pointer(@selector(isFlipped ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isRotatedFromBase:");
   arg2 = caml_wrap_pointer(@selector(isRotatedFromBase ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isRotatedOrScaledFromBase:");
   arg2 = caml_wrap_pointer(@selector(isRotatedOrScaledFromBase ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isOpaque:");
   arg2 = caml_wrap_pointer(@selector(isOpaque ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("convertPoint:fromView:");
   arg2 = caml_wrap_pointer(@selector(convertPoint:fromView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("convertPoint:toView:");
   arg2 = caml_wrap_pointer(@selector(convertPoint:toView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("convertSize:fromView:");
   arg2 = caml_wrap_pointer(@selector(convertSize:fromView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("convertSize:toView:");
   arg2 = caml_wrap_pointer(@selector(convertSize:toView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("convertRect:fromView:");
   arg2 = caml_wrap_pointer(@selector(convertRect:fromView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("convertRect:toView:");
   arg2 = caml_wrap_pointer(@selector(convertRect:toView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("centerScanRect:");
   arg2 = caml_wrap_pointer(@selector(centerScanRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("canDraw:");
   arg2 = caml_wrap_pointer(@selector(canDraw ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setNeedsDisplay:");
   arg2 = caml_wrap_pointer(@selector(setNeedsDisplay:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setNeedsDisplayInRect:");
   arg2 = caml_wrap_pointer(@selector(setNeedsDisplayInRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("needsDisplay:");
   arg2 = caml_wrap_pointer(@selector(needsDisplay ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("lockFocus:");
   arg2 = caml_wrap_pointer(@selector(lockFocus ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("unlockFocus:");
   arg2 = caml_wrap_pointer(@selector(unlockFocus ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("lockFocusIfCanDraw:");
   arg2 = caml_wrap_pointer(@selector(lockFocusIfCanDraw ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("lockFocusIfCanDrawInContext:");
   arg2 = caml_wrap_pointer(@selector(lockFocusIfCanDrawInContext:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("focusView:");
   arg2 = caml_wrap_pointer(@selector(focusView ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("visibleRect:");
   arg2 = caml_wrap_pointer(@selector(visibleRect ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("display:");
   arg2 = caml_wrap_pointer(@selector(display ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("displayIfNeeded:");
   arg2 = caml_wrap_pointer(@selector(displayIfNeeded ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("displayIfNeededIgnoringOpacity:");
   arg2 = caml_wrap_pointer(@selector(displayIfNeededIgnoringOpacity ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("displayRect:");
   arg2 = caml_wrap_pointer(@selector(displayRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("displayIfNeededInRect:");
   arg2 = caml_wrap_pointer(@selector(displayIfNeededInRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("displayRectIgnoringOpacity:");
   arg2 = caml_wrap_pointer(@selector(displayRectIgnoringOpacity:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("displayIfNeededInRectIgnoringOpacity:");
   arg2 = caml_wrap_pointer(@selector(displayIfNeededInRectIgnoringOpacity:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawRect:");
   arg2 = caml_wrap_pointer(@selector(drawRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("displayRectIgnoringOpacity:inContext:");
   arg2 = caml_wrap_pointer(@selector(displayRectIgnoringOpacity:inContext:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("bitmapImageRepForCachingDisplayInRect:");
   arg2 = caml_wrap_pointer(@selector(bitmapImageRepForCachingDisplayInRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("cacheDisplayInRect:toBitmapImageRep:");
   arg2 = caml_wrap_pointer(@selector(cacheDisplayInRect:toBitmapImageRep:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("gState:");
   arg2 = caml_wrap_pointer(@selector(gState ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("allocateGState:");
   arg2 = caml_wrap_pointer(@selector(allocateGState ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("releaseGState:");
   arg2 = caml_wrap_pointer(@selector(releaseGState ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setUpGState:");
   arg2 = caml_wrap_pointer(@selector(setUpGState ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("renewGState:");
   arg2 = caml_wrap_pointer(@selector(renewGState ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scrollPoint:");
   arg2 = caml_wrap_pointer(@selector(scrollPoint:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scrollRectToVisible:");
   arg2 = caml_wrap_pointer(@selector(scrollRectToVisible:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("autoscroll:");
   arg2 = caml_wrap_pointer(@selector(autoscroll:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("adjustScroll:");
   arg2 = caml_wrap_pointer(@selector(adjustScroll:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scrollRect:by:");
   arg2 = caml_wrap_pointer(@selector(scrollRect:by:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("hitTest:");
   arg2 = caml_wrap_pointer(@selector(hitTest:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("mouse:inRect:");
   arg2 = caml_wrap_pointer(@selector(mouse:inRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("viewWithTag:");
   arg2 = caml_wrap_pointer(@selector(viewWithTag:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tag:");
   arg2 = caml_wrap_pointer(@selector(tag ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("performKeyEquivalent:");
   arg2 = caml_wrap_pointer(@selector(performKeyEquivalent:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("acceptsFirstMouse:");
   arg2 = caml_wrap_pointer(@selector(acceptsFirstMouse:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("shouldDelayWindowOrderingForEvent:");
   arg2 = caml_wrap_pointer(@selector(shouldDelayWindowOrderingForEvent:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("needsPanelToBecomeKey:");
   arg2 = caml_wrap_pointer(@selector(needsPanelToBecomeKey ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("mouseDownCanMoveWindow:");
   arg2 = caml_wrap_pointer(@selector(mouseDownCanMoveWindow ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addCursorRect:cursor:");
   arg2 = caml_wrap_pointer(@selector(addCursorRect:cursor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeCursorRect:cursor:");
   arg2 = caml_wrap_pointer(@selector(removeCursorRect:cursor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("discardCursorRects:");
   arg2 = caml_wrap_pointer(@selector(discardCursorRects ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("resetCursorRects:");
   arg2 = caml_wrap_pointer(@selector(resetCursorRects ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addTrackingRect:owner:userData:assumeInside:");
   arg2 = caml_wrap_pointer(@selector(addTrackingRect:owner:userData:assumeInside:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeTrackingRect:");
   arg2 = caml_wrap_pointer(@selector(removeTrackingRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("shouldDrawColor:");
   arg2 = caml_wrap_pointer(@selector(shouldDrawColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPostsBoundsChangedNotifications:");
   arg2 = caml_wrap_pointer(@selector(setPostsBoundsChangedNotifications:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("postsBoundsChangedNotifications:");
   arg2 = caml_wrap_pointer(@selector(postsBoundsChangedNotifications ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("enclosingScrollView:");
   arg2 = caml_wrap_pointer(@selector(enclosingScrollView ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("menuForEvent:");
   arg2 = caml_wrap_pointer(@selector(menuForEvent:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("defaultMenu:");
   arg2 = caml_wrap_pointer(@selector(defaultMenu ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setToolTip:");
   arg2 = caml_wrap_pointer(@selector(setToolTip:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("toolTip:");
   arg2 = caml_wrap_pointer(@selector(toolTip ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addToolTipRect:owner:userData:");
   arg2 = caml_wrap_pointer(@selector(addToolTipRect:owner:userData:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeToolTip:");
   arg2 = caml_wrap_pointer(@selector(removeToolTip:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeAllToolTips:");
   arg2 = caml_wrap_pointer(@selector(removeAllToolTips ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("viewWillStartLiveResize:");
   arg2 = caml_wrap_pointer(@selector(viewWillStartLiveResize ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("viewDidEndLiveResize:");
   arg2 = caml_wrap_pointer(@selector(viewDidEndLiveResize ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("inLiveResize:");
   arg2 = caml_wrap_pointer(@selector(inLiveResize ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("preservesContentDuringLiveResize:");
   arg2 = caml_wrap_pointer(@selector(preservesContentDuringLiveResize ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("rectPreservedDuringLiveResize:");
   arg2 = caml_wrap_pointer(@selector(rectPreservedDuringLiveResize ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getRectsExposedDuringLiveResize:count:");
   arg2 = caml_wrap_pointer(@selector(getRectsExposedDuringLiveResize:count:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSObject");
   arg2 = caml_wrap_id([NSObject class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("view:stringForToolTip:point:userData:");
   arg2 = caml_wrap_pointer(@selector(view:stringForToolTip:point:userData:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
