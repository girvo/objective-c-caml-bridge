#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSWorkspace.h>
value caml_init_NSWorkspace(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSWorkspace");
   arg2 = caml_wrap_id([NSWorkspace class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("sharedWorkspace:");
   arg2 = caml_wrap_pointer(@selector(sharedWorkspace ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("notificationCenter:");
   arg2 = caml_wrap_pointer(@selector(notificationCenter ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("openFile:");
   arg2 = caml_wrap_pointer(@selector(openFile:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("openFile:withApplication:");
   arg2 = caml_wrap_pointer(@selector(openFile:withApplication:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("openFile:withApplication:andDeactivate:");
   arg2 = caml_wrap_pointer(@selector(openFile:withApplication:andDeactivate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("openTempFile:");
   arg2 = caml_wrap_pointer(@selector(openTempFile:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("openFile:fromImage:at:inView:");
   arg2 = caml_wrap_pointer(@selector(openFile:fromImage:at:inView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("openURL:");
   arg2 = caml_wrap_pointer(@selector(openURL:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("launchApplication:");
   arg2 = caml_wrap_pointer(@selector(launchApplication:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("launchApplication:showIcon:autolaunch:");
   arg2 = caml_wrap_pointer(@selector(launchApplication:showIcon:autolaunch:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fullPathForApplication:");
   arg2 = caml_wrap_pointer(@selector(fullPathForApplication:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectFile:inFileViewerRootedAtPath:");
   arg2 = caml_wrap_pointer(@selector(selectFile:inFileViewerRootedAtPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("findApplications:");
   arg2 = caml_wrap_pointer(@selector(findApplications ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("noteFileSystemChanged:");
   arg2 = caml_wrap_pointer(@selector(noteFileSystemChanged ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("noteFileSystemChanged:");
   arg2 = caml_wrap_pointer(@selector(noteFileSystemChanged:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileSystemChanged:");
   arg2 = caml_wrap_pointer(@selector(fileSystemChanged ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("noteUserDefaultsChanged:");
   arg2 = caml_wrap_pointer(@selector(noteUserDefaultsChanged ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("userDefaultsChanged:");
   arg2 = caml_wrap_pointer(@selector(userDefaultsChanged ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getInfoForFile:application:l_type:");
   arg2 = caml_wrap_pointer(@selector(getInfoForFile:application:l_type:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isFilePackageAtPath:");
   arg2 = caml_wrap_pointer(@selector(isFilePackageAtPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("iconForFile:");
   arg2 = caml_wrap_pointer(@selector(iconForFile:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("iconForFiles:");
   arg2 = caml_wrap_pointer(@selector(iconForFiles:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("iconForFileType:");
   arg2 = caml_wrap_pointer(@selector(iconForFileType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setIcon:forFile:options:");
   arg2 = caml_wrap_pointer(@selector(setIcon:forFile:options:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getFileSystemInfoForPath:isRemovable:isWritable:isUnmountable:description:l_type:");
   arg2 = caml_wrap_pointer(@selector(getFileSystemInfoForPath:isRemovable:isWritable:isUnmountable:description:l_type:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("performFileOperation:source:destination:files:tag:");
   arg2 = caml_wrap_pointer(@selector(performFileOperation:source:destination:files:tag:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("unmountAndEjectDeviceAtPath:");
   arg2 = caml_wrap_pointer(@selector(unmountAndEjectDeviceAtPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("extendPowerOffBy:");
   arg2 = caml_wrap_pointer(@selector(extendPowerOffBy:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("slideImage:from:l_to:");
   arg2 = caml_wrap_pointer(@selector(slideImage:from:l_to:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("hideOtherApplications:");
   arg2 = caml_wrap_pointer(@selector(hideOtherApplications ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("mountedLocalVolumePaths:");
   arg2 = caml_wrap_pointer(@selector(mountedLocalVolumePaths ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("mountedRemovableMedia:");
   arg2 = caml_wrap_pointer(@selector(mountedRemovableMedia ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("mountNewRemovableMedia:");
   arg2 = caml_wrap_pointer(@selector(mountNewRemovableMedia ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("checkForRemovableMedia:");
   arg2 = caml_wrap_pointer(@selector(checkForRemovableMedia ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("absolutePathForAppBundleWithIdentifier:");
   arg2 = caml_wrap_pointer(@selector(absolutePathForAppBundleWithIdentifier:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("launchAppWithBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifier:");
   arg2 = caml_wrap_pointer(@selector(launchAppWithBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifier:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("openURLs:withAppBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifiers:");
   arg2 = caml_wrap_pointer(@selector(openURLs:withAppBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifiers:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("launchedApplications:");
   arg2 = caml_wrap_pointer(@selector(launchedApplications ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("activeApplication:");
   arg2 = caml_wrap_pointer(@selector(activeApplication ));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
