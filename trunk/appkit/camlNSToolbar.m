#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSToolbar.h>
value caml_init_NSToolbar(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSToolbar");
   arg2 = caml_wrap_id([NSToolbar class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("initWithIdentifier:");
   arg2 = caml_wrap_pointer(@selector(initWithIdentifier:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("insertItemWithItemIdentifier:atIndex:");
   arg2 = caml_wrap_pointer(@selector(insertItemWithItemIdentifier:atIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeItemAtIndex:");
   arg2 = caml_wrap_pointer(@selector(removeItemAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDelegate:");
   arg2 = caml_wrap_pointer(@selector(setDelegate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("delegate:");
   arg2 = caml_wrap_pointer(@selector(delegate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setVisible:");
   arg2 = caml_wrap_pointer(@selector(setVisible:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isVisible:");
   arg2 = caml_wrap_pointer(@selector(isVisible ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("runCustomizationPalette:");
   arg2 = caml_wrap_pointer(@selector(runCustomizationPalette:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("customizationPaletteIsRunning:");
   arg2 = caml_wrap_pointer(@selector(customizationPaletteIsRunning ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDisplayMode:");
   arg2 = caml_wrap_pointer(@selector(setDisplayMode:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("displayMode:");
   arg2 = caml_wrap_pointer(@selector(displayMode ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setSelectedItemIdentifier:");
   arg2 = caml_wrap_pointer(@selector(setSelectedItemIdentifier:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectedItemIdentifier:");
   arg2 = caml_wrap_pointer(@selector(selectedItemIdentifier ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setSizeMode:");
   arg2 = caml_wrap_pointer(@selector(setSizeMode:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sizeMode:");
   arg2 = caml_wrap_pointer(@selector(sizeMode ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setShowsBaselineSeparator:");
   arg2 = caml_wrap_pointer(@selector(setShowsBaselineSeparator:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("showsBaselineSeparator:");
   arg2 = caml_wrap_pointer(@selector(showsBaselineSeparator ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAllowsUserCustomization:");
   arg2 = caml_wrap_pointer(@selector(setAllowsUserCustomization:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("allowsUserCustomization:");
   arg2 = caml_wrap_pointer(@selector(allowsUserCustomization ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("identifier:");
   arg2 = caml_wrap_pointer(@selector(identifier ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("items:");
   arg2 = caml_wrap_pointer(@selector(items ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("visibleItems:");
   arg2 = caml_wrap_pointer(@selector(visibleItems ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAutosavesConfiguration:");
   arg2 = caml_wrap_pointer(@selector(setAutosavesConfiguration:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("autosavesConfiguration:");
   arg2 = caml_wrap_pointer(@selector(autosavesConfiguration ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setConfigurationFromDictionary:");
   arg2 = caml_wrap_pointer(@selector(setConfigurationFromDictionary:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("configurationDictionary:");
   arg2 = caml_wrap_pointer(@selector(configurationDictionary ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("validateVisibleItems:");
   arg2 = caml_wrap_pointer(@selector(validateVisibleItems ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSObject");
   arg2 = caml_wrap_id([NSObject class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("toolbarWillAddItem:");
   arg2 = caml_wrap_pointer(@selector(toolbarWillAddItem:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("toolbarDidRemoveItem:");
   arg2 = caml_wrap_pointer(@selector(toolbarDidRemoveItem:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("toolbar:itemForItemIdentifier:willBeInsertedIntoToolbar:");
   arg2 = caml_wrap_pointer(@selector(toolbar:itemForItemIdentifier:willBeInsertedIntoToolbar:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("toolbarDefaultItemIdentifiers:");
   arg2 = caml_wrap_pointer(@selector(toolbarDefaultItemIdentifiers:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("toolbarAllowedItemIdentifiers:");
   arg2 = caml_wrap_pointer(@selector(toolbarAllowedItemIdentifiers:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("toolbarSelectableItemIdentifiers:");
   arg2 = caml_wrap_pointer(@selector(toolbarSelectableItemIdentifiers:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
