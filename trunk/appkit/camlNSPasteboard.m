#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSPasteboard.h>
value caml_init_NSPasteboard(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSURL");
   arg2 = caml_wrap_id([NSURL class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("l_URLFromPasteboard:");
   arg2 = caml_wrap_pointer(@selector(l_URLFromPasteboard:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("writeToPasteboard:");
   arg2 = caml_wrap_pointer(@selector(writeToPasteboard:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSPasteboard");
   arg2 = caml_wrap_id([NSPasteboard class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("writeFileContents:");
   arg2 = caml_wrap_pointer(@selector(writeFileContents:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("readFileContentsType:toFile:");
   arg2 = caml_wrap_pointer(@selector(readFileContentsType:toFile:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("writeFileWrapper:");
   arg2 = caml_wrap_pointer(@selector(writeFileWrapper:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("readFileWrapper:");
   arg2 = caml_wrap_pointer(@selector(readFileWrapper ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("generalPasteboard:");
   arg2 = caml_wrap_pointer(@selector(generalPasteboard ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("pasteboardWithName:");
   arg2 = caml_wrap_pointer(@selector(pasteboardWithName:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("pasteboardWithUniqueName:");
   arg2 = caml_wrap_pointer(@selector(pasteboardWithUniqueName ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("typesFilterableTo:");
   arg2 = caml_wrap_pointer(@selector(typesFilterableTo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("pasteboardByFilteringFile:");
   arg2 = caml_wrap_pointer(@selector(pasteboardByFilteringFile:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("pasteboardByFilteringData:ofType:");
   arg2 = caml_wrap_pointer(@selector(pasteboardByFilteringData:ofType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("pasteboardByFilteringTypesInPasteboard:");
   arg2 = caml_wrap_pointer(@selector(pasteboardByFilteringTypesInPasteboard:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("name:");
   arg2 = caml_wrap_pointer(@selector(name ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("releaseGlobally:");
   arg2 = caml_wrap_pointer(@selector(releaseGlobally ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("declareTypes:owner:");
   arg2 = caml_wrap_pointer(@selector(declareTypes:owner:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addTypes:owner:");
   arg2 = caml_wrap_pointer(@selector(addTypes:owner:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("changeCount:");
   arg2 = caml_wrap_pointer(@selector(changeCount ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("types:");
   arg2 = caml_wrap_pointer(@selector(types ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("availableTypeFromArray:");
   arg2 = caml_wrap_pointer(@selector(availableTypeFromArray:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setData:forType:");
   arg2 = caml_wrap_pointer(@selector(setData:forType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dataForType:");
   arg2 = caml_wrap_pointer(@selector(dataForType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPropertyList:forType:");
   arg2 = caml_wrap_pointer(@selector(setPropertyList:forType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("propertyListForType:");
   arg2 = caml_wrap_pointer(@selector(propertyListForType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setString:forType:");
   arg2 = caml_wrap_pointer(@selector(setString:forType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stringForType:");
   arg2 = caml_wrap_pointer(@selector(stringForType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSObject");
   arg2 = caml_wrap_id([NSObject class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("pasteboard:provideDataForType:");
   arg2 = caml_wrap_pointer(@selector(pasteboard:provideDataForType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("pasteboardChangedOwner:");
   arg2 = caml_wrap_pointer(@selector(pasteboardChangedOwner:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
