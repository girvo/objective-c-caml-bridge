#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSDrawer.h>
value caml_init_NSDrawer(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSDrawer");
   arg2 = caml_wrap_id([NSDrawer class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("initWithContentSize:preferredEdge:");
   arg2 = caml_wrap_pointer(@selector(initWithContentSize:preferredEdge:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setParentWindow:");
   arg2 = caml_wrap_pointer(@selector(setParentWindow:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("parentWindow:");
   arg2 = caml_wrap_pointer(@selector(parentWindow ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setContentView:");
   arg2 = caml_wrap_pointer(@selector(setContentView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("contentView:");
   arg2 = caml_wrap_pointer(@selector(contentView ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPreferredEdge:");
   arg2 = caml_wrap_pointer(@selector(setPreferredEdge:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("preferredEdge:");
   arg2 = caml_wrap_pointer(@selector(preferredEdge ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDelegate:");
   arg2 = caml_wrap_pointer(@selector(setDelegate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("delegate:");
   arg2 = caml_wrap_pointer(@selector(delegate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("open:");
   arg2 = caml_wrap_pointer(@selector(open ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("openOnEdge:");
   arg2 = caml_wrap_pointer(@selector(openOnEdge:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("close:");
   arg2 = caml_wrap_pointer(@selector(close ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("open:");
   arg2 = caml_wrap_pointer(@selector(open:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("close:");
   arg2 = caml_wrap_pointer(@selector(close:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("toggle:");
   arg2 = caml_wrap_pointer(@selector(toggle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("state:");
   arg2 = caml_wrap_pointer(@selector(state ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("edge:");
   arg2 = caml_wrap_pointer(@selector(edge ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setContentSize:");
   arg2 = caml_wrap_pointer(@selector(setContentSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("contentSize:");
   arg2 = caml_wrap_pointer(@selector(contentSize ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMinContentSize:");
   arg2 = caml_wrap_pointer(@selector(setMinContentSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("minContentSize:");
   arg2 = caml_wrap_pointer(@selector(minContentSize ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMaxContentSize:");
   arg2 = caml_wrap_pointer(@selector(setMaxContentSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("maxContentSize:");
   arg2 = caml_wrap_pointer(@selector(maxContentSize ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setLeadingOffset:");
   arg2 = caml_wrap_pointer(@selector(setLeadingOffset:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("leadingOffset:");
   arg2 = caml_wrap_pointer(@selector(leadingOffset ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTrailingOffset:");
   arg2 = caml_wrap_pointer(@selector(setTrailingOffset:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("trailingOffset:");
   arg2 = caml_wrap_pointer(@selector(trailingOffset ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSWindow");
   arg2 = caml_wrap_id([NSWindow class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("drawers:");
   arg2 = caml_wrap_pointer(@selector(drawers ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSObject");
   arg2 = caml_wrap_id([NSObject class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("drawerShouldOpen:");
   arg2 = caml_wrap_pointer(@selector(drawerShouldOpen:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawerShouldClose:");
   arg2 = caml_wrap_pointer(@selector(drawerShouldClose:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawerWillResizeContents:toSize:");
   arg2 = caml_wrap_pointer(@selector(drawerWillResizeContents:toSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawerWillOpen:");
   arg2 = caml_wrap_pointer(@selector(drawerWillOpen:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawerDidOpen:");
   arg2 = caml_wrap_pointer(@selector(drawerDidOpen:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawerWillClose:");
   arg2 = caml_wrap_pointer(@selector(drawerWillClose:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawerDidClose:");
   arg2 = caml_wrap_pointer(@selector(drawerDidClose:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
