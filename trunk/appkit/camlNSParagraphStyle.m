// THIS FILE IS GENERATED - ALL CHANGES WILL BE LOST AT THE NEXT BUILD
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSParagraphStyle.h>
value caml_init_NSParagraphStyle(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSTextTab");
   arg2 = caml_wrap_id([NSTextTab class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("initWithTextAlignment:location:options:");
   arg2 = caml_wrap_pointer(@selector(initWithTextAlignment:location:options:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("alignment:");
   arg2 = caml_wrap_pointer(@selector(alignment ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("options:");
   arg2 = caml_wrap_pointer(@selector(options ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithType:location:");
   arg2 = caml_wrap_pointer(@selector(initWithType:location:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("location:");
   arg2 = caml_wrap_pointer(@selector(location ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tabStopType:");
   arg2 = caml_wrap_pointer(@selector(tabStopType ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSParagraphStyle");
   arg2 = caml_wrap_id([NSParagraphStyle class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("defaultParagraphStyle:");
   arg2 = caml_wrap_pointer(@selector(defaultParagraphStyle ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("defaultWritingDirectionForLanguage:");
   arg2 = caml_wrap_pointer(@selector(defaultWritingDirectionForLanguage:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("lineSpacing:");
   arg2 = caml_wrap_pointer(@selector(lineSpacing ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("paragraphSpacing:");
   arg2 = caml_wrap_pointer(@selector(paragraphSpacing ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("alignment:");
   arg2 = caml_wrap_pointer(@selector(alignment ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("headIndent:");
   arg2 = caml_wrap_pointer(@selector(headIndent ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tailIndent:");
   arg2 = caml_wrap_pointer(@selector(tailIndent ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("firstLineHeadIndent:");
   arg2 = caml_wrap_pointer(@selector(firstLineHeadIndent ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tabStops:");
   arg2 = caml_wrap_pointer(@selector(tabStops ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("minimumLineHeight:");
   arg2 = caml_wrap_pointer(@selector(minimumLineHeight ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("maximumLineHeight:");
   arg2 = caml_wrap_pointer(@selector(maximumLineHeight ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("lineBreakMode:");
   arg2 = caml_wrap_pointer(@selector(lineBreakMode ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("baseWritingDirection:");
   arg2 = caml_wrap_pointer(@selector(baseWritingDirection ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("lineHeightMultiple:");
   arg2 = caml_wrap_pointer(@selector(lineHeightMultiple ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("paragraphSpacingBefore:");
   arg2 = caml_wrap_pointer(@selector(paragraphSpacingBefore ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("defaultTabInterval:");
   arg2 = caml_wrap_pointer(@selector(defaultTabInterval ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textBlocks:");
   arg2 = caml_wrap_pointer(@selector(textBlocks ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textLists:");
   arg2 = caml_wrap_pointer(@selector(textLists ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("hyphenationFactor:");
   arg2 = caml_wrap_pointer(@selector(hyphenationFactor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tighteningFactorForTruncation:");
   arg2 = caml_wrap_pointer(@selector(tighteningFactorForTruncation ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("headerLevel:");
   arg2 = caml_wrap_pointer(@selector(headerLevel ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSMutableParagraphStyle");
   arg2 = caml_wrap_id([NSMutableParagraphStyle class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("setLineSpacing:");
   arg2 = caml_wrap_pointer(@selector(setLineSpacing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setParagraphSpacing:");
   arg2 = caml_wrap_pointer(@selector(setParagraphSpacing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAlignment:");
   arg2 = caml_wrap_pointer(@selector(setAlignment:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFirstLineHeadIndent:");
   arg2 = caml_wrap_pointer(@selector(setFirstLineHeadIndent:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setHeadIndent:");
   arg2 = caml_wrap_pointer(@selector(setHeadIndent:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTailIndent:");
   arg2 = caml_wrap_pointer(@selector(setTailIndent:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setLineBreakMode:");
   arg2 = caml_wrap_pointer(@selector(setLineBreakMode:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMinimumLineHeight:");
   arg2 = caml_wrap_pointer(@selector(setMinimumLineHeight:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMaximumLineHeight:");
   arg2 = caml_wrap_pointer(@selector(setMaximumLineHeight:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addTabStop:");
   arg2 = caml_wrap_pointer(@selector(addTabStop:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeTabStop:");
   arg2 = caml_wrap_pointer(@selector(removeTabStop:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTabStops:");
   arg2 = caml_wrap_pointer(@selector(setTabStops:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setParagraphStyle:");
   arg2 = caml_wrap_pointer(@selector(setParagraphStyle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setBaseWritingDirection:");
   arg2 = caml_wrap_pointer(@selector(setBaseWritingDirection:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setLineHeightMultiple:");
   arg2 = caml_wrap_pointer(@selector(setLineHeightMultiple:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setParagraphSpacingBefore:");
   arg2 = caml_wrap_pointer(@selector(setParagraphSpacingBefore:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDefaultTabInterval:");
   arg2 = caml_wrap_pointer(@selector(setDefaultTabInterval:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTextBlocks:");
   arg2 = caml_wrap_pointer(@selector(setTextBlocks:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTextLists:");
   arg2 = caml_wrap_pointer(@selector(setTextLists:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setHyphenationFactor:");
   arg2 = caml_wrap_pointer(@selector(setHyphenationFactor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTighteningFactorForTruncation:");
   arg2 = caml_wrap_pointer(@selector(setTighteningFactorForTruncation:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setHeaderLevel:");
   arg2 = caml_wrap_pointer(@selector(setHeaderLevel:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
