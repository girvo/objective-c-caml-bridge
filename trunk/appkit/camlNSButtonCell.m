#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSButtonCell.h>
value caml_init_NSButtonCell(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSButtonCell");
   arg2 = caml_wrap_id([NSButtonCell class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("setSound:");
   arg2 = caml_wrap_pointer(@selector(setSound:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sound:");
   arg2 = caml_wrap_pointer(@selector(sound ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setBezelStyle:");
   arg2 = caml_wrap_pointer(@selector(setBezelStyle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("bezelStyle:");
   arg2 = caml_wrap_pointer(@selector(bezelStyle ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("attributedTitle:");
   arg2 = caml_wrap_pointer(@selector(attributedTitle ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAttributedTitle:");
   arg2 = caml_wrap_pointer(@selector(setAttributedTitle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("attributedAlternateTitle:");
   arg2 = caml_wrap_pointer(@selector(attributedAlternateTitle ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAttributedAlternateTitle:");
   arg2 = caml_wrap_pointer(@selector(setAttributedAlternateTitle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("gradientType:");
   arg2 = caml_wrap_pointer(@selector(gradientType ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setGradientType:");
   arg2 = caml_wrap_pointer(@selector(setGradientType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setImageDimsWhenDisabled:");
   arg2 = caml_wrap_pointer(@selector(setImageDimsWhenDisabled:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("imageDimsWhenDisabled:");
   arg2 = caml_wrap_pointer(@selector(imageDimsWhenDisabled ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setShowsBorderOnlyWhileMouseInside:");
   arg2 = caml_wrap_pointer(@selector(setShowsBorderOnlyWhileMouseInside:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("showsBorderOnlyWhileMouseInside:");
   arg2 = caml_wrap_pointer(@selector(showsBorderOnlyWhileMouseInside ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("mouseEntered:");
   arg2 = caml_wrap_pointer(@selector(mouseEntered:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("mouseExited:");
   arg2 = caml_wrap_pointer(@selector(mouseExited:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("backgroundColor:");
   arg2 = caml_wrap_pointer(@selector(backgroundColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setBackgroundColor:");
   arg2 = caml_wrap_pointer(@selector(setBackgroundColor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTitleWithMnemonic:");
   arg2 = caml_wrap_pointer(@selector(setTitleWithMnemonic:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAlternateTitleWithMnemonic:");
   arg2 = caml_wrap_pointer(@selector(setAlternateTitleWithMnemonic:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAlternateMnemonicLocation:");
   arg2 = caml_wrap_pointer(@selector(setAlternateMnemonicLocation:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("alternateMnemonicLocation:");
   arg2 = caml_wrap_pointer(@selector(alternateMnemonicLocation ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("alternateMnemonic:");
   arg2 = caml_wrap_pointer(@selector(alternateMnemonic ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("title:");
   arg2 = caml_wrap_pointer(@selector(title ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTitle:");
   arg2 = caml_wrap_pointer(@selector(setTitle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("alternateTitle:");
   arg2 = caml_wrap_pointer(@selector(alternateTitle ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAlternateTitle:");
   arg2 = caml_wrap_pointer(@selector(setAlternateTitle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("alternateImage:");
   arg2 = caml_wrap_pointer(@selector(alternateImage ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAlternateImage:");
   arg2 = caml_wrap_pointer(@selector(setAlternateImage:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("imagePosition:");
   arg2 = caml_wrap_pointer(@selector(imagePosition ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setImagePosition:");
   arg2 = caml_wrap_pointer(@selector(setImagePosition:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("highlightsBy:");
   arg2 = caml_wrap_pointer(@selector(highlightsBy ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setHighlightsBy:");
   arg2 = caml_wrap_pointer(@selector(setHighlightsBy:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("showsStateBy:");
   arg2 = caml_wrap_pointer(@selector(showsStateBy ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setShowsStateBy:");
   arg2 = caml_wrap_pointer(@selector(setShowsStateBy:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setButtonType:");
   arg2 = caml_wrap_pointer(@selector(setButtonType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isOpaque:");
   arg2 = caml_wrap_pointer(@selector(isOpaque ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFont:");
   arg2 = caml_wrap_pointer(@selector(setFont:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isTransparent:");
   arg2 = caml_wrap_pointer(@selector(isTransparent ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTransparent:");
   arg2 = caml_wrap_pointer(@selector(setTransparent:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPeriodicDelay:interval:");
   arg2 = caml_wrap_pointer(@selector(setPeriodicDelay:interval:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getPeriodicDelay:interval:");
   arg2 = caml_wrap_pointer(@selector(getPeriodicDelay:interval:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("keyEquivalent:");
   arg2 = caml_wrap_pointer(@selector(keyEquivalent ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setKeyEquivalent:");
   arg2 = caml_wrap_pointer(@selector(setKeyEquivalent:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("keyEquivalentModifierMask:");
   arg2 = caml_wrap_pointer(@selector(keyEquivalentModifierMask ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setKeyEquivalentModifierMask:");
   arg2 = caml_wrap_pointer(@selector(setKeyEquivalentModifierMask:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("keyEquivalentFont:");
   arg2 = caml_wrap_pointer(@selector(keyEquivalentFont ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setKeyEquivalentFont:");
   arg2 = caml_wrap_pointer(@selector(setKeyEquivalentFont:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setKeyEquivalentFont:size:");
   arg2 = caml_wrap_pointer(@selector(setKeyEquivalentFont:size:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("performClick:");
   arg2 = caml_wrap_pointer(@selector(performClick:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawImage:withFrame:inView:");
   arg2 = caml_wrap_pointer(@selector(drawImage:withFrame:inView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawTitle:withFrame:inView:");
   arg2 = caml_wrap_pointer(@selector(drawTitle:withFrame:inView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawBezelWithFrame:inView:");
   arg2 = caml_wrap_pointer(@selector(drawBezelWithFrame:inView:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
