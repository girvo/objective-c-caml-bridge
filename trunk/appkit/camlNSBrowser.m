// THIS FILE IS GENERATED - ALL CHANGES WILL BE LOST AT THE NEXT BUILD
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSBrowser.h>
value caml_init_NSBrowser(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSBrowser");
   arg2 = caml_wrap_id([NSBrowser class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("cellClass:");
   arg2 = caml_wrap_pointer(@selector(cellClass ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("loadColumnZero:");
   arg2 = caml_wrap_pointer(@selector(loadColumnZero ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isLoaded:");
   arg2 = caml_wrap_pointer(@selector(isLoaded ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDoubleAction:");
   arg2 = caml_wrap_pointer(@selector(setDoubleAction:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("doubleAction:");
   arg2 = caml_wrap_pointer(@selector(doubleAction ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMatrixClass:");
   arg2 = caml_wrap_pointer(@selector(setMatrixClass:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("matrixClass:");
   arg2 = caml_wrap_pointer(@selector(matrixClass ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setCellClass:");
   arg2 = caml_wrap_pointer(@selector(setCellClass:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setCellPrototype:");
   arg2 = caml_wrap_pointer(@selector(setCellPrototype:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("cellPrototype:");
   arg2 = caml_wrap_pointer(@selector(cellPrototype ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDelegate:");
   arg2 = caml_wrap_pointer(@selector(setDelegate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("delegate:");
   arg2 = caml_wrap_pointer(@selector(delegate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setReusesColumns:");
   arg2 = caml_wrap_pointer(@selector(setReusesColumns:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("reusesColumns:");
   arg2 = caml_wrap_pointer(@selector(reusesColumns ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setHasHorizontalScroller:");
   arg2 = caml_wrap_pointer(@selector(setHasHorizontalScroller:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("hasHorizontalScroller:");
   arg2 = caml_wrap_pointer(@selector(hasHorizontalScroller ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setSeparatesColumns:");
   arg2 = caml_wrap_pointer(@selector(setSeparatesColumns:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("separatesColumns:");
   arg2 = caml_wrap_pointer(@selector(separatesColumns ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTitled:");
   arg2 = caml_wrap_pointer(@selector(setTitled:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isTitled:");
   arg2 = caml_wrap_pointer(@selector(isTitled ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMinColumnWidth:");
   arg2 = caml_wrap_pointer(@selector(setMinColumnWidth:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("minColumnWidth:");
   arg2 = caml_wrap_pointer(@selector(minColumnWidth ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMaxVisibleColumns:");
   arg2 = caml_wrap_pointer(@selector(setMaxVisibleColumns:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("maxVisibleColumns:");
   arg2 = caml_wrap_pointer(@selector(maxVisibleColumns ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAllowsMultipleSelection:");
   arg2 = caml_wrap_pointer(@selector(setAllowsMultipleSelection:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("allowsMultipleSelection:");
   arg2 = caml_wrap_pointer(@selector(allowsMultipleSelection ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAllowsBranchSelection:");
   arg2 = caml_wrap_pointer(@selector(setAllowsBranchSelection:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("allowsBranchSelection:");
   arg2 = caml_wrap_pointer(@selector(allowsBranchSelection ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAllowsEmptySelection:");
   arg2 = caml_wrap_pointer(@selector(setAllowsEmptySelection:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("allowsEmptySelection:");
   arg2 = caml_wrap_pointer(@selector(allowsEmptySelection ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTakesTitleFromPreviousColumn:");
   arg2 = caml_wrap_pointer(@selector(setTakesTitleFromPreviousColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("takesTitleFromPreviousColumn:");
   arg2 = caml_wrap_pointer(@selector(takesTitleFromPreviousColumn ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAcceptsArrowKeys:");
   arg2 = caml_wrap_pointer(@selector(setAcceptsArrowKeys:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("acceptsArrowKeys:");
   arg2 = caml_wrap_pointer(@selector(acceptsArrowKeys ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setSendsActionOnArrowKeys:");
   arg2 = caml_wrap_pointer(@selector(setSendsActionOnArrowKeys:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sendsActionOnArrowKeys:");
   arg2 = caml_wrap_pointer(@selector(sendsActionOnArrowKeys ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTitle:ofColumn:");
   arg2 = caml_wrap_pointer(@selector(setTitle:ofColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("titleOfColumn:");
   arg2 = caml_wrap_pointer(@selector(titleOfColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPathSeparator:");
   arg2 = caml_wrap_pointer(@selector(setPathSeparator:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("pathSeparator:");
   arg2 = caml_wrap_pointer(@selector(pathSeparator ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPath:");
   arg2 = caml_wrap_pointer(@selector(setPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("path:");
   arg2 = caml_wrap_pointer(@selector(path ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("pathToColumn:");
   arg2 = caml_wrap_pointer(@selector(pathToColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectedColumn:");
   arg2 = caml_wrap_pointer(@selector(selectedColumn ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectedCell:");
   arg2 = caml_wrap_pointer(@selector(selectedCell ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectedCellInColumn:");
   arg2 = caml_wrap_pointer(@selector(selectedCellInColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectedCells:");
   arg2 = caml_wrap_pointer(@selector(selectedCells ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectRow:inColumn:");
   arg2 = caml_wrap_pointer(@selector(selectRow:inColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectedRowInColumn:");
   arg2 = caml_wrap_pointer(@selector(selectedRowInColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("reloadColumn:");
   arg2 = caml_wrap_pointer(@selector(reloadColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("validateVisibleColumns:");
   arg2 = caml_wrap_pointer(@selector(validateVisibleColumns ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scrollColumnsRightBy:");
   arg2 = caml_wrap_pointer(@selector(scrollColumnsRightBy:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scrollColumnsLeftBy:");
   arg2 = caml_wrap_pointer(@selector(scrollColumnsLeftBy:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scrollColumnToVisible:");
   arg2 = caml_wrap_pointer(@selector(scrollColumnToVisible:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setLastColumn:");
   arg2 = caml_wrap_pointer(@selector(setLastColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("lastColumn:");
   arg2 = caml_wrap_pointer(@selector(lastColumn ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addColumn:");
   arg2 = caml_wrap_pointer(@selector(addColumn ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberOfVisibleColumns:");
   arg2 = caml_wrap_pointer(@selector(numberOfVisibleColumns ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("firstVisibleColumn:");
   arg2 = caml_wrap_pointer(@selector(firstVisibleColumn ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("lastVisibleColumn:");
   arg2 = caml_wrap_pointer(@selector(lastVisibleColumn ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("columnOfMatrix:");
   arg2 = caml_wrap_pointer(@selector(columnOfMatrix:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("matrixInColumn:");
   arg2 = caml_wrap_pointer(@selector(matrixInColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("loadedCellAtRow:column:");
   arg2 = caml_wrap_pointer(@selector(loadedCellAtRow:column:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectAll:");
   arg2 = caml_wrap_pointer(@selector(selectAll:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tile:");
   arg2 = caml_wrap_pointer(@selector(tile ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("doClick:");
   arg2 = caml_wrap_pointer(@selector(doClick:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("doDoubleClick:");
   arg2 = caml_wrap_pointer(@selector(doDoubleClick:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sendAction:");
   arg2 = caml_wrap_pointer(@selector(sendAction ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("titleFrameOfColumn:");
   arg2 = caml_wrap_pointer(@selector(titleFrameOfColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawTitleOfColumn:inRect:");
   arg2 = caml_wrap_pointer(@selector(drawTitleOfColumn:inRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("titleHeight:");
   arg2 = caml_wrap_pointer(@selector(titleHeight ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("frameOfColumn:");
   arg2 = caml_wrap_pointer(@selector(frameOfColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("frameOfInsideOfColumn:");
   arg2 = caml_wrap_pointer(@selector(frameOfInsideOfColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("columnWidthForColumnContentWidth:");
   arg2 = caml_wrap_pointer(@selector(columnWidthForColumnContentWidth:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("columnContentWidthForColumnWidth:");
   arg2 = caml_wrap_pointer(@selector(columnContentWidthForColumnWidth:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setColumnResizingType:");
   arg2 = caml_wrap_pointer(@selector(setColumnResizingType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("columnResizingType:");
   arg2 = caml_wrap_pointer(@selector(columnResizingType ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPrefersAllColumnUserResizing:");
   arg2 = caml_wrap_pointer(@selector(setPrefersAllColumnUserResizing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("prefersAllColumnUserResizing:");
   arg2 = caml_wrap_pointer(@selector(prefersAllColumnUserResizing ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setWidth:ofColumn:");
   arg2 = caml_wrap_pointer(@selector(setWidth:ofColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("widthOfColumn:");
   arg2 = caml_wrap_pointer(@selector(widthOfColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setColumnsAutosaveName:");
   arg2 = caml_wrap_pointer(@selector(setColumnsAutosaveName:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("columnsAutosaveName:");
   arg2 = caml_wrap_pointer(@selector(columnsAutosaveName ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeSavedColumnsWithAutosaveName:");
   arg2 = caml_wrap_pointer(@selector(removeSavedColumnsWithAutosaveName:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("displayColumn:");
   arg2 = caml_wrap_pointer(@selector(displayColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("displayAllColumns:");
   arg2 = caml_wrap_pointer(@selector(displayAllColumns ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scrollViaScroller:");
   arg2 = caml_wrap_pointer(@selector(scrollViaScroller:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("updateScroller:");
   arg2 = caml_wrap_pointer(@selector(updateScroller ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSObject");
   arg2 = caml_wrap_id([NSObject class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("browser:numberOfRowsInColumn:");
   arg2 = caml_wrap_pointer(@selector(browser:numberOfRowsInColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("browser:createRowsForColumn:inMatrix:");
   arg2 = caml_wrap_pointer(@selector(browser:createRowsForColumn:inMatrix:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("browser:willDisplayCell:atRow:column:");
   arg2 = caml_wrap_pointer(@selector(browser:willDisplayCell:atRow:column:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("browser:titleOfColumn:");
   arg2 = caml_wrap_pointer(@selector(browser:titleOfColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("browser:selectCellWithString:inColumn:");
   arg2 = caml_wrap_pointer(@selector(browser:selectCellWithString:inColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("browser:selectRow:inColumn:");
   arg2 = caml_wrap_pointer(@selector(browser:selectRow:inColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("browser:isColumnValid:");
   arg2 = caml_wrap_pointer(@selector(browser:isColumnValid:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("browserWillScroll:");
   arg2 = caml_wrap_pointer(@selector(browserWillScroll:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("browserDidScroll:");
   arg2 = caml_wrap_pointer(@selector(browserDidScroll:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("browser:shouldSizeColumn:forUserResize:toWidth:");
   arg2 = caml_wrap_pointer(@selector(browser:shouldSizeColumn:forUserResize:toWidth:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("browser:sizeToFitWidthOfColumn:");
   arg2 = caml_wrap_pointer(@selector(browser:sizeToFitWidthOfColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("browserColumnConfigurationDidChange:");
   arg2 = caml_wrap_pointer(@selector(browserColumnConfigurationDidChange:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
