// THIS FILE IS GENERATED - ALL CHANGES WILL BE LOST AT THE NEXT BUILD
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSBezierPath.h>
value caml_init_NSBezierPath(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSBezierPath");
   arg2 = caml_wrap_id([NSBezierPath class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("bezierPath:");
   arg2 = caml_wrap_pointer(@selector(bezierPath ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("bezierPathWithRect:");
   arg2 = caml_wrap_pointer(@selector(bezierPathWithRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("bezierPathWithOvalInRect:");
   arg2 = caml_wrap_pointer(@selector(bezierPathWithOvalInRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fillRect:");
   arg2 = caml_wrap_pointer(@selector(fillRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("strokeRect:");
   arg2 = caml_wrap_pointer(@selector(strokeRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("clipRect:");
   arg2 = caml_wrap_pointer(@selector(clipRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("strokeLineFromPoint:toPoint:");
   arg2 = caml_wrap_pointer(@selector(strokeLineFromPoint:toPoint:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawPackedGlyphs:atPoint:");
   arg2 = caml_wrap_pointer(@selector(drawPackedGlyphs:atPoint:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDefaultMiterLimit:");
   arg2 = caml_wrap_pointer(@selector(setDefaultMiterLimit:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("defaultMiterLimit:");
   arg2 = caml_wrap_pointer(@selector(defaultMiterLimit ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDefaultFlatness:");
   arg2 = caml_wrap_pointer(@selector(setDefaultFlatness:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("defaultFlatness:");
   arg2 = caml_wrap_pointer(@selector(defaultFlatness ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDefaultWindingRule:");
   arg2 = caml_wrap_pointer(@selector(setDefaultWindingRule:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("defaultWindingRule:");
   arg2 = caml_wrap_pointer(@selector(defaultWindingRule ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDefaultLineCapStyle:");
   arg2 = caml_wrap_pointer(@selector(setDefaultLineCapStyle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("defaultLineCapStyle:");
   arg2 = caml_wrap_pointer(@selector(defaultLineCapStyle ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDefaultLineJoinStyle:");
   arg2 = caml_wrap_pointer(@selector(setDefaultLineJoinStyle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("defaultLineJoinStyle:");
   arg2 = caml_wrap_pointer(@selector(defaultLineJoinStyle ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDefaultLineWidth:");
   arg2 = caml_wrap_pointer(@selector(setDefaultLineWidth:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("defaultLineWidth:");
   arg2 = caml_wrap_pointer(@selector(defaultLineWidth ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("moveToPoint:");
   arg2 = caml_wrap_pointer(@selector(moveToPoint:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("lineToPoint:");
   arg2 = caml_wrap_pointer(@selector(lineToPoint:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("curveToPoint:controlPoint1:controlPoint2:");
   arg2 = caml_wrap_pointer(@selector(curveToPoint:controlPoint1:controlPoint2:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("closePath:");
   arg2 = caml_wrap_pointer(@selector(closePath ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeAllPoints:");
   arg2 = caml_wrap_pointer(@selector(removeAllPoints ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("relativeMoveToPoint:");
   arg2 = caml_wrap_pointer(@selector(relativeMoveToPoint:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("relativeLineToPoint:");
   arg2 = caml_wrap_pointer(@selector(relativeLineToPoint:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("relativeCurveToPoint:controlPoint1:controlPoint2:");
   arg2 = caml_wrap_pointer(@selector(relativeCurveToPoint:controlPoint1:controlPoint2:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("lineWidth:");
   arg2 = caml_wrap_pointer(@selector(lineWidth ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setLineWidth:");
   arg2 = caml_wrap_pointer(@selector(setLineWidth:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("lineCapStyle:");
   arg2 = caml_wrap_pointer(@selector(lineCapStyle ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setLineCapStyle:");
   arg2 = caml_wrap_pointer(@selector(setLineCapStyle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("lineJoinStyle:");
   arg2 = caml_wrap_pointer(@selector(lineJoinStyle ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setLineJoinStyle:");
   arg2 = caml_wrap_pointer(@selector(setLineJoinStyle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("windingRule:");
   arg2 = caml_wrap_pointer(@selector(windingRule ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setWindingRule:");
   arg2 = caml_wrap_pointer(@selector(setWindingRule:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("miterLimit:");
   arg2 = caml_wrap_pointer(@selector(miterLimit ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMiterLimit:");
   arg2 = caml_wrap_pointer(@selector(setMiterLimit:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("flatness:");
   arg2 = caml_wrap_pointer(@selector(flatness ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFlatness:");
   arg2 = caml_wrap_pointer(@selector(setFlatness:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getLineDash:count:phase:");
   arg2 = caml_wrap_pointer(@selector(getLineDash:count:phase:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setLineDash:count:phase:");
   arg2 = caml_wrap_pointer(@selector(setLineDash:count:phase:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stroke:");
   arg2 = caml_wrap_pointer(@selector(stroke ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fill:");
   arg2 = caml_wrap_pointer(@selector(fill ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addClip:");
   arg2 = caml_wrap_pointer(@selector(addClip ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setClip:");
   arg2 = caml_wrap_pointer(@selector(setClip ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("bezierPathByFlatteningPath:");
   arg2 = caml_wrap_pointer(@selector(bezierPathByFlatteningPath ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("bezierPathByReversingPath:");
   arg2 = caml_wrap_pointer(@selector(bezierPathByReversingPath ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("transformUsingAffineTransform:");
   arg2 = caml_wrap_pointer(@selector(transformUsingAffineTransform:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isEmpty:");
   arg2 = caml_wrap_pointer(@selector(isEmpty ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("currentPoint:");
   arg2 = caml_wrap_pointer(@selector(currentPoint ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("controlPointBounds:");
   arg2 = caml_wrap_pointer(@selector(controlPointBounds ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("bounds:");
   arg2 = caml_wrap_pointer(@selector(bounds ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("elementCount:");
   arg2 = caml_wrap_pointer(@selector(elementCount ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("elementAtIndex:associatedPoints:");
   arg2 = caml_wrap_pointer(@selector(elementAtIndex:associatedPoints:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("elementAtIndex:");
   arg2 = caml_wrap_pointer(@selector(elementAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAssociatedPoints:atIndex:");
   arg2 = caml_wrap_pointer(@selector(setAssociatedPoints:atIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("appendBezierPath:");
   arg2 = caml_wrap_pointer(@selector(appendBezierPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("appendBezierPathWithRect:");
   arg2 = caml_wrap_pointer(@selector(appendBezierPathWithRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("appendBezierPathWithPoints:count:");
   arg2 = caml_wrap_pointer(@selector(appendBezierPathWithPoints:count:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("appendBezierPathWithOvalInRect:");
   arg2 = caml_wrap_pointer(@selector(appendBezierPathWithOvalInRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:");
   arg2 = caml_wrap_pointer(@selector(appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:");
   arg2 = caml_wrap_pointer(@selector(appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("appendBezierPathWithArcFromPoint:toPoint:radius:");
   arg2 = caml_wrap_pointer(@selector(appendBezierPathWithArcFromPoint:toPoint:radius:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("appendBezierPathWithGlyph:inFont:");
   arg2 = caml_wrap_pointer(@selector(appendBezierPathWithGlyph:inFont:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("appendBezierPathWithGlyphs:count:inFont:");
   arg2 = caml_wrap_pointer(@selector(appendBezierPathWithGlyphs:count:inFont:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("appendBezierPathWithPackedGlyphs:");
   arg2 = caml_wrap_pointer(@selector(appendBezierPathWithPackedGlyphs:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("containsPoint:");
   arg2 = caml_wrap_pointer(@selector(containsPoint:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("cachesBezierPath:");
   arg2 = caml_wrap_pointer(@selector(cachesBezierPath ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setCachesBezierPath:");
   arg2 = caml_wrap_pointer(@selector(setCachesBezierPath:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
