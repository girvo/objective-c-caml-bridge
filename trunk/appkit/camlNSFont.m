#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSFont.h>
value caml_init_NSFont(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSFont");
   arg2 = caml_wrap_id([NSFont class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("useFont:");
   arg2 = caml_wrap_pointer(@selector(useFont:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("widthOfString:");
   arg2 = caml_wrap_pointer(@selector(widthOfString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isBaseFont:");
   arg2 = caml_wrap_pointer(@selector(isBaseFont ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("afmDictionary:");
   arg2 = caml_wrap_pointer(@selector(afmDictionary ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("glyphIsEncoded:");
   arg2 = caml_wrap_pointer(@selector(glyphIsEncoded:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("defaultLineHeightForFont:");
   arg2 = caml_wrap_pointer(@selector(defaultLineHeightForFont ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("preferredFontNames:");
   arg2 = caml_wrap_pointer(@selector(preferredFontNames ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPreferredFontNames:");
   arg2 = caml_wrap_pointer(@selector(setPreferredFontNames:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("encodingScheme:");
   arg2 = caml_wrap_pointer(@selector(encodingScheme ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("glyphPacking:");
   arg2 = caml_wrap_pointer(@selector(glyphPacking ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("positionOfGlyph:precededByGlyph:isNominal:");
   arg2 = caml_wrap_pointer(@selector(positionOfGlyph:precededByGlyph:isNominal:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("positionsForCompositeSequence:numberOfGlyphs:pointArray:");
   arg2 = caml_wrap_pointer(@selector(positionsForCompositeSequence:numberOfGlyphs:pointArray:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("positionOfGlyph:struckOverGlyph:metricsExist:");
   arg2 = caml_wrap_pointer(@selector(positionOfGlyph:struckOverGlyph:metricsExist:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("positionOfGlyph:struckOverRect:metricsExist:");
   arg2 = caml_wrap_pointer(@selector(positionOfGlyph:struckOverRect:metricsExist:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("positionOfGlyph:forCharacter:struckOverRect:");
   arg2 = caml_wrap_pointer(@selector(positionOfGlyph:forCharacter:struckOverRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("positionOfGlyph:withRelation:toBaseGlyph:totalAdvancement:metricsExist:");
   arg2 = caml_wrap_pointer(@selector(positionOfGlyph:withRelation:toBaseGlyph:totalAdvancement:metricsExist:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fontWithName:size:");
   arg2 = caml_wrap_pointer(@selector(fontWithName:size:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fontWithName:matrix:");
   arg2 = caml_wrap_pointer(@selector(fontWithName:matrix:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fontWithDescriptor:size:");
   arg2 = caml_wrap_pointer(@selector(fontWithDescriptor:size:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fontWithDescriptor:textTransform:");
   arg2 = caml_wrap_pointer(@selector(fontWithDescriptor:textTransform:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("userFontOfSize:");
   arg2 = caml_wrap_pointer(@selector(userFontOfSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("userFixedPitchFontOfSize:");
   arg2 = caml_wrap_pointer(@selector(userFixedPitchFontOfSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setUserFont:");
   arg2 = caml_wrap_pointer(@selector(setUserFont:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setUserFixedPitchFont:");
   arg2 = caml_wrap_pointer(@selector(setUserFixedPitchFont:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("systemFontOfSize:");
   arg2 = caml_wrap_pointer(@selector(systemFontOfSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("boldSystemFontOfSize:");
   arg2 = caml_wrap_pointer(@selector(boldSystemFontOfSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("labelFontOfSize:");
   arg2 = caml_wrap_pointer(@selector(labelFontOfSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("titleBarFontOfSize:");
   arg2 = caml_wrap_pointer(@selector(titleBarFontOfSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("menuFontOfSize:");
   arg2 = caml_wrap_pointer(@selector(menuFontOfSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("menuBarFontOfSize:");
   arg2 = caml_wrap_pointer(@selector(menuBarFontOfSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("messageFontOfSize:");
   arg2 = caml_wrap_pointer(@selector(messageFontOfSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("paletteFontOfSize:");
   arg2 = caml_wrap_pointer(@selector(paletteFontOfSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("toolTipsFontOfSize:");
   arg2 = caml_wrap_pointer(@selector(toolTipsFontOfSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("controlContentFontOfSize:");
   arg2 = caml_wrap_pointer(@selector(controlContentFontOfSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("systemFontSize:");
   arg2 = caml_wrap_pointer(@selector(systemFontSize ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("smallSystemFontSize:");
   arg2 = caml_wrap_pointer(@selector(smallSystemFontSize ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("labelFontSize:");
   arg2 = caml_wrap_pointer(@selector(labelFontSize ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("systemFontSizeForControlSize:");
   arg2 = caml_wrap_pointer(@selector(systemFontSizeForControlSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fontName:");
   arg2 = caml_wrap_pointer(@selector(fontName ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("pointSize:");
   arg2 = caml_wrap_pointer(@selector(pointSize ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("matrix:");
   arg2 = caml_wrap_pointer(@selector(matrix ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("familyName:");
   arg2 = caml_wrap_pointer(@selector(familyName ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("displayName:");
   arg2 = caml_wrap_pointer(@selector(displayName ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fontDescriptor:");
   arg2 = caml_wrap_pointer(@selector(fontDescriptor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textTransform:");
   arg2 = caml_wrap_pointer(@selector(textTransform ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberOfGlyphs:");
   arg2 = caml_wrap_pointer(@selector(numberOfGlyphs ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("mostCompatibleStringEncoding:");
   arg2 = caml_wrap_pointer(@selector(mostCompatibleStringEncoding ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("glyphWithName:");
   arg2 = caml_wrap_pointer(@selector(glyphWithName:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("coveredCharacterSet:");
   arg2 = caml_wrap_pointer(@selector(coveredCharacterSet ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("boundingRectForFont:");
   arg2 = caml_wrap_pointer(@selector(boundingRectForFont ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("maximumAdvancement:");
   arg2 = caml_wrap_pointer(@selector(maximumAdvancement ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("ascender:");
   arg2 = caml_wrap_pointer(@selector(ascender ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("descender:");
   arg2 = caml_wrap_pointer(@selector(descender ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("leading:");
   arg2 = caml_wrap_pointer(@selector(leading ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("underlinePosition:");
   arg2 = caml_wrap_pointer(@selector(underlinePosition ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("underlineThickness:");
   arg2 = caml_wrap_pointer(@selector(underlineThickness ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("italicAngle:");
   arg2 = caml_wrap_pointer(@selector(italicAngle ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("capHeight:");
   arg2 = caml_wrap_pointer(@selector(capHeight ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("xHeight:");
   arg2 = caml_wrap_pointer(@selector(xHeight ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isFixedPitch:");
   arg2 = caml_wrap_pointer(@selector(isFixedPitch ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("boundingRectForGlyph:");
   arg2 = caml_wrap_pointer(@selector(boundingRectForGlyph:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("advancementForGlyph:");
   arg2 = caml_wrap_pointer(@selector(advancementForGlyph:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getBoundingRects:forGlyphs:count:");
   arg2 = caml_wrap_pointer(@selector(getBoundingRects:forGlyphs:count:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getAdvancements:forGlyphs:count:");
   arg2 = caml_wrap_pointer(@selector(getAdvancements:forGlyphs:count:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getAdvancements:forPackedGlyphs:length:");
   arg2 = caml_wrap_pointer(@selector(getAdvancements:forPackedGlyphs:length:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("set:");
   arg2 = caml_wrap_pointer(@selector(set ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setInContext:");
   arg2 = caml_wrap_pointer(@selector(setInContext:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("printerFont:");
   arg2 = caml_wrap_pointer(@selector(printerFont ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("screenFont:");
   arg2 = caml_wrap_pointer(@selector(screenFont ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("screenFontWithRenderingMode:");
   arg2 = caml_wrap_pointer(@selector(screenFontWithRenderingMode:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("renderingMode:");
   arg2 = caml_wrap_pointer(@selector(renderingMode ));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
