// THIS FILE IS GENERATED - ALL CHANGES WILL BE LOST AT THE NEXT BUILD
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSDocument.h>
value caml_init_NSDocument(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSDocument");
   arg2 = caml_wrap_id([NSDocument class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("dataRepresentationOfType:");
   arg2 = caml_wrap_pointer(@selector(dataRepresentationOfType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileAttributesToWriteToFile:ofType:saveOperation:");
   arg2 = caml_wrap_pointer(@selector(fileAttributesToWriteToFile:ofType:saveOperation:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileName:");
   arg2 = caml_wrap_pointer(@selector(fileName ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileWrapperRepresentationOfType:");
   arg2 = caml_wrap_pointer(@selector(fileWrapperRepresentationOfType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithContentsOfFile:ofType:");
   arg2 = caml_wrap_pointer(@selector(initWithContentsOfFile:ofType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithContentsOfURL:ofType:");
   arg2 = caml_wrap_pointer(@selector(initWithContentsOfURL:ofType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("loadDataRepresentation:ofType:");
   arg2 = caml_wrap_pointer(@selector(loadDataRepresentation:ofType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("loadFileWrapperRepresentation:ofType:");
   arg2 = caml_wrap_pointer(@selector(loadFileWrapperRepresentation:ofType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("printShowingPrintPanel:");
   arg2 = caml_wrap_pointer(@selector(printShowingPrintPanel:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("readFromFile:ofType:");
   arg2 = caml_wrap_pointer(@selector(readFromFile:ofType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("readFromURL:ofType:");
   arg2 = caml_wrap_pointer(@selector(readFromURL:ofType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("revertToSavedFromFile:ofType:");
   arg2 = caml_wrap_pointer(@selector(revertToSavedFromFile:ofType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("revertToSavedFromURL:ofType:");
   arg2 = caml_wrap_pointer(@selector(revertToSavedFromURL:ofType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("runModalPageLayoutWithPrintInfo:");
   arg2 = caml_wrap_pointer(@selector(runModalPageLayoutWithPrintInfo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("saveToFile:saveOperation:delegate:didSaveSelector:contextInfo:");
   arg2 = caml_wrap_pointer(@selector(saveToFile:saveOperation:delegate:didSaveSelector:contextInfo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFileName:");
   arg2 = caml_wrap_pointer(@selector(setFileName:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("writeToFile:ofType:");
   arg2 = caml_wrap_pointer(@selector(writeToFile:ofType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("writeToFile:ofType:originalFile:saveOperation:");
   arg2 = caml_wrap_pointer(@selector(writeToFile:ofType:originalFile:saveOperation:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("writeToURL:ofType:");
   arg2 = caml_wrap_pointer(@selector(writeToURL:ofType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("writeWithBackupToFile:ofType:saveOperation:");
   arg2 = caml_wrap_pointer(@selector(writeWithBackupToFile:ofType:saveOperation:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("init:");
   arg2 = caml_wrap_pointer(@selector(init ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithType:error:");
   arg2 = caml_wrap_pointer(@selector(initWithType:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithContentsOfURL:ofType:error:");
   arg2 = caml_wrap_pointer(@selector(initWithContentsOfURL:ofType:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initForURL:withContentsOfURL:ofType:error:");
   arg2 = caml_wrap_pointer(@selector(initForURL:withContentsOfURL:ofType:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFileType:");
   arg2 = caml_wrap_pointer(@selector(setFileType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileType:");
   arg2 = caml_wrap_pointer(@selector(fileType ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFileURL:");
   arg2 = caml_wrap_pointer(@selector(setFileURL:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileURL:");
   arg2 = caml_wrap_pointer(@selector(fileURL ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFileModificationDate:");
   arg2 = caml_wrap_pointer(@selector(setFileModificationDate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileModificationDate:");
   arg2 = caml_wrap_pointer(@selector(fileModificationDate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("revertDocumentToSaved:");
   arg2 = caml_wrap_pointer(@selector(revertDocumentToSaved:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("revertToContentsOfURL:ofType:error:");
   arg2 = caml_wrap_pointer(@selector(revertToContentsOfURL:ofType:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("readFromURL:ofType:error:");
   arg2 = caml_wrap_pointer(@selector(readFromURL:ofType:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("readFromFileWrapper:ofType:error:");
   arg2 = caml_wrap_pointer(@selector(readFromFileWrapper:ofType:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("readFromData:ofType:error:");
   arg2 = caml_wrap_pointer(@selector(readFromData:ofType:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("writeToURL:ofType:error:");
   arg2 = caml_wrap_pointer(@selector(writeToURL:ofType:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileWrapperOfType:error:");
   arg2 = caml_wrap_pointer(@selector(fileWrapperOfType:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dataOfType:error:");
   arg2 = caml_wrap_pointer(@selector(dataOfType:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("writeSafelyToURL:ofType:forSaveOperation:error:");
   arg2 = caml_wrap_pointer(@selector(writeSafelyToURL:ofType:forSaveOperation:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("writeToURL:ofType:forSaveOperation:originalContentsURL:error:");
   arg2 = caml_wrap_pointer(@selector(writeToURL:ofType:forSaveOperation:originalContentsURL:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileAttributesToWriteToURL:ofType:forSaveOperation:originalContentsURL:error:");
   arg2 = caml_wrap_pointer(@selector(fileAttributesToWriteToURL:ofType:forSaveOperation:originalContentsURL:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("keepBackupFile:");
   arg2 = caml_wrap_pointer(@selector(keepBackupFile ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("saveDocument:");
   arg2 = caml_wrap_pointer(@selector(saveDocument:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("saveDocumentAs:");
   arg2 = caml_wrap_pointer(@selector(saveDocumentAs:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("saveDocumentTo:");
   arg2 = caml_wrap_pointer(@selector(saveDocumentTo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("saveDocumentWithDelegate:didSaveSelector:contextInfo:");
   arg2 = caml_wrap_pointer(@selector(saveDocumentWithDelegate:didSaveSelector:contextInfo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("runModalSavePanelForSaveOperation:delegate:didSaveSelector:contextInfo:");
   arg2 = caml_wrap_pointer(@selector(runModalSavePanelForSaveOperation:delegate:didSaveSelector:contextInfo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("shouldRunSavePanelWithAccessoryView:");
   arg2 = caml_wrap_pointer(@selector(shouldRunSavePanelWithAccessoryView ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("prepareSavePanel:");
   arg2 = caml_wrap_pointer(@selector(prepareSavePanel:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileNameExtensionWasHiddenInLastRunSavePanel:");
   arg2 = caml_wrap_pointer(@selector(fileNameExtensionWasHiddenInLastRunSavePanel ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileTypeFromLastRunSavePanel:");
   arg2 = caml_wrap_pointer(@selector(fileTypeFromLastRunSavePanel ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("saveToURL:ofType:forSaveOperation:delegate:didSaveSelector:contextInfo:");
   arg2 = caml_wrap_pointer(@selector(saveToURL:ofType:forSaveOperation:delegate:didSaveSelector:contextInfo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("saveToURL:ofType:forSaveOperation:error:");
   arg2 = caml_wrap_pointer(@selector(saveToURL:ofType:forSaveOperation:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("hasUnautosavedChanges:");
   arg2 = caml_wrap_pointer(@selector(hasUnautosavedChanges ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("autosaveDocumentWithDelegate:didAutosaveSelector:contextInfo:");
   arg2 = caml_wrap_pointer(@selector(autosaveDocumentWithDelegate:didAutosaveSelector:contextInfo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("autosavingFileType:");
   arg2 = caml_wrap_pointer(@selector(autosavingFileType ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAutosavedContentsFileURL:");
   arg2 = caml_wrap_pointer(@selector(setAutosavedContentsFileURL:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("autosavedContentsFileURL:");
   arg2 = caml_wrap_pointer(@selector(autosavedContentsFileURL ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("canCloseDocumentWithDelegate:shouldCloseSelector:contextInfo:");
   arg2 = caml_wrap_pointer(@selector(canCloseDocumentWithDelegate:shouldCloseSelector:contextInfo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("close:");
   arg2 = caml_wrap_pointer(@selector(close ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("runPageLayout:");
   arg2 = caml_wrap_pointer(@selector(runPageLayout:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("runModalPageLayoutWithPrintInfo:delegate:didRunSelector:contextInfo:");
   arg2 = caml_wrap_pointer(@selector(runModalPageLayoutWithPrintInfo:delegate:didRunSelector:contextInfo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("preparePageLayout:");
   arg2 = caml_wrap_pointer(@selector(preparePageLayout:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("shouldChangePrintInfo:");
   arg2 = caml_wrap_pointer(@selector(shouldChangePrintInfo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPrintInfo:");
   arg2 = caml_wrap_pointer(@selector(setPrintInfo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("printInfo:");
   arg2 = caml_wrap_pointer(@selector(printInfo ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("printDocument:");
   arg2 = caml_wrap_pointer(@selector(printDocument:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("printDocumentWithSettings:showPrintPanel:delegate:didPrintSelector:contextInfo:");
   arg2 = caml_wrap_pointer(@selector(printDocumentWithSettings:showPrintPanel:delegate:didPrintSelector:contextInfo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("printOperationWithSettings:error:");
   arg2 = caml_wrap_pointer(@selector(printOperationWithSettings:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("runModalPrintOperation:delegate:didRunSelector:contextInfo:");
   arg2 = caml_wrap_pointer(@selector(runModalPrintOperation:delegate:didRunSelector:contextInfo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isDocumentEdited:");
   arg2 = caml_wrap_pointer(@selector(isDocumentEdited ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("updateChangeCount:");
   arg2 = caml_wrap_pointer(@selector(updateChangeCount:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("undoManager:");
   arg2 = caml_wrap_pointer(@selector(undoManager ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setUndoManager:");
   arg2 = caml_wrap_pointer(@selector(setUndoManager:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("hasUndoManager:");
   arg2 = caml_wrap_pointer(@selector(hasUndoManager ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setHasUndoManager:");
   arg2 = caml_wrap_pointer(@selector(setHasUndoManager:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("presentError:modalForWindow:delegate:didPresentSelector:contextInfo:");
   arg2 = caml_wrap_pointer(@selector(presentError:modalForWindow:delegate:didPresentSelector:contextInfo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("presentError:");
   arg2 = caml_wrap_pointer(@selector(presentError:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("willPresentError:");
   arg2 = caml_wrap_pointer(@selector(willPresentError:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("windowControllers:");
   arg2 = caml_wrap_pointer(@selector(windowControllers ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addWindowController:");
   arg2 = caml_wrap_pointer(@selector(addWindowController:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeWindowController:");
   arg2 = caml_wrap_pointer(@selector(removeWindowController:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("windowNibName:");
   arg2 = caml_wrap_pointer(@selector(windowNibName ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("makeWindowControllers:");
   arg2 = caml_wrap_pointer(@selector(makeWindowControllers ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("showWindows:");
   arg2 = caml_wrap_pointer(@selector(showWindows ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("shouldCloseWindowController:delegate:shouldCloseSelector:contextInfo:");
   arg2 = caml_wrap_pointer(@selector(shouldCloseWindowController:delegate:shouldCloseSelector:contextInfo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setWindow:");
   arg2 = caml_wrap_pointer(@selector(setWindow:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("windowControllerWillLoadNib:");
   arg2 = caml_wrap_pointer(@selector(windowControllerWillLoadNib:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("windowControllerDidLoadNib:");
   arg2 = caml_wrap_pointer(@selector(windowControllerDidLoadNib:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("displayName:");
   arg2 = caml_wrap_pointer(@selector(displayName ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("windowForSheet:");
   arg2 = caml_wrap_pointer(@selector(windowForSheet ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("readableTypes:");
   arg2 = caml_wrap_pointer(@selector(readableTypes ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("writableTypes:");
   arg2 = caml_wrap_pointer(@selector(writableTypes ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isNativeType:");
   arg2 = caml_wrap_pointer(@selector(isNativeType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("writableTypesForSaveOperation:");
   arg2 = caml_wrap_pointer(@selector(writableTypesForSaveOperation:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("validateUserInterfaceItem:");
   arg2 = caml_wrap_pointer(@selector(validateUserInterfaceItem:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
