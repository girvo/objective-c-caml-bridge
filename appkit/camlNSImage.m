#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSImage.h>
value caml_init_NSImage(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSImage");
   arg2 = caml_wrap_id([NSImage class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("initWithIconHandle:");
   arg2 = caml_wrap_pointer(@selector(initWithIconHandle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithBitmapHandle:");
   arg2 = caml_wrap_pointer(@selector(initWithBitmapHandle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("imageNamed:");
   arg2 = caml_wrap_pointer(@selector(imageNamed:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithSize:");
   arg2 = caml_wrap_pointer(@selector(initWithSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithData:");
   arg2 = caml_wrap_pointer(@selector(initWithData:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithContentsOfFile:");
   arg2 = caml_wrap_pointer(@selector(initWithContentsOfFile:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithContentsOfURL:");
   arg2 = caml_wrap_pointer(@selector(initWithContentsOfURL:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initByReferencingFile:");
   arg2 = caml_wrap_pointer(@selector(initByReferencingFile:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initByReferencingURL:");
   arg2 = caml_wrap_pointer(@selector(initByReferencingURL:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithPasteboard:");
   arg2 = caml_wrap_pointer(@selector(initWithPasteboard:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setSize:");
   arg2 = caml_wrap_pointer(@selector(setSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("size:");
   arg2 = caml_wrap_pointer(@selector(size ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setName:");
   arg2 = caml_wrap_pointer(@selector(setName:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("name:");
   arg2 = caml_wrap_pointer(@selector(name ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setScalesWhenResized:");
   arg2 = caml_wrap_pointer(@selector(setScalesWhenResized:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scalesWhenResized:");
   arg2 = caml_wrap_pointer(@selector(scalesWhenResized ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDataRetained:");
   arg2 = caml_wrap_pointer(@selector(setDataRetained:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isDataRetained:");
   arg2 = caml_wrap_pointer(@selector(isDataRetained ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setCachedSeparately:");
   arg2 = caml_wrap_pointer(@selector(setCachedSeparately:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isCachedSeparately:");
   arg2 = caml_wrap_pointer(@selector(isCachedSeparately ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setCacheDepthMatchesImageDepth:");
   arg2 = caml_wrap_pointer(@selector(setCacheDepthMatchesImageDepth:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("cacheDepthMatchesImageDepth:");
   arg2 = caml_wrap_pointer(@selector(cacheDepthMatchesImageDepth ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setBackgroundColor:");
   arg2 = caml_wrap_pointer(@selector(setBackgroundColor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("backgroundColor:");
   arg2 = caml_wrap_pointer(@selector(backgroundColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setUsesEPSOnResolutionMismatch:");
   arg2 = caml_wrap_pointer(@selector(setUsesEPSOnResolutionMismatch:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("usesEPSOnResolutionMismatch:");
   arg2 = caml_wrap_pointer(@selector(usesEPSOnResolutionMismatch ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPrefersColorMatch:");
   arg2 = caml_wrap_pointer(@selector(setPrefersColorMatch:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("prefersColorMatch:");
   arg2 = caml_wrap_pointer(@selector(prefersColorMatch ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMatchesOnMultipleResolution:");
   arg2 = caml_wrap_pointer(@selector(setMatchesOnMultipleResolution:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("matchesOnMultipleResolution:");
   arg2 = caml_wrap_pointer(@selector(matchesOnMultipleResolution ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dissolveToPoint:fraction:");
   arg2 = caml_wrap_pointer(@selector(dissolveToPoint:fraction:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dissolveToPoint:fromRect:fraction:");
   arg2 = caml_wrap_pointer(@selector(dissolveToPoint:fromRect:fraction:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("compositeToPoint:operation:");
   arg2 = caml_wrap_pointer(@selector(compositeToPoint:operation:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("compositeToPoint:fromRect:operation:");
   arg2 = caml_wrap_pointer(@selector(compositeToPoint:fromRect:operation:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("compositeToPoint:operation:fraction:");
   arg2 = caml_wrap_pointer(@selector(compositeToPoint:operation:fraction:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("compositeToPoint:fromRect:operation:fraction:");
   arg2 = caml_wrap_pointer(@selector(compositeToPoint:fromRect:operation:fraction:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawAtPoint:fromRect:operation:fraction:");
   arg2 = caml_wrap_pointer(@selector(drawAtPoint:fromRect:operation:fraction:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawInRect:fromRect:operation:fraction:");
   arg2 = caml_wrap_pointer(@selector(drawInRect:fromRect:operation:fraction:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawRepresentation:inRect:");
   arg2 = caml_wrap_pointer(@selector(drawRepresentation:inRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("recache:");
   arg2 = caml_wrap_pointer(@selector(recache ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_TIFFRepresentation:");
   arg2 = caml_wrap_pointer(@selector(l_TIFFRepresentation ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_TIFFRepresentationUsingCompression:factor:");
   arg2 = caml_wrap_pointer(@selector(l_TIFFRepresentationUsingCompression:factor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("representations:");
   arg2 = caml_wrap_pointer(@selector(representations ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addRepresentations:");
   arg2 = caml_wrap_pointer(@selector(addRepresentations:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addRepresentation:");
   arg2 = caml_wrap_pointer(@selector(addRepresentation:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeRepresentation:");
   arg2 = caml_wrap_pointer(@selector(removeRepresentation:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isValid:");
   arg2 = caml_wrap_pointer(@selector(isValid ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("lockFocus:");
   arg2 = caml_wrap_pointer(@selector(lockFocus ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("lockFocusOnRepresentation:");
   arg2 = caml_wrap_pointer(@selector(lockFocusOnRepresentation:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("unlockFocus:");
   arg2 = caml_wrap_pointer(@selector(unlockFocus ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("bestRepresentationForDevice:");
   arg2 = caml_wrap_pointer(@selector(bestRepresentationForDevice:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDelegate:");
   arg2 = caml_wrap_pointer(@selector(setDelegate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("delegate:");
   arg2 = caml_wrap_pointer(@selector(delegate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("imageUnfilteredFileTypes:");
   arg2 = caml_wrap_pointer(@selector(imageUnfilteredFileTypes ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("imageUnfilteredPasteboardTypes:");
   arg2 = caml_wrap_pointer(@selector(imageUnfilteredPasteboardTypes ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("imageFileTypes:");
   arg2 = caml_wrap_pointer(@selector(imageFileTypes ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("imagePasteboardTypes:");
   arg2 = caml_wrap_pointer(@selector(imagePasteboardTypes ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("canInitWithPasteboard:");
   arg2 = caml_wrap_pointer(@selector(canInitWithPasteboard:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFlipped:");
   arg2 = caml_wrap_pointer(@selector(setFlipped:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isFlipped:");
   arg2 = caml_wrap_pointer(@selector(isFlipped ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("cancelIncrementalLoad:");
   arg2 = caml_wrap_pointer(@selector(cancelIncrementalLoad ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setCacheMode:");
   arg2 = caml_wrap_pointer(@selector(setCacheMode:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("cacheMode:");
   arg2 = caml_wrap_pointer(@selector(cacheMode ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSObject");
   arg2 = caml_wrap_id([NSObject class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("imageDidNotDraw:inRect:");
   arg2 = caml_wrap_pointer(@selector(imageDidNotDraw:inRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("image:willLoadRepresentation:");
   arg2 = caml_wrap_pointer(@selector(image:willLoadRepresentation:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("image:didLoadRepresentationHeader:");
   arg2 = caml_wrap_pointer(@selector(image:didLoadRepresentationHeader:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("image:didLoadPartOfRepresentation:withValidRows:");
   arg2 = caml_wrap_pointer(@selector(image:didLoadPartOfRepresentation:withValidRows:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("image:didLoadRepresentation:withStatus:");
   arg2 = caml_wrap_pointer(@selector(image:didLoadRepresentation:withStatus:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSBundle");
   arg2 = caml_wrap_id([NSBundle class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("pathForImageResource:");
   arg2 = caml_wrap_pointer(@selector(pathForImageResource:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
