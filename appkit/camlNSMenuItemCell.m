#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSMenuItemCell.h>
value caml_init_NSMenuItemCell(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSMenuItemCell");
   arg2 = caml_wrap_id([NSMenuItemCell class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("setMenuItem:");
   arg2 = caml_wrap_pointer(@selector(setMenuItem:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("menuItem:");
   arg2 = caml_wrap_pointer(@selector(menuItem ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMenuView:");
   arg2 = caml_wrap_pointer(@selector(setMenuView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("menuView:");
   arg2 = caml_wrap_pointer(@selector(menuView ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setHighlighted:");
   arg2 = caml_wrap_pointer(@selector(setHighlighted:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isHighlighted:");
   arg2 = caml_wrap_pointer(@selector(isHighlighted ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setNeedsSizing:");
   arg2 = caml_wrap_pointer(@selector(setNeedsSizing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("needsSizing:");
   arg2 = caml_wrap_pointer(@selector(needsSizing ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("calcSize:");
   arg2 = caml_wrap_pointer(@selector(calcSize ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setNeedsDisplay:");
   arg2 = caml_wrap_pointer(@selector(setNeedsDisplay:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("needsDisplay:");
   arg2 = caml_wrap_pointer(@selector(needsDisplay ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stateImageWidth:");
   arg2 = caml_wrap_pointer(@selector(stateImageWidth ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("imageWidth:");
   arg2 = caml_wrap_pointer(@selector(imageWidth ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("titleWidth:");
   arg2 = caml_wrap_pointer(@selector(titleWidth ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("keyEquivalentWidth:");
   arg2 = caml_wrap_pointer(@selector(keyEquivalentWidth ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stateImageRectForBounds:");
   arg2 = caml_wrap_pointer(@selector(stateImageRectForBounds:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("imageRectForBounds:");
   arg2 = caml_wrap_pointer(@selector(imageRectForBounds:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("titleRectForBounds:");
   arg2 = caml_wrap_pointer(@selector(titleRectForBounds:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("keyEquivalentRectForBounds:");
   arg2 = caml_wrap_pointer(@selector(keyEquivalentRectForBounds:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawSeparatorItemWithFrame:inView:");
   arg2 = caml_wrap_pointer(@selector(drawSeparatorItemWithFrame:inView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawStateImageWithFrame:inView:");
   arg2 = caml_wrap_pointer(@selector(drawStateImageWithFrame:inView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawImageWithFrame:inView:");
   arg2 = caml_wrap_pointer(@selector(drawImageWithFrame:inView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawTitleWithFrame:inView:");
   arg2 = caml_wrap_pointer(@selector(drawTitleWithFrame:inView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawKeyEquivalentWithFrame:inView:");
   arg2 = caml_wrap_pointer(@selector(drawKeyEquivalentWithFrame:inView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawBorderAndBackgroundWithFrame:inView:");
   arg2 = caml_wrap_pointer(@selector(drawBorderAndBackgroundWithFrame:inView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tag:");
   arg2 = caml_wrap_pointer(@selector(tag ));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
