// THIS FILE IS GENERATED - ALL CHANGES WILL BE LOST AT THE NEXT BUILD
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSComboBoxCell.h>
value caml_init_NSComboBoxCell(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSComboBoxCell");
   arg2 = caml_wrap_id([NSComboBoxCell class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("hasVerticalScroller:");
   arg2 = caml_wrap_pointer(@selector(hasVerticalScroller ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setHasVerticalScroller:");
   arg2 = caml_wrap_pointer(@selector(setHasVerticalScroller:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("intercellSpacing:");
   arg2 = caml_wrap_pointer(@selector(intercellSpacing ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setIntercellSpacing:");
   arg2 = caml_wrap_pointer(@selector(setIntercellSpacing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("itemHeight:");
   arg2 = caml_wrap_pointer(@selector(itemHeight ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setItemHeight:");
   arg2 = caml_wrap_pointer(@selector(setItemHeight:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberOfVisibleItems:");
   arg2 = caml_wrap_pointer(@selector(numberOfVisibleItems ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setNumberOfVisibleItems:");
   arg2 = caml_wrap_pointer(@selector(setNumberOfVisibleItems:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setButtonBordered:");
   arg2 = caml_wrap_pointer(@selector(setButtonBordered:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isButtonBordered:");
   arg2 = caml_wrap_pointer(@selector(isButtonBordered ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("reloadData:");
   arg2 = caml_wrap_pointer(@selector(reloadData ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("noteNumberOfItemsChanged:");
   arg2 = caml_wrap_pointer(@selector(noteNumberOfItemsChanged ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setUsesDataSource:");
   arg2 = caml_wrap_pointer(@selector(setUsesDataSource:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("usesDataSource:");
   arg2 = caml_wrap_pointer(@selector(usesDataSource ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scrollItemAtIndexToTop:");
   arg2 = caml_wrap_pointer(@selector(scrollItemAtIndexToTop:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scrollItemAtIndexToVisible:");
   arg2 = caml_wrap_pointer(@selector(scrollItemAtIndexToVisible:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectItemAtIndex:");
   arg2 = caml_wrap_pointer(@selector(selectItemAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("deselectItemAtIndex:");
   arg2 = caml_wrap_pointer(@selector(deselectItemAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("indexOfSelectedItem:");
   arg2 = caml_wrap_pointer(@selector(indexOfSelectedItem ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberOfItems:");
   arg2 = caml_wrap_pointer(@selector(numberOfItems ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("completes:");
   arg2 = caml_wrap_pointer(@selector(completes ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setCompletes:");
   arg2 = caml_wrap_pointer(@selector(setCompletes:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("completedString:");
   arg2 = caml_wrap_pointer(@selector(completedString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dataSource:");
   arg2 = caml_wrap_pointer(@selector(dataSource ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDataSource:");
   arg2 = caml_wrap_pointer(@selector(setDataSource:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addItemWithObjectValue:");
   arg2 = caml_wrap_pointer(@selector(addItemWithObjectValue:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addItemsWithObjectValues:");
   arg2 = caml_wrap_pointer(@selector(addItemsWithObjectValues:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("insertItemWithObjectValue:atIndex:");
   arg2 = caml_wrap_pointer(@selector(insertItemWithObjectValue:atIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeItemWithObjectValue:");
   arg2 = caml_wrap_pointer(@selector(removeItemWithObjectValue:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeItemAtIndex:");
   arg2 = caml_wrap_pointer(@selector(removeItemAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeAllItems:");
   arg2 = caml_wrap_pointer(@selector(removeAllItems ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectItemWithObjectValue:");
   arg2 = caml_wrap_pointer(@selector(selectItemWithObjectValue:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("itemObjectValueAtIndex:");
   arg2 = caml_wrap_pointer(@selector(itemObjectValueAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("objectValueOfSelectedItem:");
   arg2 = caml_wrap_pointer(@selector(objectValueOfSelectedItem ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("indexOfItemWithObjectValue:");
   arg2 = caml_wrap_pointer(@selector(indexOfItemWithObjectValue:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("objectValues:");
   arg2 = caml_wrap_pointer(@selector(objectValues ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSObject");
   arg2 = caml_wrap_id([NSObject class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("numberOfItemsInComboBoxCell:");
   arg2 = caml_wrap_pointer(@selector(numberOfItemsInComboBoxCell:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("comboBoxCell:objectValueForItemAtIndex:");
   arg2 = caml_wrap_pointer(@selector(comboBoxCell:objectValueForItemAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("comboBoxCell:indexOfItemWithStringValue:");
   arg2 = caml_wrap_pointer(@selector(comboBoxCell:indexOfItemWithStringValue:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("comboBoxCell:completedString:");
   arg2 = caml_wrap_pointer(@selector(comboBoxCell:completedString:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
