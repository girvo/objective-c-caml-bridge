#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSDocumentController.h>
value caml_init_NSDocumentController(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSDocumentController");
   arg2 = caml_wrap_id([NSDocumentController class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("documentForFileName:");
   arg2 = caml_wrap_pointer(@selector(documentForFileName:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileNamesFromRunningOpenPanel:");
   arg2 = caml_wrap_pointer(@selector(fileNamesFromRunningOpenPanel ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("makeDocumentWithContentsOfFile:ofType:");
   arg2 = caml_wrap_pointer(@selector(makeDocumentWithContentsOfFile:ofType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("makeDocumentWithContentsOfURL:ofType:");
   arg2 = caml_wrap_pointer(@selector(makeDocumentWithContentsOfURL:ofType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("makeUntitledDocumentOfType:");
   arg2 = caml_wrap_pointer(@selector(makeUntitledDocumentOfType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("openDocumentWithContentsOfFile:display:");
   arg2 = caml_wrap_pointer(@selector(openDocumentWithContentsOfFile:display:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("openDocumentWithContentsOfURL:display:");
   arg2 = caml_wrap_pointer(@selector(openDocumentWithContentsOfURL:display:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("openUntitledDocumentOfType:display:");
   arg2 = caml_wrap_pointer(@selector(openUntitledDocumentOfType:display:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setShouldCreateUI:");
   arg2 = caml_wrap_pointer(@selector(setShouldCreateUI:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("shouldCreateUI:");
   arg2 = caml_wrap_pointer(@selector(shouldCreateUI ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sharedDocumentController:");
   arg2 = caml_wrap_pointer(@selector(sharedDocumentController ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("init:");
   arg2 = caml_wrap_pointer(@selector(init ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("documents:");
   arg2 = caml_wrap_pointer(@selector(documents ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("currentDocument:");
   arg2 = caml_wrap_pointer(@selector(currentDocument ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("currentDirectory:");
   arg2 = caml_wrap_pointer(@selector(currentDirectory ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("documentForURL:");
   arg2 = caml_wrap_pointer(@selector(documentForURL:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("documentForWindow:");
   arg2 = caml_wrap_pointer(@selector(documentForWindow:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addDocument:");
   arg2 = caml_wrap_pointer(@selector(addDocument:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeDocument:");
   arg2 = caml_wrap_pointer(@selector(removeDocument:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("newDocument:");
   arg2 = caml_wrap_pointer(@selector(newDocument:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("openUntitledDocumentAndDisplay:error:");
   arg2 = caml_wrap_pointer(@selector(openUntitledDocumentAndDisplay:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("makeUntitledDocumentOfType:error:");
   arg2 = caml_wrap_pointer(@selector(makeUntitledDocumentOfType:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("openDocument:");
   arg2 = caml_wrap_pointer(@selector(openDocument:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_URLsFromRunningOpenPanel:");
   arg2 = caml_wrap_pointer(@selector(l_URLsFromRunningOpenPanel ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("runModalOpenPanel:forTypes:");
   arg2 = caml_wrap_pointer(@selector(runModalOpenPanel:forTypes:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("openDocumentWithContentsOfURL:display:error:");
   arg2 = caml_wrap_pointer(@selector(openDocumentWithContentsOfURL:display:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("makeDocumentWithContentsOfURL:ofType:error:");
   arg2 = caml_wrap_pointer(@selector(makeDocumentWithContentsOfURL:ofType:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("reopenDocumentForURL:withContentsOfURL:error:");
   arg2 = caml_wrap_pointer(@selector(reopenDocumentForURL:withContentsOfURL:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("makeDocumentForURL:withContentsOfURL:ofType:error:");
   arg2 = caml_wrap_pointer(@selector(makeDocumentForURL:withContentsOfURL:ofType:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAutosavingDelay:");
   arg2 = caml_wrap_pointer(@selector(setAutosavingDelay:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("autosavingDelay:");
   arg2 = caml_wrap_pointer(@selector(autosavingDelay ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("saveAllDocuments:");
   arg2 = caml_wrap_pointer(@selector(saveAllDocuments:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("hasEditedDocuments:");
   arg2 = caml_wrap_pointer(@selector(hasEditedDocuments ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("reviewUnsavedDocumentsWithAlertTitle:cancellable:delegate:didReviewAllSelector:contextInfo:");
   arg2 = caml_wrap_pointer(@selector(reviewUnsavedDocumentsWithAlertTitle:cancellable:delegate:didReviewAllSelector:contextInfo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("closeAllDocumentsWithDelegate:didCloseAllSelector:contextInfo:");
   arg2 = caml_wrap_pointer(@selector(closeAllDocumentsWithDelegate:didCloseAllSelector:contextInfo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("presentError:modalForWindow:delegate:didPresentSelector:contextInfo:");
   arg2 = caml_wrap_pointer(@selector(presentError:modalForWindow:delegate:didPresentSelector:contextInfo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("presentError:");
   arg2 = caml_wrap_pointer(@selector(presentError:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("willPresentError:");
   arg2 = caml_wrap_pointer(@selector(willPresentError:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("maximumRecentDocumentCount:");
   arg2 = caml_wrap_pointer(@selector(maximumRecentDocumentCount ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("clearRecentDocuments:");
   arg2 = caml_wrap_pointer(@selector(clearRecentDocuments:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("noteNewRecentDocument:");
   arg2 = caml_wrap_pointer(@selector(noteNewRecentDocument:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("noteNewRecentDocumentURL:");
   arg2 = caml_wrap_pointer(@selector(noteNewRecentDocumentURL:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("recentDocumentURLs:");
   arg2 = caml_wrap_pointer(@selector(recentDocumentURLs ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("defaultType:");
   arg2 = caml_wrap_pointer(@selector(defaultType ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("typeForContentsOfURL:error:");
   arg2 = caml_wrap_pointer(@selector(typeForContentsOfURL:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("documentClassNames:");
   arg2 = caml_wrap_pointer(@selector(documentClassNames ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("typeFromFileExtension:");
   arg2 = caml_wrap_pointer(@selector(typeFromFileExtension:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("documentClassForType:");
   arg2 = caml_wrap_pointer(@selector(documentClassForType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("displayNameForType:");
   arg2 = caml_wrap_pointer(@selector(displayNameForType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileExtensionsFromType:");
   arg2 = caml_wrap_pointer(@selector(fileExtensionsFromType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("validateUserInterfaceItem:");
   arg2 = caml_wrap_pointer(@selector(validateUserInterfaceItem:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
