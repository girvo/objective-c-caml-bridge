// THIS FILE IS GENERATED - ALL CHANGES WILL BE LOST AT THE NEXT BUILD
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSCursor.h>
value caml_init_NSCursor(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSCursor");
   arg2 = caml_wrap_id([NSCursor class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("currentCursor:");
   arg2 = caml_wrap_pointer(@selector(currentCursor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("arrowCursor:");
   arg2 = caml_wrap_pointer(@selector(arrowCursor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_IBeamCursor:");
   arg2 = caml_wrap_pointer(@selector(l_IBeamCursor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("pointingHandCursor:");
   arg2 = caml_wrap_pointer(@selector(pointingHandCursor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("closedHandCursor:");
   arg2 = caml_wrap_pointer(@selector(closedHandCursor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("openHandCursor:");
   arg2 = caml_wrap_pointer(@selector(openHandCursor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("resizeLeftCursor:");
   arg2 = caml_wrap_pointer(@selector(resizeLeftCursor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("resizeRightCursor:");
   arg2 = caml_wrap_pointer(@selector(resizeRightCursor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("resizeLeftRightCursor:");
   arg2 = caml_wrap_pointer(@selector(resizeLeftRightCursor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("resizeUpCursor:");
   arg2 = caml_wrap_pointer(@selector(resizeUpCursor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("resizeDownCursor:");
   arg2 = caml_wrap_pointer(@selector(resizeDownCursor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("resizeUpDownCursor:");
   arg2 = caml_wrap_pointer(@selector(resizeUpDownCursor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("crosshairCursor:");
   arg2 = caml_wrap_pointer(@selector(crosshairCursor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("disappearingItemCursor:");
   arg2 = caml_wrap_pointer(@selector(disappearingItemCursor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithImage:hotSpot:");
   arg2 = caml_wrap_pointer(@selector(initWithImage:hotSpot:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithImage:foregroundColorHint:backgroundColorHint:hotSpot:");
   arg2 = caml_wrap_pointer(@selector(initWithImage:foregroundColorHint:backgroundColorHint:hotSpot:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("hide:");
   arg2 = caml_wrap_pointer(@selector(hide ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("unhide:");
   arg2 = caml_wrap_pointer(@selector(unhide ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setHiddenUntilMouseMoves:");
   arg2 = caml_wrap_pointer(@selector(setHiddenUntilMouseMoves:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("pop:");
   arg2 = caml_wrap_pointer(@selector(pop ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("image:");
   arg2 = caml_wrap_pointer(@selector(image ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("hotSpot:");
   arg2 = caml_wrap_pointer(@selector(hotSpot ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("push:");
   arg2 = caml_wrap_pointer(@selector(push ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("pop:");
   arg2 = caml_wrap_pointer(@selector(pop ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("set:");
   arg2 = caml_wrap_pointer(@selector(set ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setOnMouseExited:");
   arg2 = caml_wrap_pointer(@selector(setOnMouseExited:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setOnMouseEntered:");
   arg2 = caml_wrap_pointer(@selector(setOnMouseEntered:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isSetOnMouseExited:");
   arg2 = caml_wrap_pointer(@selector(isSetOnMouseExited ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isSetOnMouseEntered:");
   arg2 = caml_wrap_pointer(@selector(isSetOnMouseEntered ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("mouseEntered:");
   arg2 = caml_wrap_pointer(@selector(mouseEntered:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("mouseExited:");
   arg2 = caml_wrap_pointer(@selector(mouseExited:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
