// THIS FILE IS GENERATED - ALL CHANGES WILL BE LOST AT THE NEXT BUILD
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSDatePickerCell.h>
value caml_init_NSDatePickerCell(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSDatePickerCell");
   arg2 = caml_wrap_id([NSDatePickerCell class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("datePickerStyle:");
   arg2 = caml_wrap_pointer(@selector(datePickerStyle ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDatePickerStyle:");
   arg2 = caml_wrap_pointer(@selector(setDatePickerStyle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawsBackground:");
   arg2 = caml_wrap_pointer(@selector(drawsBackground ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDrawsBackground:");
   arg2 = caml_wrap_pointer(@selector(setDrawsBackground:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("backgroundColor:");
   arg2 = caml_wrap_pointer(@selector(backgroundColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setBackgroundColor:");
   arg2 = caml_wrap_pointer(@selector(setBackgroundColor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textColor:");
   arg2 = caml_wrap_pointer(@selector(textColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTextColor:");
   arg2 = caml_wrap_pointer(@selector(setTextColor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("datePickerMode:");
   arg2 = caml_wrap_pointer(@selector(datePickerMode ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDatePickerMode:");
   arg2 = caml_wrap_pointer(@selector(setDatePickerMode:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("datePickerElements:");
   arg2 = caml_wrap_pointer(@selector(datePickerElements ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDatePickerElements:");
   arg2 = caml_wrap_pointer(@selector(setDatePickerElements:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("calendar:");
   arg2 = caml_wrap_pointer(@selector(calendar ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setCalendar:");
   arg2 = caml_wrap_pointer(@selector(setCalendar:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("locale:");
   arg2 = caml_wrap_pointer(@selector(locale ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setLocale:");
   arg2 = caml_wrap_pointer(@selector(setLocale:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("timeZone:");
   arg2 = caml_wrap_pointer(@selector(timeZone ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTimeZone:");
   arg2 = caml_wrap_pointer(@selector(setTimeZone:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dateValue:");
   arg2 = caml_wrap_pointer(@selector(dateValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDateValue:");
   arg2 = caml_wrap_pointer(@selector(setDateValue:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("timeInterval:");
   arg2 = caml_wrap_pointer(@selector(timeInterval ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTimeInterval:");
   arg2 = caml_wrap_pointer(@selector(setTimeInterval:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("minDate:");
   arg2 = caml_wrap_pointer(@selector(minDate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMinDate:");
   arg2 = caml_wrap_pointer(@selector(setMinDate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("maxDate:");
   arg2 = caml_wrap_pointer(@selector(maxDate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMaxDate:");
   arg2 = caml_wrap_pointer(@selector(setMaxDate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("delegate:");
   arg2 = caml_wrap_pointer(@selector(delegate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDelegate:");
   arg2 = caml_wrap_pointer(@selector(setDelegate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSObject");
   arg2 = caml_wrap_id([NSObject class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("datePickerCell:validateProposedDateValue:timeInterval:");
   arg2 = caml_wrap_pointer(@selector(datePickerCell:validateProposedDateValue:timeInterval:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
