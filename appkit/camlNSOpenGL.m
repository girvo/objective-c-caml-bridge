#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSOpenGL.h>
value caml_init_NSOpenGL(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSOpenGLPixelBuffer");
   arg2 = caml_wrap_id([NSOpenGLPixelBuffer class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("initWithTextureTarget:textureInternalFormat:textureMaxMipMapLevel:pixelsWide:pixelsHigh:");
   arg2 = caml_wrap_pointer(@selector(initWithTextureTarget:textureInternalFormat:textureMaxMipMapLevel:pixelsWide:pixelsHigh:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("pixelsWide:");
   arg2 = caml_wrap_pointer(@selector(pixelsWide ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("pixelsHigh:");
   arg2 = caml_wrap_pointer(@selector(pixelsHigh ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textureTarget:");
   arg2 = caml_wrap_pointer(@selector(textureTarget ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textureInternalFormat:");
   arg2 = caml_wrap_pointer(@selector(textureInternalFormat ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textureMaxMipMapLevel:");
   arg2 = caml_wrap_pointer(@selector(textureMaxMipMapLevel ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSOpenGLPixelFormat");
   arg2 = caml_wrap_id([NSOpenGLPixelFormat class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("initWithAttributes:");
   arg2 = caml_wrap_pointer(@selector(initWithAttributes:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithData:");
   arg2 = caml_wrap_pointer(@selector(initWithData:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("attributes:");
   arg2 = caml_wrap_pointer(@selector(attributes ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAttributes:");
   arg2 = caml_wrap_pointer(@selector(setAttributes:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getValues:forAttribute:forVirtualScreen:");
   arg2 = caml_wrap_pointer(@selector(getValues:forAttribute:forVirtualScreen:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberOfVirtualScreens:");
   arg2 = caml_wrap_pointer(@selector(numberOfVirtualScreens ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_CGLPixelFormatObj:");
   arg2 = caml_wrap_pointer(@selector(l_CGLPixelFormatObj ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSOpenGLContext");
   arg2 = caml_wrap_id([NSOpenGLContext class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("initWithFormat:shareContext:");
   arg2 = caml_wrap_pointer(@selector(initWithFormat:shareContext:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setView:");
   arg2 = caml_wrap_pointer(@selector(setView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("view:");
   arg2 = caml_wrap_pointer(@selector(view ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFullScreen:");
   arg2 = caml_wrap_pointer(@selector(setFullScreen ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setOffScreen:width:height:rowbytes:");
   arg2 = caml_wrap_pointer(@selector(setOffScreen:width:height:rowbytes:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("clearDrawable:");
   arg2 = caml_wrap_pointer(@selector(clearDrawable ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("update:");
   arg2 = caml_wrap_pointer(@selector(update ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("flushBuffer:");
   arg2 = caml_wrap_pointer(@selector(flushBuffer ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("makeCurrentContext:");
   arg2 = caml_wrap_pointer(@selector(makeCurrentContext ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("clearCurrentContext:");
   arg2 = caml_wrap_pointer(@selector(clearCurrentContext ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("currentContext:");
   arg2 = caml_wrap_pointer(@selector(currentContext ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("copyAttributesFromContext:withMask:");
   arg2 = caml_wrap_pointer(@selector(copyAttributesFromContext:withMask:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setValues:forParameter:");
   arg2 = caml_wrap_pointer(@selector(setValues:forParameter:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getValues:forParameter:");
   arg2 = caml_wrap_pointer(@selector(getValues:forParameter:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setCurrentVirtualScreen:");
   arg2 = caml_wrap_pointer(@selector(setCurrentVirtualScreen:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("currentVirtualScreen:");
   arg2 = caml_wrap_pointer(@selector(currentVirtualScreen ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("createTexture:fromView:internalFormat:");
   arg2 = caml_wrap_pointer(@selector(createTexture:fromView:internalFormat:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_CGLContextObj:");
   arg2 = caml_wrap_pointer(@selector(l_CGLContextObj ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPixelBuffer:cubeMapFace:mipMapLevel:currentVirtualScreen:");
   arg2 = caml_wrap_pointer(@selector(setPixelBuffer:cubeMapFace:mipMapLevel:currentVirtualScreen:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("pixelBuffer:");
   arg2 = caml_wrap_pointer(@selector(pixelBuffer ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("pixelBufferCubeMapFace:");
   arg2 = caml_wrap_pointer(@selector(pixelBufferCubeMapFace ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("pixelBufferMipMapLevel:");
   arg2 = caml_wrap_pointer(@selector(pixelBufferMipMapLevel ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTextureImageToPixelBuffer:colorBuffer:");
   arg2 = caml_wrap_pointer(@selector(setTextureImageToPixelBuffer:colorBuffer:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
