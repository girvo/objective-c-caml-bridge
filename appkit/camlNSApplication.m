// THIS FILE IS GENERATED - ALL CHANGES WILL BE LOST AT THE NEXT BUILD
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSApplication.h>
value caml_init_NSApplication(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSApplication");
   arg2 = caml_wrap_id([NSApplication class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("setApplicationHandle:previousHandle:commandLine:show:");
   arg2 = caml_wrap_pointer(@selector(setApplicationHandle:previousHandle:commandLine:show:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("useRunningCopyOfApplication:");
   arg2 = caml_wrap_pointer(@selector(useRunningCopyOfApplication ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("applicationHandle:");
   arg2 = caml_wrap_pointer(@selector(applicationHandle ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("windowWithWindowHandle:");
   arg2 = caml_wrap_pointer(@selector(windowWithWindowHandle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("orderFrontStandardAboutPanel:");
   arg2 = caml_wrap_pointer(@selector(orderFrontStandardAboutPanel:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("orderFrontStandardAboutPanelWithOptions:");
   arg2 = caml_wrap_pointer(@selector(orderFrontStandardAboutPanelWithOptions:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setServicesProvider:");
   arg2 = caml_wrap_pointer(@selector(setServicesProvider:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("servicesProvider:");
   arg2 = caml_wrap_pointer(@selector(servicesProvider ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setServicesMenu:");
   arg2 = caml_wrap_pointer(@selector(setServicesMenu:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("servicesMenu:");
   arg2 = caml_wrap_pointer(@selector(servicesMenu ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("registerServicesMenuSendTypes:returnTypes:");
   arg2 = caml_wrap_pointer(@selector(registerServicesMenuSendTypes:returnTypes:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setWindowsMenu:");
   arg2 = caml_wrap_pointer(@selector(setWindowsMenu:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("windowsMenu:");
   arg2 = caml_wrap_pointer(@selector(windowsMenu ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("arrangeInFront:");
   arg2 = caml_wrap_pointer(@selector(arrangeInFront:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeWindowsItem:");
   arg2 = caml_wrap_pointer(@selector(removeWindowsItem:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addWindowsItem:title:filename:");
   arg2 = caml_wrap_pointer(@selector(addWindowsItem:title:filename:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("changeWindowsItem:title:filename:");
   arg2 = caml_wrap_pointer(@selector(changeWindowsItem:title:filename:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("updateWindowsItem:");
   arg2 = caml_wrap_pointer(@selector(updateWindowsItem:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("miniaturizeAll:");
   arg2 = caml_wrap_pointer(@selector(miniaturizeAll:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sharedApplication:");
   arg2 = caml_wrap_pointer(@selector(sharedApplication ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDelegate:");
   arg2 = caml_wrap_pointer(@selector(setDelegate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("delegate:");
   arg2 = caml_wrap_pointer(@selector(delegate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("context:");
   arg2 = caml_wrap_pointer(@selector(context ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("hide:");
   arg2 = caml_wrap_pointer(@selector(hide:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("unhide:");
   arg2 = caml_wrap_pointer(@selector(unhide:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("unhideWithoutActivation:");
   arg2 = caml_wrap_pointer(@selector(unhideWithoutActivation ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("windowWithWindowNumber:");
   arg2 = caml_wrap_pointer(@selector(windowWithWindowNumber:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("mainWindow:");
   arg2 = caml_wrap_pointer(@selector(mainWindow ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("keyWindow:");
   arg2 = caml_wrap_pointer(@selector(keyWindow ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isActive:");
   arg2 = caml_wrap_pointer(@selector(isActive ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isHidden:");
   arg2 = caml_wrap_pointer(@selector(isHidden ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isRunning:");
   arg2 = caml_wrap_pointer(@selector(isRunning ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("deactivate:");
   arg2 = caml_wrap_pointer(@selector(deactivate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("activateIgnoringOtherApps:");
   arg2 = caml_wrap_pointer(@selector(activateIgnoringOtherApps:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("hideOtherApplications:");
   arg2 = caml_wrap_pointer(@selector(hideOtherApplications:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("unhideAllApplications:");
   arg2 = caml_wrap_pointer(@selector(unhideAllApplications:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("finishLaunching:");
   arg2 = caml_wrap_pointer(@selector(finishLaunching ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("run:");
   arg2 = caml_wrap_pointer(@selector(run ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("runModalForWindow:");
   arg2 = caml_wrap_pointer(@selector(runModalForWindow:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stop:");
   arg2 = caml_wrap_pointer(@selector(stop:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stopModal:");
   arg2 = caml_wrap_pointer(@selector(stopModal ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stopModalWithCode:");
   arg2 = caml_wrap_pointer(@selector(stopModalWithCode:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("abortModal:");
   arg2 = caml_wrap_pointer(@selector(abortModal ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("modalWindow:");
   arg2 = caml_wrap_pointer(@selector(modalWindow ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("beginModalSessionForWindow:");
   arg2 = caml_wrap_pointer(@selector(beginModalSessionForWindow:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("runModalSession:");
   arg2 = caml_wrap_pointer(@selector(runModalSession:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("endModalSession:");
   arg2 = caml_wrap_pointer(@selector(endModalSession:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("terminate:");
   arg2 = caml_wrap_pointer(@selector(terminate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("requestUserAttention:");
   arg2 = caml_wrap_pointer(@selector(requestUserAttention:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("cancelUserAttentionRequest:");
   arg2 = caml_wrap_pointer(@selector(cancelUserAttentionRequest:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:");
   arg2 = caml_wrap_pointer(@selector(beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("endSheet:");
   arg2 = caml_wrap_pointer(@selector(endSheet:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("endSheet:returnCode:");
   arg2 = caml_wrap_pointer(@selector(endSheet:returnCode:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("runModalForWindow:relativeToWindow:");
   arg2 = caml_wrap_pointer(@selector(runModalForWindow:relativeToWindow:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("beginModalSessionForWindow:relativeToWindow:");
   arg2 = caml_wrap_pointer(@selector(beginModalSessionForWindow:relativeToWindow:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("nextEventMatchingMask:untilDate:inMode:dequeue:");
   arg2 = caml_wrap_pointer(@selector(nextEventMatchingMask:untilDate:inMode:dequeue:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("discardEventsMatchingMask:beforeEvent:");
   arg2 = caml_wrap_pointer(@selector(discardEventsMatchingMask:beforeEvent:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("postEvent:atStart:");
   arg2 = caml_wrap_pointer(@selector(postEvent:atStart:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("currentEvent:");
   arg2 = caml_wrap_pointer(@selector(currentEvent ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sendEvent:");
   arg2 = caml_wrap_pointer(@selector(sendEvent:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("preventWindowOrdering:");
   arg2 = caml_wrap_pointer(@selector(preventWindowOrdering ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("makeWindowsPerform:inOrder:");
   arg2 = caml_wrap_pointer(@selector(makeWindowsPerform:inOrder:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("windows:");
   arg2 = caml_wrap_pointer(@selector(windows ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setWindowsNeedUpdate:");
   arg2 = caml_wrap_pointer(@selector(setWindowsNeedUpdate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("updateWindows:");
   arg2 = caml_wrap_pointer(@selector(updateWindows ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMainMenu:");
   arg2 = caml_wrap_pointer(@selector(setMainMenu:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("mainMenu:");
   arg2 = caml_wrap_pointer(@selector(mainMenu ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setApplicationIconImage:");
   arg2 = caml_wrap_pointer(@selector(setApplicationIconImage:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("applicationIconImage:");
   arg2 = caml_wrap_pointer(@selector(applicationIconImage ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sendAction:l_to:from:");
   arg2 = caml_wrap_pointer(@selector(sendAction:l_to:from:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("targetForAction:");
   arg2 = caml_wrap_pointer(@selector(targetForAction:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("targetForAction:l_to:from:");
   arg2 = caml_wrap_pointer(@selector(targetForAction:l_to:from:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tryToPerform:l_with:");
   arg2 = caml_wrap_pointer(@selector(tryToPerform:l_with:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("validRequestorForSendType:returnType:");
   arg2 = caml_wrap_pointer(@selector(validRequestorForSendType:returnType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("reportException:");
   arg2 = caml_wrap_pointer(@selector(reportException:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("detachDrawingThread:toTarget:withObject:");
   arg2 = caml_wrap_pointer(@selector(detachDrawingThread:toTarget:withObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("replyToApplicationShouldTerminate:");
   arg2 = caml_wrap_pointer(@selector(replyToApplicationShouldTerminate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("replyToOpenOrPrint:");
   arg2 = caml_wrap_pointer(@selector(replyToOpenOrPrint:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("orderFrontCharacterPalette:");
   arg2 = caml_wrap_pointer(@selector(orderFrontCharacterPalette:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSObject");
   arg2 = caml_wrap_id([NSObject class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("writeSelectionToPasteboard:types:");
   arg2 = caml_wrap_pointer(@selector(writeSelectionToPasteboard:types:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("readSelectionFromPasteboard:");
   arg2 = caml_wrap_pointer(@selector(readSelectionFromPasteboard:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("applicationShouldTerminate:");
   arg2 = caml_wrap_pointer(@selector(applicationShouldTerminate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("application:openFile:");
   arg2 = caml_wrap_pointer(@selector(application:openFile:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("application:openFiles:");
   arg2 = caml_wrap_pointer(@selector(application:openFiles:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("application:openTempFile:");
   arg2 = caml_wrap_pointer(@selector(application:openTempFile:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("applicationShouldOpenUntitledFile:");
   arg2 = caml_wrap_pointer(@selector(applicationShouldOpenUntitledFile:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("applicationOpenUntitledFile:");
   arg2 = caml_wrap_pointer(@selector(applicationOpenUntitledFile:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("application:openFileWithoutUI:");
   arg2 = caml_wrap_pointer(@selector(application:openFileWithoutUI:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("application:printFile:");
   arg2 = caml_wrap_pointer(@selector(application:printFile:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("application:printFiles:withSettings:showPrintPanels:");
   arg2 = caml_wrap_pointer(@selector(application:printFiles:withSettings:showPrintPanels:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("application:printFiles:");
   arg2 = caml_wrap_pointer(@selector(application:printFiles:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("applicationShouldTerminateAfterLastWindowClosed:");
   arg2 = caml_wrap_pointer(@selector(applicationShouldTerminateAfterLastWindowClosed:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("applicationShouldHandleReopen:hasVisibleWindows:");
   arg2 = caml_wrap_pointer(@selector(applicationShouldHandleReopen:hasVisibleWindows:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("applicationDockMenu:");
   arg2 = caml_wrap_pointer(@selector(applicationDockMenu:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("application:willPresentError:");
   arg2 = caml_wrap_pointer(@selector(application:willPresentError:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("applicationWillFinishLaunching:");
   arg2 = caml_wrap_pointer(@selector(applicationWillFinishLaunching:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("applicationDidFinishLaunching:");
   arg2 = caml_wrap_pointer(@selector(applicationDidFinishLaunching:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("applicationWillHide:");
   arg2 = caml_wrap_pointer(@selector(applicationWillHide:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("applicationDidHide:");
   arg2 = caml_wrap_pointer(@selector(applicationDidHide:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("applicationWillUnhide:");
   arg2 = caml_wrap_pointer(@selector(applicationWillUnhide:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("applicationDidUnhide:");
   arg2 = caml_wrap_pointer(@selector(applicationDidUnhide:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("applicationWillBecomeActive:");
   arg2 = caml_wrap_pointer(@selector(applicationWillBecomeActive:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("applicationDidBecomeActive:");
   arg2 = caml_wrap_pointer(@selector(applicationDidBecomeActive:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("applicationWillResignActive:");
   arg2 = caml_wrap_pointer(@selector(applicationWillResignActive:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("applicationDidResignActive:");
   arg2 = caml_wrap_pointer(@selector(applicationDidResignActive:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("applicationWillUpdate:");
   arg2 = caml_wrap_pointer(@selector(applicationWillUpdate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("applicationDidUpdate:");
   arg2 = caml_wrap_pointer(@selector(applicationDidUpdate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("applicationWillTerminate:");
   arg2 = caml_wrap_pointer(@selector(applicationWillTerminate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("applicationDidChangeScreenParameters:");
   arg2 = caml_wrap_pointer(@selector(applicationDidChangeScreenParameters:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
