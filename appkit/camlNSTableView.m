#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSTableView.h>
value caml_init_NSTableView(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSTableView");
   arg2 = caml_wrap_id([NSTableView class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("setDataSource:");
   arg2 = caml_wrap_pointer(@selector(setDataSource:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dataSource:");
   arg2 = caml_wrap_pointer(@selector(dataSource ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDelegate:");
   arg2 = caml_wrap_pointer(@selector(setDelegate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("delegate:");
   arg2 = caml_wrap_pointer(@selector(delegate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setHeaderView:");
   arg2 = caml_wrap_pointer(@selector(setHeaderView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("headerView:");
   arg2 = caml_wrap_pointer(@selector(headerView ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setCornerView:");
   arg2 = caml_wrap_pointer(@selector(setCornerView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("cornerView:");
   arg2 = caml_wrap_pointer(@selector(cornerView ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAllowsColumnReordering:");
   arg2 = caml_wrap_pointer(@selector(setAllowsColumnReordering:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("allowsColumnReordering:");
   arg2 = caml_wrap_pointer(@selector(allowsColumnReordering ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAllowsColumnResizing:");
   arg2 = caml_wrap_pointer(@selector(setAllowsColumnResizing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("allowsColumnResizing:");
   arg2 = caml_wrap_pointer(@selector(allowsColumnResizing ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setColumnAutoresizingStyle:");
   arg2 = caml_wrap_pointer(@selector(setColumnAutoresizingStyle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("columnAutoresizingStyle:");
   arg2 = caml_wrap_pointer(@selector(columnAutoresizingStyle ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setGridStyleMask:");
   arg2 = caml_wrap_pointer(@selector(setGridStyleMask:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("gridStyleMask:");
   arg2 = caml_wrap_pointer(@selector(gridStyleMask ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setIntercellSpacing:");
   arg2 = caml_wrap_pointer(@selector(setIntercellSpacing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("intercellSpacing:");
   arg2 = caml_wrap_pointer(@selector(intercellSpacing ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setUsesAlternatingRowBackgroundColors:");
   arg2 = caml_wrap_pointer(@selector(setUsesAlternatingRowBackgroundColors:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("usesAlternatingRowBackgroundColors:");
   arg2 = caml_wrap_pointer(@selector(usesAlternatingRowBackgroundColors ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setBackgroundColor:");
   arg2 = caml_wrap_pointer(@selector(setBackgroundColor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("backgroundColor:");
   arg2 = caml_wrap_pointer(@selector(backgroundColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setGridColor:");
   arg2 = caml_wrap_pointer(@selector(setGridColor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("gridColor:");
   arg2 = caml_wrap_pointer(@selector(gridColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setRowHeight:");
   arg2 = caml_wrap_pointer(@selector(setRowHeight:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("rowHeight:");
   arg2 = caml_wrap_pointer(@selector(rowHeight ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("noteHeightOfRowsWithIndexesChanged:");
   arg2 = caml_wrap_pointer(@selector(noteHeightOfRowsWithIndexesChanged:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tableColumns:");
   arg2 = caml_wrap_pointer(@selector(tableColumns ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberOfColumns:");
   arg2 = caml_wrap_pointer(@selector(numberOfColumns ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberOfRows:");
   arg2 = caml_wrap_pointer(@selector(numberOfRows ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addTableColumn:");
   arg2 = caml_wrap_pointer(@selector(addTableColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeTableColumn:");
   arg2 = caml_wrap_pointer(@selector(removeTableColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("columnWithIdentifier:");
   arg2 = caml_wrap_pointer(@selector(columnWithIdentifier:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tableColumnWithIdentifier:");
   arg2 = caml_wrap_pointer(@selector(tableColumnWithIdentifier:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tile:");
   arg2 = caml_wrap_pointer(@selector(tile ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sizeToFit:");
   arg2 = caml_wrap_pointer(@selector(sizeToFit ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sizeLastColumnToFit:");
   arg2 = caml_wrap_pointer(@selector(sizeLastColumnToFit ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scrollRowToVisible:");
   arg2 = caml_wrap_pointer(@selector(scrollRowToVisible:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scrollColumnToVisible:");
   arg2 = caml_wrap_pointer(@selector(scrollColumnToVisible:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("moveColumn:toColumn:");
   arg2 = caml_wrap_pointer(@selector(moveColumn:toColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("reloadData:");
   arg2 = caml_wrap_pointer(@selector(reloadData ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("noteNumberOfRowsChanged:");
   arg2 = caml_wrap_pointer(@selector(noteNumberOfRowsChanged ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("editedColumn:");
   arg2 = caml_wrap_pointer(@selector(editedColumn ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("editedRow:");
   arg2 = caml_wrap_pointer(@selector(editedRow ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("clickedColumn:");
   arg2 = caml_wrap_pointer(@selector(clickedColumn ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("clickedRow:");
   arg2 = caml_wrap_pointer(@selector(clickedRow ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDoubleAction:");
   arg2 = caml_wrap_pointer(@selector(setDoubleAction:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("doubleAction:");
   arg2 = caml_wrap_pointer(@selector(doubleAction ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setSortDescriptors:");
   arg2 = caml_wrap_pointer(@selector(setSortDescriptors:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sortDescriptors:");
   arg2 = caml_wrap_pointer(@selector(sortDescriptors ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setIndicatorImage:inTableColumn:");
   arg2 = caml_wrap_pointer(@selector(setIndicatorImage:inTableColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("indicatorImageInTableColumn:");
   arg2 = caml_wrap_pointer(@selector(indicatorImageInTableColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setHighlightedTableColumn:");
   arg2 = caml_wrap_pointer(@selector(setHighlightedTableColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("highlightedTableColumn:");
   arg2 = caml_wrap_pointer(@selector(highlightedTableColumn ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setVerticalMotionCanBeginDrag:");
   arg2 = caml_wrap_pointer(@selector(setVerticalMotionCanBeginDrag:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("verticalMotionCanBeginDrag:");
   arg2 = caml_wrap_pointer(@selector(verticalMotionCanBeginDrag ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("canDragRowsWithIndexes:atPoint:");
   arg2 = caml_wrap_pointer(@selector(canDragRowsWithIndexes:atPoint:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dragImageForRowsWithIndexes:tableColumns:event:offset:");
   arg2 = caml_wrap_pointer(@selector(dragImageForRowsWithIndexes:tableColumns:event:offset:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDraggingSourceOperationMask:forLocal:");
   arg2 = caml_wrap_pointer(@selector(setDraggingSourceOperationMask:forLocal:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDropRow:dropOperation:");
   arg2 = caml_wrap_pointer(@selector(setDropRow:dropOperation:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAllowsMultipleSelection:");
   arg2 = caml_wrap_pointer(@selector(setAllowsMultipleSelection:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("allowsMultipleSelection:");
   arg2 = caml_wrap_pointer(@selector(allowsMultipleSelection ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAllowsEmptySelection:");
   arg2 = caml_wrap_pointer(@selector(setAllowsEmptySelection:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("allowsEmptySelection:");
   arg2 = caml_wrap_pointer(@selector(allowsEmptySelection ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAllowsColumnSelection:");
   arg2 = caml_wrap_pointer(@selector(setAllowsColumnSelection:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("allowsColumnSelection:");
   arg2 = caml_wrap_pointer(@selector(allowsColumnSelection ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectAll:");
   arg2 = caml_wrap_pointer(@selector(selectAll:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("deselectAll:");
   arg2 = caml_wrap_pointer(@selector(deselectAll:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectColumnIndexes:byExtendingSelection:");
   arg2 = caml_wrap_pointer(@selector(selectColumnIndexes:byExtendingSelection:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectRowIndexes:byExtendingSelection:");
   arg2 = caml_wrap_pointer(@selector(selectRowIndexes:byExtendingSelection:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectedColumnIndexes:");
   arg2 = caml_wrap_pointer(@selector(selectedColumnIndexes ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectedRowIndexes:");
   arg2 = caml_wrap_pointer(@selector(selectedRowIndexes ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("deselectColumn:");
   arg2 = caml_wrap_pointer(@selector(deselectColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("deselectRow:");
   arg2 = caml_wrap_pointer(@selector(deselectRow:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectedColumn:");
   arg2 = caml_wrap_pointer(@selector(selectedColumn ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectedRow:");
   arg2 = caml_wrap_pointer(@selector(selectedRow ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isColumnSelected:");
   arg2 = caml_wrap_pointer(@selector(isColumnSelected:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isRowSelected:");
   arg2 = caml_wrap_pointer(@selector(isRowSelected:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberOfSelectedColumns:");
   arg2 = caml_wrap_pointer(@selector(numberOfSelectedColumns ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberOfSelectedRows:");
   arg2 = caml_wrap_pointer(@selector(numberOfSelectedRows ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("rectOfColumn:");
   arg2 = caml_wrap_pointer(@selector(rectOfColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("rectOfRow:");
   arg2 = caml_wrap_pointer(@selector(rectOfRow:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("columnsInRect:");
   arg2 = caml_wrap_pointer(@selector(columnsInRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("rowsInRect:");
   arg2 = caml_wrap_pointer(@selector(rowsInRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("columnAtPoint:");
   arg2 = caml_wrap_pointer(@selector(columnAtPoint:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("rowAtPoint:");
   arg2 = caml_wrap_pointer(@selector(rowAtPoint:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("frameOfCellAtColumn:row:");
   arg2 = caml_wrap_pointer(@selector(frameOfCellAtColumn:row:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textShouldBeginEditing:");
   arg2 = caml_wrap_pointer(@selector(textShouldBeginEditing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textShouldEndEditing:");
   arg2 = caml_wrap_pointer(@selector(textShouldEndEditing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textDidBeginEditing:");
   arg2 = caml_wrap_pointer(@selector(textDidBeginEditing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textDidEndEditing:");
   arg2 = caml_wrap_pointer(@selector(textDidEndEditing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textDidChange:");
   arg2 = caml_wrap_pointer(@selector(textDidChange:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAutosaveName:");
   arg2 = caml_wrap_pointer(@selector(setAutosaveName:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("autosaveName:");
   arg2 = caml_wrap_pointer(@selector(autosaveName ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAutosaveTableColumns:");
   arg2 = caml_wrap_pointer(@selector(setAutosaveTableColumns:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("autosaveTableColumns:");
   arg2 = caml_wrap_pointer(@selector(autosaveTableColumns ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("editColumn:row:withEvent:select:");
   arg2 = caml_wrap_pointer(@selector(editColumn:row:withEvent:select:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawRow:clipRect:");
   arg2 = caml_wrap_pointer(@selector(drawRow:clipRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("highlightSelectionInClipRect:");
   arg2 = caml_wrap_pointer(@selector(highlightSelectionInClipRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawGridInClipRect:");
   arg2 = caml_wrap_pointer(@selector(drawGridInClipRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawBackgroundInClipRect:");
   arg2 = caml_wrap_pointer(@selector(drawBackgroundInClipRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDrawsGrid:");
   arg2 = caml_wrap_pointer(@selector(setDrawsGrid:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawsGrid:");
   arg2 = caml_wrap_pointer(@selector(drawsGrid ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectColumn:byExtendingSelection:");
   arg2 = caml_wrap_pointer(@selector(selectColumn:byExtendingSelection:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectRow:byExtendingSelection:");
   arg2 = caml_wrap_pointer(@selector(selectRow:byExtendingSelection:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectedColumnEnumerator:");
   arg2 = caml_wrap_pointer(@selector(selectedColumnEnumerator ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectedRowEnumerator:");
   arg2 = caml_wrap_pointer(@selector(selectedRowEnumerator ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dragImageForRows:event:dragImageOffset:");
   arg2 = caml_wrap_pointer(@selector(dragImageForRows:event:dragImageOffset:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAutoresizesAllColumnsToFit:");
   arg2 = caml_wrap_pointer(@selector(setAutoresizesAllColumnsToFit:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("autoresizesAllColumnsToFit:");
   arg2 = caml_wrap_pointer(@selector(autoresizesAllColumnsToFit ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSObject");
   arg2 = caml_wrap_id([NSObject class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("numberOfRowsInTableView:");
   arg2 = caml_wrap_pointer(@selector(numberOfRowsInTableView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tableView:objectValueForTableColumn:row:");
   arg2 = caml_wrap_pointer(@selector(tableView:objectValueForTableColumn:row:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tableView:setObjectValue:forTableColumn:row:");
   arg2 = caml_wrap_pointer(@selector(tableView:setObjectValue:forTableColumn:row:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tableView:sortDescriptorsDidChange:");
   arg2 = caml_wrap_pointer(@selector(tableView:sortDescriptorsDidChange:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tableView:writeRowsWithIndexes:toPasteboard:");
   arg2 = caml_wrap_pointer(@selector(tableView:writeRowsWithIndexes:toPasteboard:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tableView:validateDrop:proposedRow:proposedDropOperation:");
   arg2 = caml_wrap_pointer(@selector(tableView:validateDrop:proposedRow:proposedDropOperation:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tableView:acceptDrop:row:dropOperation:");
   arg2 = caml_wrap_pointer(@selector(tableView:acceptDrop:row:dropOperation:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tableView:namesOfPromisedFilesDroppedAtDestination:forDraggedRowsWithIndexes:");
   arg2 = caml_wrap_pointer(@selector(tableView:namesOfPromisedFilesDroppedAtDestination:forDraggedRowsWithIndexes:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tableView:writeRows:toPasteboard:");
   arg2 = caml_wrap_pointer(@selector(tableView:writeRows:toPasteboard:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tableViewSelectionDidChange:");
   arg2 = caml_wrap_pointer(@selector(tableViewSelectionDidChange:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tableViewColumnDidMove:");
   arg2 = caml_wrap_pointer(@selector(tableViewColumnDidMove:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tableViewColumnDidResize:");
   arg2 = caml_wrap_pointer(@selector(tableViewColumnDidResize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tableViewSelectionIsChanging:");
   arg2 = caml_wrap_pointer(@selector(tableViewSelectionIsChanging:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tableView:willDisplayCell:forTableColumn:row:");
   arg2 = caml_wrap_pointer(@selector(tableView:willDisplayCell:forTableColumn:row:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tableView:shouldEditTableColumn:row:");
   arg2 = caml_wrap_pointer(@selector(tableView:shouldEditTableColumn:row:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectionShouldChangeInTableView:");
   arg2 = caml_wrap_pointer(@selector(selectionShouldChangeInTableView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tableView:shouldSelectRow:");
   arg2 = caml_wrap_pointer(@selector(tableView:shouldSelectRow:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tableView:shouldSelectTableColumn:");
   arg2 = caml_wrap_pointer(@selector(tableView:shouldSelectTableColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tableView:mouseDownInHeaderOfTableColumn:");
   arg2 = caml_wrap_pointer(@selector(tableView:mouseDownInHeaderOfTableColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tableView:didClickTableColumn:");
   arg2 = caml_wrap_pointer(@selector(tableView:didClickTableColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tableView:didDragTableColumn:");
   arg2 = caml_wrap_pointer(@selector(tableView:didDragTableColumn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tableView:toolTipForCell:rect:tableColumn:row:mouseLocation:");
   arg2 = caml_wrap_pointer(@selector(tableView:toolTipForCell:rect:tableColumn:row:mouseLocation:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tableView:heightOfRow:");
   arg2 = caml_wrap_pointer(@selector(tableView:heightOfRow:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
