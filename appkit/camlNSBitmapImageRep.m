// THIS FILE IS GENERATED - ALL CHANGES WILL BE LOST AT THE NEXT BUILD
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSBitmapImageRep.h>
value caml_init_NSBitmapImageRep(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSBitmapImageRep");
   arg2 = caml_wrap_id([NSBitmapImageRep class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("representationOfImageRepsInArray:usingType:properties:");
   arg2 = caml_wrap_pointer(@selector(representationOfImageRepsInArray:usingType:properties:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("representationUsingType:properties:");
   arg2 = caml_wrap_pointer(@selector(representationUsingType:properties:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setProperty:withValue:");
   arg2 = caml_wrap_pointer(@selector(setProperty:withValue:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("valueForProperty:");
   arg2 = caml_wrap_pointer(@selector(valueForProperty:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithIconHandle:");
   arg2 = caml_wrap_pointer(@selector(initWithIconHandle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithBitmapHandle:");
   arg2 = caml_wrap_pointer(@selector(initWithBitmapHandle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithFocusedViewRect:");
   arg2 = caml_wrap_pointer(@selector(initWithFocusedViewRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bytesPerRow:bitsPerPixel:");
   arg2 = caml_wrap_pointer(@selector(initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bytesPerRow:bitsPerPixel:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bitmapFormat:bytesPerRow:bitsPerPixel:");
   arg2 = caml_wrap_pointer(@selector(initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bitmapFormat:bytesPerRow:bitsPerPixel:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("imageRepsWithData:");
   arg2 = caml_wrap_pointer(@selector(imageRepsWithData:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("imageRepWithData:");
   arg2 = caml_wrap_pointer(@selector(imageRepWithData:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithData:");
   arg2 = caml_wrap_pointer(@selector(initWithData:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("bitmapData:");
   arg2 = caml_wrap_pointer(@selector(bitmapData ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getBitmapDataPlanes:");
   arg2 = caml_wrap_pointer(@selector(getBitmapDataPlanes:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isPlanar:");
   arg2 = caml_wrap_pointer(@selector(isPlanar ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("samplesPerPixel:");
   arg2 = caml_wrap_pointer(@selector(samplesPerPixel ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("bitsPerPixel:");
   arg2 = caml_wrap_pointer(@selector(bitsPerPixel ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("bytesPerRow:");
   arg2 = caml_wrap_pointer(@selector(bytesPerRow ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("bytesPerPlane:");
   arg2 = caml_wrap_pointer(@selector(bytesPerPlane ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberOfPlanes:");
   arg2 = caml_wrap_pointer(@selector(numberOfPlanes ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("bitmapFormat:");
   arg2 = caml_wrap_pointer(@selector(bitmapFormat ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getCompression:factor:");
   arg2 = caml_wrap_pointer(@selector(getCompression:factor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setCompression:factor:");
   arg2 = caml_wrap_pointer(@selector(setCompression:factor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_TIFFRepresentation:");
   arg2 = caml_wrap_pointer(@selector(l_TIFFRepresentation ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_TIFFRepresentationUsingCompression:factor:");
   arg2 = caml_wrap_pointer(@selector(l_TIFFRepresentationUsingCompression:factor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_TIFFRepresentationOfImageRepsInArray:");
   arg2 = caml_wrap_pointer(@selector(l_TIFFRepresentationOfImageRepsInArray:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_TIFFRepresentationOfImageRepsInArray:usingCompression:factor:");
   arg2 = caml_wrap_pointer(@selector(l_TIFFRepresentationOfImageRepsInArray:usingCompression:factor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getTIFFCompressionTypes:count:");
   arg2 = caml_wrap_pointer(@selector(getTIFFCompressionTypes:count:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("localizedNameForTIFFCompressionType:");
   arg2 = caml_wrap_pointer(@selector(localizedNameForTIFFCompressionType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("canBeCompressedUsing:");
   arg2 = caml_wrap_pointer(@selector(canBeCompressedUsing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("colorizeByMappingGray:toColor:blackMapping:whiteMapping:");
   arg2 = caml_wrap_pointer(@selector(colorizeByMappingGray:toColor:blackMapping:whiteMapping:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initForIncrementalLoad:");
   arg2 = caml_wrap_pointer(@selector(initForIncrementalLoad ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("incrementalLoadFromData:complete:");
   arg2 = caml_wrap_pointer(@selector(incrementalLoadFromData:complete:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setColor:atX:y:");
   arg2 = caml_wrap_pointer(@selector(setColor:atX:y:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("colorAtX:y:");
   arg2 = caml_wrap_pointer(@selector(colorAtX:y:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getPixel:atX:y:");
   arg2 = caml_wrap_pointer(@selector(getPixel:atX:y:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPixel:atX:y:");
   arg2 = caml_wrap_pointer(@selector(setPixel:atX:y:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
