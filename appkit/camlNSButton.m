// THIS FILE IS GENERATED - ALL CHANGES WILL BE LOST AT THE NEXT BUILD
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSButton.h>
value caml_init_NSButton(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSButton");
   arg2 = caml_wrap_id([NSButton class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("setSound:");
   arg2 = caml_wrap_pointer(@selector(setSound:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sound:");
   arg2 = caml_wrap_pointer(@selector(sound ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setShowsBorderOnlyWhileMouseInside:");
   arg2 = caml_wrap_pointer(@selector(setShowsBorderOnlyWhileMouseInside:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("showsBorderOnlyWhileMouseInside:");
   arg2 = caml_wrap_pointer(@selector(showsBorderOnlyWhileMouseInside ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAllowsMixedState:");
   arg2 = caml_wrap_pointer(@selector(setAllowsMixedState:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("allowsMixedState:");
   arg2 = caml_wrap_pointer(@selector(allowsMixedState ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setNextState:");
   arg2 = caml_wrap_pointer(@selector(setNextState ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setBezelStyle:");
   arg2 = caml_wrap_pointer(@selector(setBezelStyle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("bezelStyle:");
   arg2 = caml_wrap_pointer(@selector(bezelStyle ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("attributedTitle:");
   arg2 = caml_wrap_pointer(@selector(attributedTitle ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAttributedTitle:");
   arg2 = caml_wrap_pointer(@selector(setAttributedTitle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("attributedAlternateTitle:");
   arg2 = caml_wrap_pointer(@selector(attributedAlternateTitle ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAttributedAlternateTitle:");
   arg2 = caml_wrap_pointer(@selector(setAttributedAlternateTitle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTitleWithMnemonic:");
   arg2 = caml_wrap_pointer(@selector(setTitleWithMnemonic:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("title:");
   arg2 = caml_wrap_pointer(@selector(title ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTitle:");
   arg2 = caml_wrap_pointer(@selector(setTitle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("alternateTitle:");
   arg2 = caml_wrap_pointer(@selector(alternateTitle ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAlternateTitle:");
   arg2 = caml_wrap_pointer(@selector(setAlternateTitle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("image:");
   arg2 = caml_wrap_pointer(@selector(image ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setImage:");
   arg2 = caml_wrap_pointer(@selector(setImage:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("alternateImage:");
   arg2 = caml_wrap_pointer(@selector(alternateImage ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAlternateImage:");
   arg2 = caml_wrap_pointer(@selector(setAlternateImage:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("imagePosition:");
   arg2 = caml_wrap_pointer(@selector(imagePosition ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setImagePosition:");
   arg2 = caml_wrap_pointer(@selector(setImagePosition:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setButtonType:");
   arg2 = caml_wrap_pointer(@selector(setButtonType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("state:");
   arg2 = caml_wrap_pointer(@selector(state ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setState:");
   arg2 = caml_wrap_pointer(@selector(setState:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isBordered:");
   arg2 = caml_wrap_pointer(@selector(isBordered ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setBordered:");
   arg2 = caml_wrap_pointer(@selector(setBordered:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isTransparent:");
   arg2 = caml_wrap_pointer(@selector(isTransparent ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTransparent:");
   arg2 = caml_wrap_pointer(@selector(setTransparent:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPeriodicDelay:interval:");
   arg2 = caml_wrap_pointer(@selector(setPeriodicDelay:interval:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getPeriodicDelay:interval:");
   arg2 = caml_wrap_pointer(@selector(getPeriodicDelay:interval:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("keyEquivalent:");
   arg2 = caml_wrap_pointer(@selector(keyEquivalent ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setKeyEquivalent:");
   arg2 = caml_wrap_pointer(@selector(setKeyEquivalent:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("keyEquivalentModifierMask:");
   arg2 = caml_wrap_pointer(@selector(keyEquivalentModifierMask ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setKeyEquivalentModifierMask:");
   arg2 = caml_wrap_pointer(@selector(setKeyEquivalentModifierMask:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("highlight:");
   arg2 = caml_wrap_pointer(@selector(highlight:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("performKeyEquivalent:");
   arg2 = caml_wrap_pointer(@selector(performKeyEquivalent:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
