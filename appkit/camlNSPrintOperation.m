// THIS FILE IS GENERATED - ALL CHANGES WILL BE LOST AT THE NEXT BUILD
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSPrintOperation.h>
value caml_init_NSPrintOperation(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSPrintOperation");
   arg2 = caml_wrap_id([NSPrintOperation class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("setShowPanels:");
   arg2 = caml_wrap_pointer(@selector(setShowPanels:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("showPanels:");
   arg2 = caml_wrap_pointer(@selector(showPanels ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("printOperationWithView:");
   arg2 = caml_wrap_pointer(@selector(printOperationWithView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("printOperationWithView:printInfo:");
   arg2 = caml_wrap_pointer(@selector(printOperationWithView:printInfo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_EPSOperationWithView:insideRect:toData:");
   arg2 = caml_wrap_pointer(@selector(l_EPSOperationWithView:insideRect:toData:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_EPSOperationWithView:insideRect:toData:printInfo:");
   arg2 = caml_wrap_pointer(@selector(l_EPSOperationWithView:insideRect:toData:printInfo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_EPSOperationWithView:insideRect:toPath:printInfo:");
   arg2 = caml_wrap_pointer(@selector(l_EPSOperationWithView:insideRect:toPath:printInfo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_PDFOperationWithView:insideRect:toData:");
   arg2 = caml_wrap_pointer(@selector(l_PDFOperationWithView:insideRect:toData:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_PDFOperationWithView:insideRect:toData:printInfo:");
   arg2 = caml_wrap_pointer(@selector(l_PDFOperationWithView:insideRect:toData:printInfo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_PDFOperationWithView:insideRect:toPath:printInfo:");
   arg2 = caml_wrap_pointer(@selector(l_PDFOperationWithView:insideRect:toPath:printInfo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("currentOperation:");
   arg2 = caml_wrap_pointer(@selector(currentOperation ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setCurrentOperation:");
   arg2 = caml_wrap_pointer(@selector(setCurrentOperation:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isCopyingOperation:");
   arg2 = caml_wrap_pointer(@selector(isCopyingOperation ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("runOperation:");
   arg2 = caml_wrap_pointer(@selector(runOperation ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("runOperationModalForWindow:delegate:didRunSelector:contextInfo:");
   arg2 = caml_wrap_pointer(@selector(runOperationModalForWindow:delegate:didRunSelector:contextInfo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setCanSpawnSeparateThread:");
   arg2 = caml_wrap_pointer(@selector(setCanSpawnSeparateThread:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("canSpawnSeparateThread:");
   arg2 = caml_wrap_pointer(@selector(canSpawnSeparateThread ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setShowsPrintPanel:");
   arg2 = caml_wrap_pointer(@selector(setShowsPrintPanel:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("showsPrintPanel:");
   arg2 = caml_wrap_pointer(@selector(showsPrintPanel ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setShowsProgressPanel:");
   arg2 = caml_wrap_pointer(@selector(setShowsProgressPanel:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("showsProgressPanel:");
   arg2 = caml_wrap_pointer(@selector(showsProgressPanel ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPrintPanel:");
   arg2 = caml_wrap_pointer(@selector(setPrintPanel:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("printPanel:");
   arg2 = caml_wrap_pointer(@selector(printPanel ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAccessoryView:");
   arg2 = caml_wrap_pointer(@selector(setAccessoryView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("accessoryView:");
   arg2 = caml_wrap_pointer(@selector(accessoryView ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setJobStyleHint:");
   arg2 = caml_wrap_pointer(@selector(setJobStyleHint:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("jobStyleHint:");
   arg2 = caml_wrap_pointer(@selector(jobStyleHint ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPrintInfo:");
   arg2 = caml_wrap_pointer(@selector(setPrintInfo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("printInfo:");
   arg2 = caml_wrap_pointer(@selector(printInfo ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("view:");
   arg2 = caml_wrap_pointer(@selector(view ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("currentPage:");
   arg2 = caml_wrap_pointer(@selector(currentPage ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPageOrder:");
   arg2 = caml_wrap_pointer(@selector(setPageOrder:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("pageOrder:");
   arg2 = caml_wrap_pointer(@selector(pageOrder ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("context:");
   arg2 = caml_wrap_pointer(@selector(context ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("createContext:");
   arg2 = caml_wrap_pointer(@selector(createContext ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("destroyContext:");
   arg2 = caml_wrap_pointer(@selector(destroyContext ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("deliverResult:");
   arg2 = caml_wrap_pointer(@selector(deliverResult ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("cleanUpOperation:");
   arg2 = caml_wrap_pointer(@selector(cleanUpOperation ));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
