#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSColor.h>
value caml_init_NSColor(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("CIColor");
   arg2 = caml_wrap_id([CIColor class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("initWithColor:");
   arg2 = caml_wrap_pointer(@selector(initWithColor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSCoder");
   arg2 = caml_wrap_id([NSCoder class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("decodeNXColor:");
   arg2 = caml_wrap_pointer(@selector(decodeNXColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSColor");
   arg2 = caml_wrap_id([NSColor class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("colorWithCIColor:");
   arg2 = caml_wrap_pointer(@selector(colorWithCIColor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("colorWithCalibratedWhite:alpha:");
   arg2 = caml_wrap_pointer(@selector(colorWithCalibratedWhite:alpha:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("colorWithCalibratedHue:saturation:brightness:alpha:");
   arg2 = caml_wrap_pointer(@selector(colorWithCalibratedHue:saturation:brightness:alpha:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("colorWithCalibratedRed:green:blue:alpha:");
   arg2 = caml_wrap_pointer(@selector(colorWithCalibratedRed:green:blue:alpha:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("colorWithDeviceWhite:alpha:");
   arg2 = caml_wrap_pointer(@selector(colorWithDeviceWhite:alpha:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("colorWithDeviceHue:saturation:brightness:alpha:");
   arg2 = caml_wrap_pointer(@selector(colorWithDeviceHue:saturation:brightness:alpha:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("colorWithDeviceRed:green:blue:alpha:");
   arg2 = caml_wrap_pointer(@selector(colorWithDeviceRed:green:blue:alpha:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("colorWithDeviceCyan:magenta:yellow:black:alpha:");
   arg2 = caml_wrap_pointer(@selector(colorWithDeviceCyan:magenta:yellow:black:alpha:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("colorWithCatalogName:colorName:");
   arg2 = caml_wrap_pointer(@selector(colorWithCatalogName:colorName:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("colorWithColorSpace:components:count:");
   arg2 = caml_wrap_pointer(@selector(colorWithColorSpace:components:count:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("blackColor:");
   arg2 = caml_wrap_pointer(@selector(blackColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("darkGrayColor:");
   arg2 = caml_wrap_pointer(@selector(darkGrayColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("lightGrayColor:");
   arg2 = caml_wrap_pointer(@selector(lightGrayColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("whiteColor:");
   arg2 = caml_wrap_pointer(@selector(whiteColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("grayColor:");
   arg2 = caml_wrap_pointer(@selector(grayColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("redColor:");
   arg2 = caml_wrap_pointer(@selector(redColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("greenColor:");
   arg2 = caml_wrap_pointer(@selector(greenColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("blueColor:");
   arg2 = caml_wrap_pointer(@selector(blueColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("cyanColor:");
   arg2 = caml_wrap_pointer(@selector(cyanColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("yellowColor:");
   arg2 = caml_wrap_pointer(@selector(yellowColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("magentaColor:");
   arg2 = caml_wrap_pointer(@selector(magentaColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("orangeColor:");
   arg2 = caml_wrap_pointer(@selector(orangeColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("purpleColor:");
   arg2 = caml_wrap_pointer(@selector(purpleColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("brownColor:");
   arg2 = caml_wrap_pointer(@selector(brownColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("clearColor:");
   arg2 = caml_wrap_pointer(@selector(clearColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("controlShadowColor:");
   arg2 = caml_wrap_pointer(@selector(controlShadowColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("controlDarkShadowColor:");
   arg2 = caml_wrap_pointer(@selector(controlDarkShadowColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("controlColor:");
   arg2 = caml_wrap_pointer(@selector(controlColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("controlHighlightColor:");
   arg2 = caml_wrap_pointer(@selector(controlHighlightColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("controlLightHighlightColor:");
   arg2 = caml_wrap_pointer(@selector(controlLightHighlightColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("controlTextColor:");
   arg2 = caml_wrap_pointer(@selector(controlTextColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("controlBackgroundColor:");
   arg2 = caml_wrap_pointer(@selector(controlBackgroundColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectedControlColor:");
   arg2 = caml_wrap_pointer(@selector(selectedControlColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("secondarySelectedControlColor:");
   arg2 = caml_wrap_pointer(@selector(secondarySelectedControlColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectedControlTextColor:");
   arg2 = caml_wrap_pointer(@selector(selectedControlTextColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("disabledControlTextColor:");
   arg2 = caml_wrap_pointer(@selector(disabledControlTextColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textColor:");
   arg2 = caml_wrap_pointer(@selector(textColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textBackgroundColor:");
   arg2 = caml_wrap_pointer(@selector(textBackgroundColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectedTextColor:");
   arg2 = caml_wrap_pointer(@selector(selectedTextColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectedTextBackgroundColor:");
   arg2 = caml_wrap_pointer(@selector(selectedTextBackgroundColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("gridColor:");
   arg2 = caml_wrap_pointer(@selector(gridColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("keyboardFocusIndicatorColor:");
   arg2 = caml_wrap_pointer(@selector(keyboardFocusIndicatorColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("windowBackgroundColor:");
   arg2 = caml_wrap_pointer(@selector(windowBackgroundColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scrollBarColor:");
   arg2 = caml_wrap_pointer(@selector(scrollBarColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("knobColor:");
   arg2 = caml_wrap_pointer(@selector(knobColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectedKnobColor:");
   arg2 = caml_wrap_pointer(@selector(selectedKnobColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("windowFrameColor:");
   arg2 = caml_wrap_pointer(@selector(windowFrameColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("windowFrameTextColor:");
   arg2 = caml_wrap_pointer(@selector(windowFrameTextColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectedMenuItemColor:");
   arg2 = caml_wrap_pointer(@selector(selectedMenuItemColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectedMenuItemTextColor:");
   arg2 = caml_wrap_pointer(@selector(selectedMenuItemTextColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("highlightColor:");
   arg2 = caml_wrap_pointer(@selector(highlightColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("shadowColor:");
   arg2 = caml_wrap_pointer(@selector(shadowColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("headerColor:");
   arg2 = caml_wrap_pointer(@selector(headerColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("headerTextColor:");
   arg2 = caml_wrap_pointer(@selector(headerTextColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("alternateSelectedControlColor:");
   arg2 = caml_wrap_pointer(@selector(alternateSelectedControlColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("alternateSelectedControlTextColor:");
   arg2 = caml_wrap_pointer(@selector(alternateSelectedControlTextColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("controlAlternatingRowBackgroundColors:");
   arg2 = caml_wrap_pointer(@selector(controlAlternatingRowBackgroundColors ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("highlightWithLevel:");
   arg2 = caml_wrap_pointer(@selector(highlightWithLevel:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("shadowWithLevel:");
   arg2 = caml_wrap_pointer(@selector(shadowWithLevel:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("colorForControlTint:");
   arg2 = caml_wrap_pointer(@selector(colorForControlTint:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("currentControlTint:");
   arg2 = caml_wrap_pointer(@selector(currentControlTint ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("set:");
   arg2 = caml_wrap_pointer(@selector(set ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFill:");
   arg2 = caml_wrap_pointer(@selector(setFill ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setStroke:");
   arg2 = caml_wrap_pointer(@selector(setStroke ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("colorSpaceName:");
   arg2 = caml_wrap_pointer(@selector(colorSpaceName ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("colorUsingColorSpaceName:");
   arg2 = caml_wrap_pointer(@selector(colorUsingColorSpaceName:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("colorUsingColorSpaceName:device:");
   arg2 = caml_wrap_pointer(@selector(colorUsingColorSpaceName:device:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("colorUsingColorSpace:");
   arg2 = caml_wrap_pointer(@selector(colorUsingColorSpace:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("blendedColorWithFraction:ofColor:");
   arg2 = caml_wrap_pointer(@selector(blendedColorWithFraction:ofColor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("colorWithAlphaComponent:");
   arg2 = caml_wrap_pointer(@selector(colorWithAlphaComponent:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("catalogNameComponent:");
   arg2 = caml_wrap_pointer(@selector(catalogNameComponent ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("colorNameComponent:");
   arg2 = caml_wrap_pointer(@selector(colorNameComponent ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("localizedCatalogNameComponent:");
   arg2 = caml_wrap_pointer(@selector(localizedCatalogNameComponent ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("localizedColorNameComponent:");
   arg2 = caml_wrap_pointer(@selector(localizedColorNameComponent ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("redComponent:");
   arg2 = caml_wrap_pointer(@selector(redComponent ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("greenComponent:");
   arg2 = caml_wrap_pointer(@selector(greenComponent ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("blueComponent:");
   arg2 = caml_wrap_pointer(@selector(blueComponent ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getRed:green:blue:alpha:");
   arg2 = caml_wrap_pointer(@selector(getRed:green:blue:alpha:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("hueComponent:");
   arg2 = caml_wrap_pointer(@selector(hueComponent ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("saturationComponent:");
   arg2 = caml_wrap_pointer(@selector(saturationComponent ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("brightnessComponent:");
   arg2 = caml_wrap_pointer(@selector(brightnessComponent ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getHue:saturation:brightness:alpha:");
   arg2 = caml_wrap_pointer(@selector(getHue:saturation:brightness:alpha:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("whiteComponent:");
   arg2 = caml_wrap_pointer(@selector(whiteComponent ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getWhite:alpha:");
   arg2 = caml_wrap_pointer(@selector(getWhite:alpha:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("cyanComponent:");
   arg2 = caml_wrap_pointer(@selector(cyanComponent ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("magentaComponent:");
   arg2 = caml_wrap_pointer(@selector(magentaComponent ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("yellowComponent:");
   arg2 = caml_wrap_pointer(@selector(yellowComponent ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("blackComponent:");
   arg2 = caml_wrap_pointer(@selector(blackComponent ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getCyan:magenta:yellow:black:alpha:");
   arg2 = caml_wrap_pointer(@selector(getCyan:magenta:yellow:black:alpha:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("colorSpace:");
   arg2 = caml_wrap_pointer(@selector(colorSpace ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberOfComponents:");
   arg2 = caml_wrap_pointer(@selector(numberOfComponents ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getComponents:");
   arg2 = caml_wrap_pointer(@selector(getComponents:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("alphaComponent:");
   arg2 = caml_wrap_pointer(@selector(alphaComponent ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("colorFromPasteboard:");
   arg2 = caml_wrap_pointer(@selector(colorFromPasteboard:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("writeToPasteboard:");
   arg2 = caml_wrap_pointer(@selector(writeToPasteboard:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("colorWithPatternImage:");
   arg2 = caml_wrap_pointer(@selector(colorWithPatternImage:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("patternImage:");
   arg2 = caml_wrap_pointer(@selector(patternImage ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawSwatchInRect:");
   arg2 = caml_wrap_pointer(@selector(drawSwatchInRect:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setIgnoresAlpha:");
   arg2 = caml_wrap_pointer(@selector(setIgnoresAlpha:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("ignoresAlpha:");
   arg2 = caml_wrap_pointer(@selector(ignoresAlpha ));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
