#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSControl.h>
value caml_init_NSControl(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSControl");
   arg2 = caml_wrap_id([NSControl class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("attributedStringValue:");
   arg2 = caml_wrap_pointer(@selector(attributedStringValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAttributedStringValue:");
   arg2 = caml_wrap_pointer(@selector(setAttributedStringValue:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("performClick:");
   arg2 = caml_wrap_pointer(@selector(performClick:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setRefusesFirstResponder:");
   arg2 = caml_wrap_pointer(@selector(setRefusesFirstResponder:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("refusesFirstResponder:");
   arg2 = caml_wrap_pointer(@selector(refusesFirstResponder ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setCellClass:");
   arg2 = caml_wrap_pointer(@selector(setCellClass:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("cellClass:");
   arg2 = caml_wrap_pointer(@selector(cellClass ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithFrame:");
   arg2 = caml_wrap_pointer(@selector(initWithFrame:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sizeToFit:");
   arg2 = caml_wrap_pointer(@selector(sizeToFit ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("calcSize:");
   arg2 = caml_wrap_pointer(@selector(calcSize ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("cell:");
   arg2 = caml_wrap_pointer(@selector(cell ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setCell:");
   arg2 = caml_wrap_pointer(@selector(setCell:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectedCell:");
   arg2 = caml_wrap_pointer(@selector(selectedCell ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("target:");
   arg2 = caml_wrap_pointer(@selector(target ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTarget:");
   arg2 = caml_wrap_pointer(@selector(setTarget:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("action:");
   arg2 = caml_wrap_pointer(@selector(action ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAction:");
   arg2 = caml_wrap_pointer(@selector(setAction:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tag:");
   arg2 = caml_wrap_pointer(@selector(tag ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTag:");
   arg2 = caml_wrap_pointer(@selector(setTag:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectedTag:");
   arg2 = caml_wrap_pointer(@selector(selectedTag ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setIgnoresMultiClick:");
   arg2 = caml_wrap_pointer(@selector(setIgnoresMultiClick:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("ignoresMultiClick:");
   arg2 = caml_wrap_pointer(@selector(ignoresMultiClick ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sendActionOn:");
   arg2 = caml_wrap_pointer(@selector(sendActionOn:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isContinuous:");
   arg2 = caml_wrap_pointer(@selector(isContinuous ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setContinuous:");
   arg2 = caml_wrap_pointer(@selector(setContinuous:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isEnabled:");
   arg2 = caml_wrap_pointer(@selector(isEnabled ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setEnabled:");
   arg2 = caml_wrap_pointer(@selector(setEnabled:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFloatingPointFormat:left:right:");
   arg2 = caml_wrap_pointer(@selector(setFloatingPointFormat:left:right:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("alignment:");
   arg2 = caml_wrap_pointer(@selector(alignment ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAlignment:");
   arg2 = caml_wrap_pointer(@selector(setAlignment:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("font:");
   arg2 = caml_wrap_pointer(@selector(font ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFont:");
   arg2 = caml_wrap_pointer(@selector(setFont:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFormatter:");
   arg2 = caml_wrap_pointer(@selector(setFormatter:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("formatter:");
   arg2 = caml_wrap_pointer(@selector(formatter ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setObjectValue:");
   arg2 = caml_wrap_pointer(@selector(setObjectValue:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setStringValue:");
   arg2 = caml_wrap_pointer(@selector(setStringValue:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setIntValue:");
   arg2 = caml_wrap_pointer(@selector(setIntValue:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFloatValue:");
   arg2 = caml_wrap_pointer(@selector(setFloatValue:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDoubleValue:");
   arg2 = caml_wrap_pointer(@selector(setDoubleValue:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("objectValue:");
   arg2 = caml_wrap_pointer(@selector(objectValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stringValue:");
   arg2 = caml_wrap_pointer(@selector(stringValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("intValue:");
   arg2 = caml_wrap_pointer(@selector(intValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("floatValue:");
   arg2 = caml_wrap_pointer(@selector(floatValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("doubleValue:");
   arg2 = caml_wrap_pointer(@selector(doubleValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setNeedsDisplay:");
   arg2 = caml_wrap_pointer(@selector(setNeedsDisplay ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("updateCell:");
   arg2 = caml_wrap_pointer(@selector(updateCell:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("updateCellInside:");
   arg2 = caml_wrap_pointer(@selector(updateCellInside:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawCellInside:");
   arg2 = caml_wrap_pointer(@selector(drawCellInside:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawCell:");
   arg2 = caml_wrap_pointer(@selector(drawCell:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectCell:");
   arg2 = caml_wrap_pointer(@selector(selectCell:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sendAction:l_to:");
   arg2 = caml_wrap_pointer(@selector(sendAction:l_to:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("takeIntValueFrom:");
   arg2 = caml_wrap_pointer(@selector(takeIntValueFrom:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("takeFloatValueFrom:");
   arg2 = caml_wrap_pointer(@selector(takeFloatValueFrom:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("takeDoubleValueFrom:");
   arg2 = caml_wrap_pointer(@selector(takeDoubleValueFrom:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("takeStringValueFrom:");
   arg2 = caml_wrap_pointer(@selector(takeStringValueFrom:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("takeObjectValueFrom:");
   arg2 = caml_wrap_pointer(@selector(takeObjectValueFrom:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("currentEditor:");
   arg2 = caml_wrap_pointer(@selector(currentEditor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("abortEditing:");
   arg2 = caml_wrap_pointer(@selector(abortEditing ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("validateEditing:");
   arg2 = caml_wrap_pointer(@selector(validateEditing ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("mouseDown:");
   arg2 = caml_wrap_pointer(@selector(mouseDown:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("baseWritingDirection:");
   arg2 = caml_wrap_pointer(@selector(baseWritingDirection ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setBaseWritingDirection:");
   arg2 = caml_wrap_pointer(@selector(setBaseWritingDirection:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSObject");
   arg2 = caml_wrap_id([NSObject class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("control:textShouldBeginEditing:");
   arg2 = caml_wrap_pointer(@selector(control:textShouldBeginEditing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("control:textShouldEndEditing:");
   arg2 = caml_wrap_pointer(@selector(control:textShouldEndEditing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("control:didFailToFormatString:errorDescription:");
   arg2 = caml_wrap_pointer(@selector(control:didFailToFormatString:errorDescription:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("control:didFailToValidatePartialString:errorDescription:");
   arg2 = caml_wrap_pointer(@selector(control:didFailToValidatePartialString:errorDescription:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("control:isValidObject:");
   arg2 = caml_wrap_pointer(@selector(control:isValidObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("control:textView:doCommandBySelector:");
   arg2 = caml_wrap_pointer(@selector(control:textView:doCommandBySelector:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("control:textView:completions:forPartialWordRange:indexOfSelectedItem:");
   arg2 = caml_wrap_pointer(@selector(control:textView:completions:forPartialWordRange:indexOfSelectedItem:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("controlTextDidBeginEditing:");
   arg2 = caml_wrap_pointer(@selector(controlTextDidBeginEditing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("controlTextDidEndEditing:");
   arg2 = caml_wrap_pointer(@selector(controlTextDidEndEditing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("controlTextDidChange:");
   arg2 = caml_wrap_pointer(@selector(controlTextDidChange:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
