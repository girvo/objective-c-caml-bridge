// THIS FILE IS GENERATED - ALL CHANGES WILL BE LOST AT THE NEXT BUILD
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSMenu.h>
value caml_init_NSMenu(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSMenu");
   arg2 = caml_wrap_id([NSMenu class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("submenuAction:");
   arg2 = caml_wrap_pointer(@selector(submenuAction:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMenuZone:");
   arg2 = caml_wrap_pointer(@selector(setMenuZone:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("menuZone:");
   arg2 = caml_wrap_pointer(@selector(menuZone ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("popUpContextMenu:withEvent:forView:");
   arg2 = caml_wrap_pointer(@selector(popUpContextMenu:withEvent:forView:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("popUpContextMenu:withEvent:forView:withFont:");
   arg2 = caml_wrap_pointer(@selector(popUpContextMenu:withEvent:forView:withFont:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMenuBarVisible:");
   arg2 = caml_wrap_pointer(@selector(setMenuBarVisible:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("menuBarVisible:");
   arg2 = caml_wrap_pointer(@selector(menuBarVisible ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithTitle:");
   arg2 = caml_wrap_pointer(@selector(initWithTitle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTitle:");
   arg2 = caml_wrap_pointer(@selector(setTitle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("title:");
   arg2 = caml_wrap_pointer(@selector(title ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setSupermenu:");
   arg2 = caml_wrap_pointer(@selector(setSupermenu:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("supermenu:");
   arg2 = caml_wrap_pointer(@selector(supermenu ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("insertItem:atIndex:");
   arg2 = caml_wrap_pointer(@selector(insertItem:atIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addItem:");
   arg2 = caml_wrap_pointer(@selector(addItem:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("insertItemWithTitle:action:keyEquivalent:atIndex:");
   arg2 = caml_wrap_pointer(@selector(insertItemWithTitle:action:keyEquivalent:atIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addItemWithTitle:action:keyEquivalent:");
   arg2 = caml_wrap_pointer(@selector(addItemWithTitle:action:keyEquivalent:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeItemAtIndex:");
   arg2 = caml_wrap_pointer(@selector(removeItemAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeItem:");
   arg2 = caml_wrap_pointer(@selector(removeItem:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setSubmenu:forItem:");
   arg2 = caml_wrap_pointer(@selector(setSubmenu:forItem:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("itemArray:");
   arg2 = caml_wrap_pointer(@selector(itemArray ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberOfItems:");
   arg2 = caml_wrap_pointer(@selector(numberOfItems ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("indexOfItem:");
   arg2 = caml_wrap_pointer(@selector(indexOfItem:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("indexOfItemWithTitle:");
   arg2 = caml_wrap_pointer(@selector(indexOfItemWithTitle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("indexOfItemWithTag:");
   arg2 = caml_wrap_pointer(@selector(indexOfItemWithTag:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("indexOfItemWithRepresentedObject:");
   arg2 = caml_wrap_pointer(@selector(indexOfItemWithRepresentedObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("indexOfItemWithSubmenu:");
   arg2 = caml_wrap_pointer(@selector(indexOfItemWithSubmenu:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("indexOfItemWithTarget:andAction:");
   arg2 = caml_wrap_pointer(@selector(indexOfItemWithTarget:andAction:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("itemAtIndex:");
   arg2 = caml_wrap_pointer(@selector(itemAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("itemWithTitle:");
   arg2 = caml_wrap_pointer(@selector(itemWithTitle:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("itemWithTag:");
   arg2 = caml_wrap_pointer(@selector(itemWithTag:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAutoenablesItems:");
   arg2 = caml_wrap_pointer(@selector(setAutoenablesItems:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("autoenablesItems:");
   arg2 = caml_wrap_pointer(@selector(autoenablesItems ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("performKeyEquivalent:");
   arg2 = caml_wrap_pointer(@selector(performKeyEquivalent:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("update:");
   arg2 = caml_wrap_pointer(@selector(update ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMenuChangedMessagesEnabled:");
   arg2 = caml_wrap_pointer(@selector(setMenuChangedMessagesEnabled:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("menuChangedMessagesEnabled:");
   arg2 = caml_wrap_pointer(@selector(menuChangedMessagesEnabled ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("itemChanged:");
   arg2 = caml_wrap_pointer(@selector(itemChanged:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("helpRequested:");
   arg2 = caml_wrap_pointer(@selector(helpRequested:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMenuRepresentation:");
   arg2 = caml_wrap_pointer(@selector(setMenuRepresentation:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("menuRepresentation:");
   arg2 = caml_wrap_pointer(@selector(menuRepresentation ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setContextMenuRepresentation:");
   arg2 = caml_wrap_pointer(@selector(setContextMenuRepresentation:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("contextMenuRepresentation:");
   arg2 = caml_wrap_pointer(@selector(contextMenuRepresentation ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTearOffMenuRepresentation:");
   arg2 = caml_wrap_pointer(@selector(setTearOffMenuRepresentation:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("tearOffMenuRepresentation:");
   arg2 = caml_wrap_pointer(@selector(tearOffMenuRepresentation ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isTornOff:");
   arg2 = caml_wrap_pointer(@selector(isTornOff ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("attachedMenu:");
   arg2 = caml_wrap_pointer(@selector(attachedMenu ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isAttached:");
   arg2 = caml_wrap_pointer(@selector(isAttached ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sizeToFit:");
   arg2 = caml_wrap_pointer(@selector(sizeToFit ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("locationForSubmenu:");
   arg2 = caml_wrap_pointer(@selector(locationForSubmenu:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("performActionForItemAtIndex:");
   arg2 = caml_wrap_pointer(@selector(performActionForItemAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDelegate:");
   arg2 = caml_wrap_pointer(@selector(setDelegate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("delegate:");
   arg2 = caml_wrap_pointer(@selector(delegate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("menuBarHeight:");
   arg2 = caml_wrap_pointer(@selector(menuBarHeight ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSObject");
   arg2 = caml_wrap_id([NSObject class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("menuNeedsUpdate:");
   arg2 = caml_wrap_pointer(@selector(menuNeedsUpdate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberOfItemsInMenu:");
   arg2 = caml_wrap_pointer(@selector(numberOfItemsInMenu:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("menu:updateItem:atIndex:shouldCancel:");
   arg2 = caml_wrap_pointer(@selector(menu:updateItem:atIndex:shouldCancel:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("menuHasKeyEquivalent:forEvent:target:action:");
   arg2 = caml_wrap_pointer(@selector(menuHasKeyEquivalent:forEvent:target:action:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("validateMenuItem:");
   arg2 = caml_wrap_pointer(@selector(validateMenuItem:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
