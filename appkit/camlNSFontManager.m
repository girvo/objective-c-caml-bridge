// THIS FILE IS GENERATED - ALL CHANGES WILL BE LOST AT THE NEXT BUILD
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSFontManager.h>
value caml_init_NSFontManager(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSFontManager");
   arg2 = caml_wrap_id([NSFontManager class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("fontNamed:hasTraits:");
   arg2 = caml_wrap_pointer(@selector(fontNamed:hasTraits:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("availableFontNamesWithTraits:");
   arg2 = caml_wrap_pointer(@selector(availableFontNamesWithTraits:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addFontTrait:");
   arg2 = caml_wrap_pointer(@selector(addFontTrait:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeFontTrait:");
   arg2 = caml_wrap_pointer(@selector(removeFontTrait:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("modifyFontViaPanel:");
   arg2 = caml_wrap_pointer(@selector(modifyFontViaPanel:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("modifyFont:");
   arg2 = caml_wrap_pointer(@selector(modifyFont:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("orderFrontFontPanel:");
   arg2 = caml_wrap_pointer(@selector(orderFrontFontPanel:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("orderFrontStylesPanel:");
   arg2 = caml_wrap_pointer(@selector(orderFrontStylesPanel:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFontPanelFactory:");
   arg2 = caml_wrap_pointer(@selector(setFontPanelFactory:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFontManagerFactory:");
   arg2 = caml_wrap_pointer(@selector(setFontManagerFactory:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sharedFontManager:");
   arg2 = caml_wrap_pointer(@selector(sharedFontManager ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isMultiple:");
   arg2 = caml_wrap_pointer(@selector(isMultiple ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectedFont:");
   arg2 = caml_wrap_pointer(@selector(selectedFont ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setSelectedFont:isMultiple:");
   arg2 = caml_wrap_pointer(@selector(setSelectedFont:isMultiple:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFontMenu:");
   arg2 = caml_wrap_pointer(@selector(setFontMenu:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fontMenu:");
   arg2 = caml_wrap_pointer(@selector(fontMenu:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fontPanel:");
   arg2 = caml_wrap_pointer(@selector(fontPanel:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fontWithFamily:traits:weight:size:");
   arg2 = caml_wrap_pointer(@selector(fontWithFamily:traits:weight:size:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("traitsOfFont:");
   arg2 = caml_wrap_pointer(@selector(traitsOfFont:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("weightOfFont:");
   arg2 = caml_wrap_pointer(@selector(weightOfFont:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("availableFonts:");
   arg2 = caml_wrap_pointer(@selector(availableFonts ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("availableFontFamilies:");
   arg2 = caml_wrap_pointer(@selector(availableFontFamilies ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("availableMembersOfFontFamily:");
   arg2 = caml_wrap_pointer(@selector(availableMembersOfFontFamily:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("convertFont:");
   arg2 = caml_wrap_pointer(@selector(convertFont:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("convertFont:toSize:");
   arg2 = caml_wrap_pointer(@selector(convertFont:toSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("convertFont:toFace:");
   arg2 = caml_wrap_pointer(@selector(convertFont:toFace:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("convertFont:toFamily:");
   arg2 = caml_wrap_pointer(@selector(convertFont:toFamily:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("convertFont:toHaveTrait:");
   arg2 = caml_wrap_pointer(@selector(convertFont:toHaveTrait:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("convertFont:toNotHaveTrait:");
   arg2 = caml_wrap_pointer(@selector(convertFont:toNotHaveTrait:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("convertWeight:ofFont:");
   arg2 = caml_wrap_pointer(@selector(convertWeight:ofFont:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isEnabled:");
   arg2 = caml_wrap_pointer(@selector(isEnabled ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setEnabled:");
   arg2 = caml_wrap_pointer(@selector(setEnabled:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("action:");
   arg2 = caml_wrap_pointer(@selector(action ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAction:");
   arg2 = caml_wrap_pointer(@selector(setAction:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sendAction:");
   arg2 = caml_wrap_pointer(@selector(sendAction ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDelegate:");
   arg2 = caml_wrap_pointer(@selector(setDelegate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("delegate:");
   arg2 = caml_wrap_pointer(@selector(delegate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("localizedNameForFamily:face:");
   arg2 = caml_wrap_pointer(@selector(localizedNameForFamily:face:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setSelectedAttributes:isMultiple:");
   arg2 = caml_wrap_pointer(@selector(setSelectedAttributes:isMultiple:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("convertAttributes:");
   arg2 = caml_wrap_pointer(@selector(convertAttributes:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("availableFontNamesMatchingFontDescriptor:");
   arg2 = caml_wrap_pointer(@selector(availableFontNamesMatchingFontDescriptor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("collectionNames:");
   arg2 = caml_wrap_pointer(@selector(collectionNames ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fontDescriptorsInCollection:");
   arg2 = caml_wrap_pointer(@selector(fontDescriptorsInCollection:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addCollection:options:");
   arg2 = caml_wrap_pointer(@selector(addCollection:options:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeCollection:");
   arg2 = caml_wrap_pointer(@selector(removeCollection:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addFontDescriptors:toCollection:");
   arg2 = caml_wrap_pointer(@selector(addFontDescriptors:toCollection:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeFontDescriptor:fromCollection:");
   arg2 = caml_wrap_pointer(@selector(removeFontDescriptor:fromCollection:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSObject");
   arg2 = caml_wrap_id([NSObject class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("changeFont:");
   arg2 = caml_wrap_pointer(@selector(changeFont:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fontManager:willIncludeFont:");
   arg2 = caml_wrap_pointer(@selector(fontManager:willIncludeFont:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
