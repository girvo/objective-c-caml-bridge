#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/AppKit.framework/Headers/NSText.h>
value caml_init_NSText(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSText");
   arg2 = caml_wrap_id([NSText class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("string:");
   arg2 = caml_wrap_pointer(@selector(string ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setString:");
   arg2 = caml_wrap_pointer(@selector(setString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("replaceCharactersInRange:withString:");
   arg2 = caml_wrap_pointer(@selector(replaceCharactersInRange:withString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("replaceCharactersInRange:withRTF:");
   arg2 = caml_wrap_pointer(@selector(replaceCharactersInRange:withRTF:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("replaceCharactersInRange:withRTFD:");
   arg2 = caml_wrap_pointer(@selector(replaceCharactersInRange:withRTFD:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_RTFFromRange:");
   arg2 = caml_wrap_pointer(@selector(l_RTFFromRange:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_RTFDFromRange:");
   arg2 = caml_wrap_pointer(@selector(l_RTFDFromRange:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("writeRTFDToFile:atomically:");
   arg2 = caml_wrap_pointer(@selector(writeRTFDToFile:atomically:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("readRTFDFromFile:");
   arg2 = caml_wrap_pointer(@selector(readRTFDFromFile:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("delegate:");
   arg2 = caml_wrap_pointer(@selector(delegate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDelegate:");
   arg2 = caml_wrap_pointer(@selector(setDelegate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isEditable:");
   arg2 = caml_wrap_pointer(@selector(isEditable ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setEditable:");
   arg2 = caml_wrap_pointer(@selector(setEditable:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isSelectable:");
   arg2 = caml_wrap_pointer(@selector(isSelectable ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setSelectable:");
   arg2 = caml_wrap_pointer(@selector(setSelectable:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isRichText:");
   arg2 = caml_wrap_pointer(@selector(isRichText ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setRichText:");
   arg2 = caml_wrap_pointer(@selector(setRichText:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("importsGraphics:");
   arg2 = caml_wrap_pointer(@selector(importsGraphics ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setImportsGraphics:");
   arg2 = caml_wrap_pointer(@selector(setImportsGraphics:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setBackgroundColor:");
   arg2 = caml_wrap_pointer(@selector(setBackgroundColor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("backgroundColor:");
   arg2 = caml_wrap_pointer(@selector(backgroundColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDrawsBackground:");
   arg2 = caml_wrap_pointer(@selector(setDrawsBackground:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("drawsBackground:");
   arg2 = caml_wrap_pointer(@selector(drawsBackground ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFont:");
   arg2 = caml_wrap_pointer(@selector(setFont:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("font:");
   arg2 = caml_wrap_pointer(@selector(font ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTextColor:");
   arg2 = caml_wrap_pointer(@selector(setTextColor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textColor:");
   arg2 = caml_wrap_pointer(@selector(textColor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("alignment:");
   arg2 = caml_wrap_pointer(@selector(alignment ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAlignment:");
   arg2 = caml_wrap_pointer(@selector(setAlignment:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("baseWritingDirection:");
   arg2 = caml_wrap_pointer(@selector(baseWritingDirection ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setBaseWritingDirection:");
   arg2 = caml_wrap_pointer(@selector(setBaseWritingDirection:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFieldEditor:");
   arg2 = caml_wrap_pointer(@selector(setFieldEditor:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isFieldEditor:");
   arg2 = caml_wrap_pointer(@selector(isFieldEditor ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTextColor:range:");
   arg2 = caml_wrap_pointer(@selector(setTextColor:range:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFont:range:");
   arg2 = caml_wrap_pointer(@selector(setFont:range:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("usesFontPanel:");
   arg2 = caml_wrap_pointer(@selector(usesFontPanel ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setUsesFontPanel:");
   arg2 = caml_wrap_pointer(@selector(setUsesFontPanel:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("maxSize:");
   arg2 = caml_wrap_pointer(@selector(maxSize ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMaxSize:");
   arg2 = caml_wrap_pointer(@selector(setMaxSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("minSize:");
   arg2 = caml_wrap_pointer(@selector(minSize ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMinSize:");
   arg2 = caml_wrap_pointer(@selector(setMinSize:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isHorizontallyResizable:");
   arg2 = caml_wrap_pointer(@selector(isHorizontallyResizable ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setHorizontallyResizable:");
   arg2 = caml_wrap_pointer(@selector(setHorizontallyResizable:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isVerticallyResizable:");
   arg2 = caml_wrap_pointer(@selector(isVerticallyResizable ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setVerticallyResizable:");
   arg2 = caml_wrap_pointer(@selector(setVerticallyResizable:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sizeToFit:");
   arg2 = caml_wrap_pointer(@selector(sizeToFit ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("copy:");
   arg2 = caml_wrap_pointer(@selector(copy:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("copyFont:");
   arg2 = caml_wrap_pointer(@selector(copyFont:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("copyRuler:");
   arg2 = caml_wrap_pointer(@selector(copyRuler:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("cut:");
   arg2 = caml_wrap_pointer(@selector(cut:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("delete:");
   arg2 = caml_wrap_pointer(@selector(delete:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("paste:");
   arg2 = caml_wrap_pointer(@selector(paste:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("pasteFont:");
   arg2 = caml_wrap_pointer(@selector(pasteFont:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("pasteRuler:");
   arg2 = caml_wrap_pointer(@selector(pasteRuler:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectAll:");
   arg2 = caml_wrap_pointer(@selector(selectAll:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("changeFont:");
   arg2 = caml_wrap_pointer(@selector(changeFont:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("alignLeft:");
   arg2 = caml_wrap_pointer(@selector(alignLeft:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("alignRight:");
   arg2 = caml_wrap_pointer(@selector(alignRight:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("alignCenter:");
   arg2 = caml_wrap_pointer(@selector(alignCenter:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("subscript:");
   arg2 = caml_wrap_pointer(@selector(subscript:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("superscript:");
   arg2 = caml_wrap_pointer(@selector(superscript:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("underline:");
   arg2 = caml_wrap_pointer(@selector(underline:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("unscript:");
   arg2 = caml_wrap_pointer(@selector(unscript:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("showGuessPanel:");
   arg2 = caml_wrap_pointer(@selector(showGuessPanel:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("checkSpelling:");
   arg2 = caml_wrap_pointer(@selector(checkSpelling:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("toggleRuler:");
   arg2 = caml_wrap_pointer(@selector(toggleRuler:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isRulerVisible:");
   arg2 = caml_wrap_pointer(@selector(isRulerVisible ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("selectedRange:");
   arg2 = caml_wrap_pointer(@selector(selectedRange ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setSelectedRange:");
   arg2 = caml_wrap_pointer(@selector(setSelectedRange:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scrollRangeToVisible:");
   arg2 = caml_wrap_pointer(@selector(scrollRangeToVisible:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSObject");
   arg2 = caml_wrap_id([NSObject class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("textShouldBeginEditing:");
   arg2 = caml_wrap_pointer(@selector(textShouldBeginEditing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textShouldEndEditing:");
   arg2 = caml_wrap_pointer(@selector(textShouldEndEditing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textDidBeginEditing:");
   arg2 = caml_wrap_pointer(@selector(textDidBeginEditing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textDidEndEditing:");
   arg2 = caml_wrap_pointer(@selector(textDidEndEditing:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("textDidChange:");
   arg2 = caml_wrap_pointer(@selector(textDidChange:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
