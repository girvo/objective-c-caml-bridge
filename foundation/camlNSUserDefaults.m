// THIS FILE IS GENERATED - ALL CHANGES WILL BE LOST AT THE NEXT BUILD
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/Foundation.framework/Headers/NSUserDefaults.h>
value caml_init_NSUserDefaults(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSUserDefaults");
   arg2 = caml_wrap_id([NSUserDefaults class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("standardUserDefaults:");
   arg2 = caml_wrap_pointer(@selector(standardUserDefaults ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("resetStandardUserDefaults:");
   arg2 = caml_wrap_pointer(@selector(resetStandardUserDefaults ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("init:");
   arg2 = caml_wrap_pointer(@selector(init ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithUser:");
   arg2 = caml_wrap_pointer(@selector(initWithUser:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("objectForKey:");
   arg2 = caml_wrap_pointer(@selector(objectForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setObject:forKey:");
   arg2 = caml_wrap_pointer(@selector(setObject:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeObjectForKey:");
   arg2 = caml_wrap_pointer(@selector(removeObjectForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stringForKey:");
   arg2 = caml_wrap_pointer(@selector(stringForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("arrayForKey:");
   arg2 = caml_wrap_pointer(@selector(arrayForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dictionaryForKey:");
   arg2 = caml_wrap_pointer(@selector(dictionaryForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dataForKey:");
   arg2 = caml_wrap_pointer(@selector(dataForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stringArrayForKey:");
   arg2 = caml_wrap_pointer(@selector(stringArrayForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("integerForKey:");
   arg2 = caml_wrap_pointer(@selector(integerForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("floatForKey:");
   arg2 = caml_wrap_pointer(@selector(floatForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("boolForKey:");
   arg2 = caml_wrap_pointer(@selector(boolForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setInteger:forKey:");
   arg2 = caml_wrap_pointer(@selector(setInteger:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setFloat:forKey:");
   arg2 = caml_wrap_pointer(@selector(setFloat:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setBool:forKey:");
   arg2 = caml_wrap_pointer(@selector(setBool:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("registerDefaults:");
   arg2 = caml_wrap_pointer(@selector(registerDefaults:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addSuiteNamed:");
   arg2 = caml_wrap_pointer(@selector(addSuiteNamed:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeSuiteNamed:");
   arg2 = caml_wrap_pointer(@selector(removeSuiteNamed:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dictionaryRepresentation:");
   arg2 = caml_wrap_pointer(@selector(dictionaryRepresentation ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("volatileDomainNames:");
   arg2 = caml_wrap_pointer(@selector(volatileDomainNames ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("volatileDomainForName:");
   arg2 = caml_wrap_pointer(@selector(volatileDomainForName:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setVolatileDomain:forName:");
   arg2 = caml_wrap_pointer(@selector(setVolatileDomain:forName:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeVolatileDomainForName:");
   arg2 = caml_wrap_pointer(@selector(removeVolatileDomainForName:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("persistentDomainNames:");
   arg2 = caml_wrap_pointer(@selector(persistentDomainNames ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("persistentDomainForName:");
   arg2 = caml_wrap_pointer(@selector(persistentDomainForName:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPersistentDomain:forName:");
   arg2 = caml_wrap_pointer(@selector(setPersistentDomain:forName:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removePersistentDomainForName:");
   arg2 = caml_wrap_pointer(@selector(removePersistentDomainForName:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("synchronize:");
   arg2 = caml_wrap_pointer(@selector(synchronize ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("objectIsForcedForKey:");
   arg2 = caml_wrap_pointer(@selector(objectIsForcedForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("objectIsForcedForKey:inDomain:");
   arg2 = caml_wrap_pointer(@selector(objectIsForcedForKey:inDomain:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
