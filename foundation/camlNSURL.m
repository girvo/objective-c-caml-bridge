#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/Foundation.framework/Headers/NSURL.h>
value caml_init_NSURL(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSString");
   arg2 = caml_wrap_id([NSString class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("stringByAddingPercentEscapesUsingEncoding:");
   arg2 = caml_wrap_pointer(@selector(stringByAddingPercentEscapesUsingEncoding:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stringByReplacingPercentEscapesUsingEncoding:");
   arg2 = caml_wrap_pointer(@selector(stringByReplacingPercentEscapesUsingEncoding:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSURL");
   arg2 = caml_wrap_id([NSURL class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("resourceDataUsingCache:");
   arg2 = caml_wrap_pointer(@selector(resourceDataUsingCache:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("loadResourceDataNotifyingClient:usingCache:");
   arg2 = caml_wrap_pointer(@selector(loadResourceDataNotifyingClient:usingCache:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("propertyForKey:");
   arg2 = caml_wrap_pointer(@selector(propertyForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setResourceData:");
   arg2 = caml_wrap_pointer(@selector(setResourceData:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setProperty:forKey:");
   arg2 = caml_wrap_pointer(@selector(setProperty:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_URLHandleUsingCache:");
   arg2 = caml_wrap_pointer(@selector(l_URLHandleUsingCache:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithScheme:host:path:");
   arg2 = caml_wrap_pointer(@selector(initWithScheme:host:path:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initFileURLWithPath:");
   arg2 = caml_wrap_pointer(@selector(initFileURLWithPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileURLWithPath:");
   arg2 = caml_wrap_pointer(@selector(fileURLWithPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithString:");
   arg2 = caml_wrap_pointer(@selector(initWithString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithString:relativeToURL:");
   arg2 = caml_wrap_pointer(@selector(initWithString:relativeToURL:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_URLWithString:");
   arg2 = caml_wrap_pointer(@selector(l_URLWithString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_URLWithString:relativeToURL:");
   arg2 = caml_wrap_pointer(@selector(l_URLWithString:relativeToURL:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("absoluteString:");
   arg2 = caml_wrap_pointer(@selector(absoluteString ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("relativeString:");
   arg2 = caml_wrap_pointer(@selector(relativeString ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("baseURL:");
   arg2 = caml_wrap_pointer(@selector(baseURL ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("absoluteURL:");
   arg2 = caml_wrap_pointer(@selector(absoluteURL ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scheme:");
   arg2 = caml_wrap_pointer(@selector(scheme ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("resourceSpecifier:");
   arg2 = caml_wrap_pointer(@selector(resourceSpecifier ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("host:");
   arg2 = caml_wrap_pointer(@selector(host ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("port:");
   arg2 = caml_wrap_pointer(@selector(port ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("user:");
   arg2 = caml_wrap_pointer(@selector(user ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("password:");
   arg2 = caml_wrap_pointer(@selector(password ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("path:");
   arg2 = caml_wrap_pointer(@selector(path ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fragment:");
   arg2 = caml_wrap_pointer(@selector(fragment ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("parameterString:");
   arg2 = caml_wrap_pointer(@selector(parameterString ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("query:");
   arg2 = caml_wrap_pointer(@selector(query ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("relativePath:");
   arg2 = caml_wrap_pointer(@selector(relativePath ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isFileURL:");
   arg2 = caml_wrap_pointer(@selector(isFileURL ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("standardizedURL:");
   arg2 = caml_wrap_pointer(@selector(standardizedURL ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSObject");
   arg2 = caml_wrap_id([NSObject class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("l_URL:resourceDataDidBecomeAvailable:");
   arg2 = caml_wrap_pointer(@selector(l_URL:resourceDataDidBecomeAvailable:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_URLResourceDidFinishLoading:");
   arg2 = caml_wrap_pointer(@selector(l_URLResourceDidFinishLoading:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_URLResourceDidCancelLoading:");
   arg2 = caml_wrap_pointer(@selector(l_URLResourceDidCancelLoading:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_URL:resourceDidFailLoadingWithReason:");
   arg2 = caml_wrap_pointer(@selector(l_URL:resourceDidFailLoadingWithReason:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
