#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/Foundation.framework/Headers/NSFileManager.h>
value caml_init_NSFileManager(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSDictionary");
   arg2 = caml_wrap_id([NSDictionary class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("fileSize:");
   arg2 = caml_wrap_pointer(@selector(fileSize ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileModificationDate:");
   arg2 = caml_wrap_pointer(@selector(fileModificationDate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileType:");
   arg2 = caml_wrap_pointer(@selector(fileType ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("filePosixPermissions:");
   arg2 = caml_wrap_pointer(@selector(filePosixPermissions ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileOwnerAccountName:");
   arg2 = caml_wrap_pointer(@selector(fileOwnerAccountName ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileGroupOwnerAccountName:");
   arg2 = caml_wrap_pointer(@selector(fileGroupOwnerAccountName ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileSystemNumber:");
   arg2 = caml_wrap_pointer(@selector(fileSystemNumber ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileSystemFileNumber:");
   arg2 = caml_wrap_pointer(@selector(fileSystemFileNumber ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileExtensionHidden:");
   arg2 = caml_wrap_pointer(@selector(fileExtensionHidden ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileHFSCreatorCode:");
   arg2 = caml_wrap_pointer(@selector(fileHFSCreatorCode ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileHFSTypeCode:");
   arg2 = caml_wrap_pointer(@selector(fileHFSTypeCode ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileIsImmutable:");
   arg2 = caml_wrap_pointer(@selector(fileIsImmutable ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileIsAppendOnly:");
   arg2 = caml_wrap_pointer(@selector(fileIsAppendOnly ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileCreationDate:");
   arg2 = caml_wrap_pointer(@selector(fileCreationDate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileOwnerAccountID:");
   arg2 = caml_wrap_pointer(@selector(fileOwnerAccountID ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileGroupOwnerAccountID:");
   arg2 = caml_wrap_pointer(@selector(fileGroupOwnerAccountID ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSFileManager");
   arg2 = caml_wrap_id([NSFileManager class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("defaultManager:");
   arg2 = caml_wrap_pointer(@selector(defaultManager ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("currentDirectoryPath:");
   arg2 = caml_wrap_pointer(@selector(currentDirectoryPath ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("changeCurrentDirectoryPath:");
   arg2 = caml_wrap_pointer(@selector(changeCurrentDirectoryPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileAttributesAtPath:traverseLink:");
   arg2 = caml_wrap_pointer(@selector(fileAttributesAtPath:traverseLink:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("changeFileAttributes:atPath:");
   arg2 = caml_wrap_pointer(@selector(changeFileAttributes:atPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileExistsAtPath:");
   arg2 = caml_wrap_pointer(@selector(fileExistsAtPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileExistsAtPath:isDirectory:");
   arg2 = caml_wrap_pointer(@selector(fileExistsAtPath:isDirectory:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isReadableFileAtPath:");
   arg2 = caml_wrap_pointer(@selector(isReadableFileAtPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isWritableFileAtPath:");
   arg2 = caml_wrap_pointer(@selector(isWritableFileAtPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isExecutableFileAtPath:");
   arg2 = caml_wrap_pointer(@selector(isExecutableFileAtPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isDeletableFileAtPath:");
   arg2 = caml_wrap_pointer(@selector(isDeletableFileAtPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("displayNameAtPath:");
   arg2 = caml_wrap_pointer(@selector(displayNameAtPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("contentsEqualAtPath:andPath:");
   arg2 = caml_wrap_pointer(@selector(contentsEqualAtPath:andPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("linkPath:toPath:handler:");
   arg2 = caml_wrap_pointer(@selector(linkPath:toPath:handler:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("copyPath:toPath:handler:");
   arg2 = caml_wrap_pointer(@selector(copyPath:toPath:handler:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("movePath:toPath:handler:");
   arg2 = caml_wrap_pointer(@selector(movePath:toPath:handler:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeFileAtPath:handler:");
   arg2 = caml_wrap_pointer(@selector(removeFileAtPath:handler:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("directoryContentsAtPath:");
   arg2 = caml_wrap_pointer(@selector(directoryContentsAtPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("enumeratorAtPath:");
   arg2 = caml_wrap_pointer(@selector(enumeratorAtPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("subpathsAtPath:");
   arg2 = caml_wrap_pointer(@selector(subpathsAtPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("createDirectoryAtPath:attributes:");
   arg2 = caml_wrap_pointer(@selector(createDirectoryAtPath:attributes:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("contentsAtPath:");
   arg2 = caml_wrap_pointer(@selector(contentsAtPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("createFileAtPath:contents:attributes:");
   arg2 = caml_wrap_pointer(@selector(createFileAtPath:contents:attributes:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("pathContentOfSymbolicLinkAtPath:");
   arg2 = caml_wrap_pointer(@selector(pathContentOfSymbolicLinkAtPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("createSymbolicLinkAtPath:pathContent:");
   arg2 = caml_wrap_pointer(@selector(createSymbolicLinkAtPath:pathContent:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileSystemAttributesAtPath:");
   arg2 = caml_wrap_pointer(@selector(fileSystemAttributesAtPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileSystemRepresentationWithPath:");
   arg2 = caml_wrap_pointer(@selector(fileSystemRepresentationWithPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stringWithFileSystemRepresentation:length:");
   arg2 = caml_wrap_pointer(@selector(stringWithFileSystemRepresentation:length:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("componentsToDisplayForPath:");
   arg2 = caml_wrap_pointer(@selector(componentsToDisplayForPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSDirectoryEnumerator");
   arg2 = caml_wrap_id([NSDirectoryEnumerator class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("fileAttributes:");
   arg2 = caml_wrap_pointer(@selector(fileAttributes ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("directoryAttributes:");
   arg2 = caml_wrap_pointer(@selector(directoryAttributes ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("skipDescendents:");
   arg2 = caml_wrap_pointer(@selector(skipDescendents ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSObject");
   arg2 = caml_wrap_id([NSObject class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("fileManager:shouldProceedAfterError:");
   arg2 = caml_wrap_pointer(@selector(fileManager:shouldProceedAfterError:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("fileManager:willProcessPath:");
   arg2 = caml_wrap_pointer(@selector(fileManager:willProcessPath:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
