// THIS FILE IS GENERATED - ALL CHANGES WILL BE LOST AT THE NEXT BUILD
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/Foundation.framework/Headers/NSDictionary.h>
value caml_init_NSDictionary(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSDictionary");
   arg2 = caml_wrap_id([NSDictionary class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("dictionary:");
   arg2 = caml_wrap_pointer(@selector(dictionary ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dictionaryWithContentsOfFile:");
   arg2 = caml_wrap_pointer(@selector(dictionaryWithContentsOfFile:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dictionaryWithContentsOfURL:");
   arg2 = caml_wrap_pointer(@selector(dictionaryWithContentsOfURL:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dictionaryWithObjects:forKeys:");
   arg2 = caml_wrap_pointer(@selector(dictionaryWithObjects:forKeys:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dictionaryWithObjects:forKeys:count:");
   arg2 = caml_wrap_pointer(@selector(dictionaryWithObjects:forKeys:count:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dictionaryWithObjectsAndKeys:");
   arg2 = caml_wrap_pointer(@selector(dictionaryWithObjectsAndKeys:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithContentsOfFile:");
   arg2 = caml_wrap_pointer(@selector(initWithContentsOfFile:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithContentsOfURL:");
   arg2 = caml_wrap_pointer(@selector(initWithContentsOfURL:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithObjects:forKeys:");
   arg2 = caml_wrap_pointer(@selector(initWithObjects:forKeys:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithObjects:forKeys:count:");
   arg2 = caml_wrap_pointer(@selector(initWithObjects:forKeys:count:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithObjectsAndKeys:");
   arg2 = caml_wrap_pointer(@selector(initWithObjectsAndKeys:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithDictionary:");
   arg2 = caml_wrap_pointer(@selector(initWithDictionary:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dictionaryWithDictionary:");
   arg2 = caml_wrap_pointer(@selector(dictionaryWithDictionary:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dictionaryWithObject:forKey:");
   arg2 = caml_wrap_pointer(@selector(dictionaryWithObject:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithDictionary:copyItems:");
   arg2 = caml_wrap_pointer(@selector(initWithDictionary:copyItems:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("allKeys:");
   arg2 = caml_wrap_pointer(@selector(allKeys ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("allKeysForObject:");
   arg2 = caml_wrap_pointer(@selector(allKeysForObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("allValues:");
   arg2 = caml_wrap_pointer(@selector(allValues ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("description:");
   arg2 = caml_wrap_pointer(@selector(description ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("descriptionInStringsFileFormat:");
   arg2 = caml_wrap_pointer(@selector(descriptionInStringsFileFormat ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("descriptionWithLocale:");
   arg2 = caml_wrap_pointer(@selector(descriptionWithLocale:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("descriptionWithLocale:indent:");
   arg2 = caml_wrap_pointer(@selector(descriptionWithLocale:indent:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isEqualToDictionary:");
   arg2 = caml_wrap_pointer(@selector(isEqualToDictionary:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("objectEnumerator:");
   arg2 = caml_wrap_pointer(@selector(objectEnumerator ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("objectsForKeys:notFoundMarker:");
   arg2 = caml_wrap_pointer(@selector(objectsForKeys:notFoundMarker:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("writeToFile:atomically:");
   arg2 = caml_wrap_pointer(@selector(writeToFile:atomically:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("writeToURL:atomically:");
   arg2 = caml_wrap_pointer(@selector(writeToURL:atomically:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("keysSortedByValueUsingSelector:");
   arg2 = caml_wrap_pointer(@selector(keysSortedByValueUsingSelector:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("count:");
   arg2 = caml_wrap_pointer(@selector(count ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("keyEnumerator:");
   arg2 = caml_wrap_pointer(@selector(keyEnumerator ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("objectForKey:");
   arg2 = caml_wrap_pointer(@selector(objectForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSMutableDictionary");
   arg2 = caml_wrap_id([NSMutableDictionary class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("dictionaryWithCapacity:");
   arg2 = caml_wrap_pointer(@selector(dictionaryWithCapacity:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithCapacity:");
   arg2 = caml_wrap_pointer(@selector(initWithCapacity:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addEntriesFromDictionary:");
   arg2 = caml_wrap_pointer(@selector(addEntriesFromDictionary:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeAllObjects:");
   arg2 = caml_wrap_pointer(@selector(removeAllObjects ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeObjectsForKeys:");
   arg2 = caml_wrap_pointer(@selector(removeObjectsForKeys:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDictionary:");
   arg2 = caml_wrap_pointer(@selector(setDictionary:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeObjectForKey:");
   arg2 = caml_wrap_pointer(@selector(removeObjectForKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setObject:forKey:");
   arg2 = caml_wrap_pointer(@selector(setObject:forKey:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
