// THIS FILE IS GENERATED - ALL CHANGES WILL BE LOST AT THE NEXT BUILD
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/Foundation.framework/Headers/NSXMLElement.h>
value caml_init_NSXMLElement(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSXMLElement");
   arg2 = caml_wrap_id([NSXMLElement class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("initWithName:");
   arg2 = caml_wrap_pointer(@selector(initWithName:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithName:l_URI:");
   arg2 = caml_wrap_pointer(@selector(initWithName:l_URI:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithName:stringValue:");
   arg2 = caml_wrap_pointer(@selector(initWithName:stringValue:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithXMLString:error:");
   arg2 = caml_wrap_pointer(@selector(initWithXMLString:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("elementsForName:");
   arg2 = caml_wrap_pointer(@selector(elementsForName:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("elementsForLocalName:l_URI:");
   arg2 = caml_wrap_pointer(@selector(elementsForLocalName:l_URI:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addAttribute:");
   arg2 = caml_wrap_pointer(@selector(addAttribute:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeAttributeForName:");
   arg2 = caml_wrap_pointer(@selector(removeAttributeForName:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAttributes:");
   arg2 = caml_wrap_pointer(@selector(setAttributes:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setAttributesAsDictionary:");
   arg2 = caml_wrap_pointer(@selector(setAttributesAsDictionary:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("attributes:");
   arg2 = caml_wrap_pointer(@selector(attributes ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("attributeForName:");
   arg2 = caml_wrap_pointer(@selector(attributeForName:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("attributeForLocalName:l_URI:");
   arg2 = caml_wrap_pointer(@selector(attributeForLocalName:l_URI:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addNamespace:");
   arg2 = caml_wrap_pointer(@selector(addNamespace:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeNamespaceForPrefix:");
   arg2 = caml_wrap_pointer(@selector(removeNamespaceForPrefix:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setNamespaces:");
   arg2 = caml_wrap_pointer(@selector(setNamespaces:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("namespaces:");
   arg2 = caml_wrap_pointer(@selector(namespaces ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("namespaceForPrefix:");
   arg2 = caml_wrap_pointer(@selector(namespaceForPrefix:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("resolveNamespaceForName:");
   arg2 = caml_wrap_pointer(@selector(resolveNamespaceForName:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("resolvePrefixForNamespaceURI:");
   arg2 = caml_wrap_pointer(@selector(resolvePrefixForNamespaceURI:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("insertChild:atIndex:");
   arg2 = caml_wrap_pointer(@selector(insertChild:atIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("insertChildren:atIndex:");
   arg2 = caml_wrap_pointer(@selector(insertChildren:atIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeChildAtIndex:");
   arg2 = caml_wrap_pointer(@selector(removeChildAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setChildren:");
   arg2 = caml_wrap_pointer(@selector(setChildren:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addChild:");
   arg2 = caml_wrap_pointer(@selector(addChild:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("replaceChildAtIndex:withNode:");
   arg2 = caml_wrap_pointer(@selector(replaceChildAtIndex:withNode:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("normalizeAdjacentTextNodesPreservingCDATA:");
   arg2 = caml_wrap_pointer(@selector(normalizeAdjacentTextNodesPreservingCDATA:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
