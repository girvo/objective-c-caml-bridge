#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/Foundation.framework/Headers/NSDecimalNumber.h>
value caml_init_NSDecimalNumber(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSDecimalNumberHandler");
   arg2 = caml_wrap_id([NSDecimalNumberHandler class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("defaultDecimalNumberHandler:");
   arg2 = caml_wrap_pointer(@selector(defaultDecimalNumberHandler ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:");
   arg2 = caml_wrap_pointer(@selector(initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:");
   arg2 = caml_wrap_pointer(@selector(decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSNumber");
   arg2 = caml_wrap_id([NSNumber class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("decimalValue:");
   arg2 = caml_wrap_pointer(@selector(decimalValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSDecimalNumber");
   arg2 = caml_wrap_id([NSDecimalNumber class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("initWithMantissa:exponent:isNegative:");
   arg2 = caml_wrap_pointer(@selector(initWithMantissa:exponent:isNegative:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithDecimal:");
   arg2 = caml_wrap_pointer(@selector(initWithDecimal:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithString:");
   arg2 = caml_wrap_pointer(@selector(initWithString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithString:locale:");
   arg2 = caml_wrap_pointer(@selector(initWithString:locale:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("descriptionWithLocale:");
   arg2 = caml_wrap_pointer(@selector(descriptionWithLocale:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decimalValue:");
   arg2 = caml_wrap_pointer(@selector(decimalValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decimalNumberWithMantissa:exponent:isNegative:");
   arg2 = caml_wrap_pointer(@selector(decimalNumberWithMantissa:exponent:isNegative:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decimalNumberWithDecimal:");
   arg2 = caml_wrap_pointer(@selector(decimalNumberWithDecimal:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decimalNumberWithString:");
   arg2 = caml_wrap_pointer(@selector(decimalNumberWithString:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decimalNumberWithString:locale:");
   arg2 = caml_wrap_pointer(@selector(decimalNumberWithString:locale:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("zero:");
   arg2 = caml_wrap_pointer(@selector(zero ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("one:");
   arg2 = caml_wrap_pointer(@selector(one ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("minimumDecimalNumber:");
   arg2 = caml_wrap_pointer(@selector(minimumDecimalNumber ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("maximumDecimalNumber:");
   arg2 = caml_wrap_pointer(@selector(maximumDecimalNumber ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("notANumber:");
   arg2 = caml_wrap_pointer(@selector(notANumber ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decimalNumberByAdding:");
   arg2 = caml_wrap_pointer(@selector(decimalNumberByAdding:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decimalNumberByAdding:withBehavior:");
   arg2 = caml_wrap_pointer(@selector(decimalNumberByAdding:withBehavior:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decimalNumberBySubtracting:");
   arg2 = caml_wrap_pointer(@selector(decimalNumberBySubtracting:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decimalNumberBySubtracting:withBehavior:");
   arg2 = caml_wrap_pointer(@selector(decimalNumberBySubtracting:withBehavior:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decimalNumberByMultiplyingBy:");
   arg2 = caml_wrap_pointer(@selector(decimalNumberByMultiplyingBy:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decimalNumberByMultiplyingBy:withBehavior:");
   arg2 = caml_wrap_pointer(@selector(decimalNumberByMultiplyingBy:withBehavior:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decimalNumberByDividingBy:");
   arg2 = caml_wrap_pointer(@selector(decimalNumberByDividingBy:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decimalNumberByDividingBy:withBehavior:");
   arg2 = caml_wrap_pointer(@selector(decimalNumberByDividingBy:withBehavior:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decimalNumberByRaisingToPower:");
   arg2 = caml_wrap_pointer(@selector(decimalNumberByRaisingToPower:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decimalNumberByRaisingToPower:withBehavior:");
   arg2 = caml_wrap_pointer(@selector(decimalNumberByRaisingToPower:withBehavior:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decimalNumberByMultiplyingByPowerOf10:");
   arg2 = caml_wrap_pointer(@selector(decimalNumberByMultiplyingByPowerOf10:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decimalNumberByMultiplyingByPowerOf10:withBehavior:");
   arg2 = caml_wrap_pointer(@selector(decimalNumberByMultiplyingByPowerOf10:withBehavior:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("decimalNumberByRoundingAccordingToBehavior:");
   arg2 = caml_wrap_pointer(@selector(decimalNumberByRoundingAccordingToBehavior:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("compare:");
   arg2 = caml_wrap_pointer(@selector(compare:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDefaultBehavior:");
   arg2 = caml_wrap_pointer(@selector(setDefaultBehavior:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("defaultBehavior:");
   arg2 = caml_wrap_pointer(@selector(defaultBehavior ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("objCType:");
   arg2 = caml_wrap_pointer(@selector(objCType ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("doubleValue:");
   arg2 = caml_wrap_pointer(@selector(doubleValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSScanner");
   arg2 = caml_wrap_id([NSScanner class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("scanDecimal:");
   arg2 = caml_wrap_pointer(@selector(scanDecimal:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
