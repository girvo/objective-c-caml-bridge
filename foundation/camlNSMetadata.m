// THIS FILE IS GENERATED - ALL CHANGES WILL BE LOST AT THE NEXT BUILD
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/Foundation.framework/Headers/NSMetadata.h>
value caml_init_NSMetadata(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSMetadataQuery");
   arg2 = caml_wrap_id([NSMetadataQuery class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("init:");
   arg2 = caml_wrap_pointer(@selector(init ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("delegate:");
   arg2 = caml_wrap_pointer(@selector(delegate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDelegate:");
   arg2 = caml_wrap_pointer(@selector(setDelegate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("predicate:");
   arg2 = caml_wrap_pointer(@selector(predicate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setPredicate:");
   arg2 = caml_wrap_pointer(@selector(setPredicate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sortDescriptors:");
   arg2 = caml_wrap_pointer(@selector(sortDescriptors ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setSortDescriptors:");
   arg2 = caml_wrap_pointer(@selector(setSortDescriptors:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("valueListAttributes:");
   arg2 = caml_wrap_pointer(@selector(valueListAttributes ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setValueListAttributes:");
   arg2 = caml_wrap_pointer(@selector(setValueListAttributes:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("groupingAttributes:");
   arg2 = caml_wrap_pointer(@selector(groupingAttributes ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setGroupingAttributes:");
   arg2 = caml_wrap_pointer(@selector(setGroupingAttributes:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("notificationBatchingInterval:");
   arg2 = caml_wrap_pointer(@selector(notificationBatchingInterval ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setNotificationBatchingInterval:");
   arg2 = caml_wrap_pointer(@selector(setNotificationBatchingInterval:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("searchScopes:");
   arg2 = caml_wrap_pointer(@selector(searchScopes ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setSearchScopes:");
   arg2 = caml_wrap_pointer(@selector(setSearchScopes:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("startQuery:");
   arg2 = caml_wrap_pointer(@selector(startQuery ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stopQuery:");
   arg2 = caml_wrap_pointer(@selector(stopQuery ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isStarted:");
   arg2 = caml_wrap_pointer(@selector(isStarted ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isGathering:");
   arg2 = caml_wrap_pointer(@selector(isGathering ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isStopped:");
   arg2 = caml_wrap_pointer(@selector(isStopped ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("disableUpdates:");
   arg2 = caml_wrap_pointer(@selector(disableUpdates ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("enableUpdates:");
   arg2 = caml_wrap_pointer(@selector(enableUpdates ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("resultCount:");
   arg2 = caml_wrap_pointer(@selector(resultCount ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("resultAtIndex:");
   arg2 = caml_wrap_pointer(@selector(resultAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("results:");
   arg2 = caml_wrap_pointer(@selector(results ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("indexOfResult:");
   arg2 = caml_wrap_pointer(@selector(indexOfResult:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("valueLists:");
   arg2 = caml_wrap_pointer(@selector(valueLists ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("groupedResults:");
   arg2 = caml_wrap_pointer(@selector(groupedResults ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("valueOfAttribute:forResultAtIndex:");
   arg2 = caml_wrap_pointer(@selector(valueOfAttribute:forResultAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSObject");
   arg2 = caml_wrap_id([NSObject class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("metadataQuery:replacementObjectForResultObject:");
   arg2 = caml_wrap_pointer(@selector(metadataQuery:replacementObjectForResultObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("metadataQuery:replacementValueForAttribute:value:");
   arg2 = caml_wrap_pointer(@selector(metadataQuery:replacementValueForAttribute:value:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSMetadataItem");
   arg2 = caml_wrap_id([NSMetadataItem class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("valueForAttribute:");
   arg2 = caml_wrap_pointer(@selector(valueForAttribute:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("valuesForAttributes:");
   arg2 = caml_wrap_pointer(@selector(valuesForAttributes:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("attributes:");
   arg2 = caml_wrap_pointer(@selector(attributes ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSMetadataQueryAttributeValueTuple");
   arg2 = caml_wrap_id([NSMetadataQueryAttributeValueTuple class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("attribute:");
   arg2 = caml_wrap_pointer(@selector(attribute ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("value:");
   arg2 = caml_wrap_pointer(@selector(value ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("count:");
   arg2 = caml_wrap_pointer(@selector(count ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSMetadataQueryResultGroup");
   arg2 = caml_wrap_id([NSMetadataQueryResultGroup class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("attribute:");
   arg2 = caml_wrap_pointer(@selector(attribute ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("value:");
   arg2 = caml_wrap_pointer(@selector(value ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("subgroups:");
   arg2 = caml_wrap_pointer(@selector(subgroups ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("resultCount:");
   arg2 = caml_wrap_pointer(@selector(resultCount ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("resultAtIndex:");
   arg2 = caml_wrap_pointer(@selector(resultAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("results:");
   arg2 = caml_wrap_pointer(@selector(results ));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
