#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/Foundation.framework/Headers/NSValue.h>
value caml_init_NSValue(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSNumber");
   arg2 = caml_wrap_id([NSNumber class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("initWithChar:");
   arg2 = caml_wrap_pointer(@selector(initWithChar:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithUnsignedChar:");
   arg2 = caml_wrap_pointer(@selector(initWithUnsignedChar:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithShort:");
   arg2 = caml_wrap_pointer(@selector(initWithShort:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithUnsignedShort:");
   arg2 = caml_wrap_pointer(@selector(initWithUnsignedShort:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithInt:");
   arg2 = caml_wrap_pointer(@selector(initWithInt:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithUnsignedInt:");
   arg2 = caml_wrap_pointer(@selector(initWithUnsignedInt:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithLong:");
   arg2 = caml_wrap_pointer(@selector(initWithLong:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithUnsignedLong:");
   arg2 = caml_wrap_pointer(@selector(initWithUnsignedLong:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithLongLong:");
   arg2 = caml_wrap_pointer(@selector(initWithLongLong:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithUnsignedLongLong:");
   arg2 = caml_wrap_pointer(@selector(initWithUnsignedLongLong:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithFloat:");
   arg2 = caml_wrap_pointer(@selector(initWithFloat:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithDouble:");
   arg2 = caml_wrap_pointer(@selector(initWithDouble:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithBool:");
   arg2 = caml_wrap_pointer(@selector(initWithBool:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberWithChar:");
   arg2 = caml_wrap_pointer(@selector(numberWithChar:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberWithUnsignedChar:");
   arg2 = caml_wrap_pointer(@selector(numberWithUnsignedChar:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberWithShort:");
   arg2 = caml_wrap_pointer(@selector(numberWithShort:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberWithUnsignedShort:");
   arg2 = caml_wrap_pointer(@selector(numberWithUnsignedShort:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberWithInt:");
   arg2 = caml_wrap_pointer(@selector(numberWithInt:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberWithUnsignedInt:");
   arg2 = caml_wrap_pointer(@selector(numberWithUnsignedInt:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberWithLong:");
   arg2 = caml_wrap_pointer(@selector(numberWithLong:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberWithUnsignedLong:");
   arg2 = caml_wrap_pointer(@selector(numberWithUnsignedLong:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberWithLongLong:");
   arg2 = caml_wrap_pointer(@selector(numberWithLongLong:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberWithUnsignedLongLong:");
   arg2 = caml_wrap_pointer(@selector(numberWithUnsignedLongLong:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberWithFloat:");
   arg2 = caml_wrap_pointer(@selector(numberWithFloat:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberWithDouble:");
   arg2 = caml_wrap_pointer(@selector(numberWithDouble:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("numberWithBool:");
   arg2 = caml_wrap_pointer(@selector(numberWithBool:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("charValue:");
   arg2 = caml_wrap_pointer(@selector(charValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("unsignedCharValue:");
   arg2 = caml_wrap_pointer(@selector(unsignedCharValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("shortValue:");
   arg2 = caml_wrap_pointer(@selector(shortValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("unsignedShortValue:");
   arg2 = caml_wrap_pointer(@selector(unsignedShortValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("intValue:");
   arg2 = caml_wrap_pointer(@selector(intValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("unsignedIntValue:");
   arg2 = caml_wrap_pointer(@selector(unsignedIntValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("longValue:");
   arg2 = caml_wrap_pointer(@selector(longValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("unsignedLongValue:");
   arg2 = caml_wrap_pointer(@selector(unsignedLongValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("longLongValue:");
   arg2 = caml_wrap_pointer(@selector(longLongValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("unsignedLongLongValue:");
   arg2 = caml_wrap_pointer(@selector(unsignedLongLongValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("floatValue:");
   arg2 = caml_wrap_pointer(@selector(floatValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("doubleValue:");
   arg2 = caml_wrap_pointer(@selector(doubleValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("boolValue:");
   arg2 = caml_wrap_pointer(@selector(boolValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("stringValue:");
   arg2 = caml_wrap_pointer(@selector(stringValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("compare:");
   arg2 = caml_wrap_pointer(@selector(compare:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isEqualToNumber:");
   arg2 = caml_wrap_pointer(@selector(isEqualToNumber:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("descriptionWithLocale:");
   arg2 = caml_wrap_pointer(@selector(descriptionWithLocale:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSValue");
   arg2 = caml_wrap_id([NSValue class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("valueWithNonretainedObject:");
   arg2 = caml_wrap_pointer(@selector(valueWithNonretainedObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("nonretainedObjectValue:");
   arg2 = caml_wrap_pointer(@selector(nonretainedObjectValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("valueWithPointer:");
   arg2 = caml_wrap_pointer(@selector(valueWithPointer:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("pointerValue:");
   arg2 = caml_wrap_pointer(@selector(pointerValue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isEqualToValue:");
   arg2 = caml_wrap_pointer(@selector(isEqualToValue:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithBytes:objCType:");
   arg2 = caml_wrap_pointer(@selector(initWithBytes:objCType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("valueWithBytes:objCType:");
   arg2 = caml_wrap_pointer(@selector(valueWithBytes:objCType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("value:withObjCType:");
   arg2 = caml_wrap_pointer(@selector(value:withObjCType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getValue:");
   arg2 = caml_wrap_pointer(@selector(getValue:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("objCType:");
   arg2 = caml_wrap_pointer(@selector(objCType ));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
