// THIS FILE IS GENERATED - ALL CHANGES WILL BE LOST AT THE NEXT BUILD
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/Foundation.framework/Headers/NSData.h>
value caml_init_NSData(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSData");
   arg2 = caml_wrap_id([NSData class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("data:");
   arg2 = caml_wrap_pointer(@selector(data ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dataWithBytes:length:");
   arg2 = caml_wrap_pointer(@selector(dataWithBytes:length:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dataWithBytesNoCopy:length:");
   arg2 = caml_wrap_pointer(@selector(dataWithBytesNoCopy:length:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dataWithBytesNoCopy:length:freeWhenDone:");
   arg2 = caml_wrap_pointer(@selector(dataWithBytesNoCopy:length:freeWhenDone:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dataWithContentsOfFile:options:error:");
   arg2 = caml_wrap_pointer(@selector(dataWithContentsOfFile:options:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dataWithContentsOfURL:options:error:");
   arg2 = caml_wrap_pointer(@selector(dataWithContentsOfURL:options:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dataWithContentsOfFile:");
   arg2 = caml_wrap_pointer(@selector(dataWithContentsOfFile:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dataWithContentsOfURL:");
   arg2 = caml_wrap_pointer(@selector(dataWithContentsOfURL:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dataWithContentsOfMappedFile:");
   arg2 = caml_wrap_pointer(@selector(dataWithContentsOfMappedFile:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithBytes:length:");
   arg2 = caml_wrap_pointer(@selector(initWithBytes:length:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithBytesNoCopy:length:");
   arg2 = caml_wrap_pointer(@selector(initWithBytesNoCopy:length:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithBytesNoCopy:length:freeWhenDone:");
   arg2 = caml_wrap_pointer(@selector(initWithBytesNoCopy:length:freeWhenDone:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithContentsOfFile:options:error:");
   arg2 = caml_wrap_pointer(@selector(initWithContentsOfFile:options:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithContentsOfURL:options:error:");
   arg2 = caml_wrap_pointer(@selector(initWithContentsOfURL:options:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithContentsOfFile:");
   arg2 = caml_wrap_pointer(@selector(initWithContentsOfFile:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithContentsOfURL:");
   arg2 = caml_wrap_pointer(@selector(initWithContentsOfURL:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithContentsOfMappedFile:");
   arg2 = caml_wrap_pointer(@selector(initWithContentsOfMappedFile:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithData:");
   arg2 = caml_wrap_pointer(@selector(initWithData:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dataWithData:");
   arg2 = caml_wrap_pointer(@selector(dataWithData:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("description:");
   arg2 = caml_wrap_pointer(@selector(description ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getBytes:");
   arg2 = caml_wrap_pointer(@selector(getBytes:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getBytes:length:");
   arg2 = caml_wrap_pointer(@selector(getBytes:length:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("getBytes:range:");
   arg2 = caml_wrap_pointer(@selector(getBytes:range:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isEqualToData:");
   arg2 = caml_wrap_pointer(@selector(isEqualToData:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("subdataWithRange:");
   arg2 = caml_wrap_pointer(@selector(subdataWithRange:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("writeToFile:atomically:");
   arg2 = caml_wrap_pointer(@selector(writeToFile:atomically:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("writeToURL:atomically:");
   arg2 = caml_wrap_pointer(@selector(writeToURL:atomically:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("writeToFile:options:error:");
   arg2 = caml_wrap_pointer(@selector(writeToFile:options:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("writeToURL:options:error:");
   arg2 = caml_wrap_pointer(@selector(writeToURL:options:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("length:");
   arg2 = caml_wrap_pointer(@selector(length ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("bytes:");
   arg2 = caml_wrap_pointer(@selector(bytes ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSMutableData");
   arg2 = caml_wrap_id([NSMutableData class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("dataWithCapacity:");
   arg2 = caml_wrap_pointer(@selector(dataWithCapacity:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dataWithLength:");
   arg2 = caml_wrap_pointer(@selector(dataWithLength:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithCapacity:");
   arg2 = caml_wrap_pointer(@selector(initWithCapacity:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithLength:");
   arg2 = caml_wrap_pointer(@selector(initWithLength:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("appendBytes:length:");
   arg2 = caml_wrap_pointer(@selector(appendBytes:length:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("appendData:");
   arg2 = caml_wrap_pointer(@selector(appendData:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("increaseLengthBy:");
   arg2 = caml_wrap_pointer(@selector(increaseLengthBy:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("replaceBytesInRange:withBytes:");
   arg2 = caml_wrap_pointer(@selector(replaceBytesInRange:withBytes:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("resetBytesInRange:");
   arg2 = caml_wrap_pointer(@selector(resetBytesInRange:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setData:");
   arg2 = caml_wrap_pointer(@selector(setData:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("replaceBytesInRange:withBytes:length:");
   arg2 = caml_wrap_pointer(@selector(replaceBytesInRange:withBytes:length:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("mutableBytes:");
   arg2 = caml_wrap_pointer(@selector(mutableBytes ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setLength:");
   arg2 = caml_wrap_pointer(@selector(setLength:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
