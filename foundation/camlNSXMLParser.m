#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/Foundation.framework/Headers/NSXMLParser.h>
value caml_init_NSXMLParser(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSXMLParser");
   arg2 = caml_wrap_id([NSXMLParser class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("publicID:");
   arg2 = caml_wrap_pointer(@selector(publicID ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("systemID:");
   arg2 = caml_wrap_pointer(@selector(systemID ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("lineNumber:");
   arg2 = caml_wrap_pointer(@selector(lineNumber ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("columnNumber:");
   arg2 = caml_wrap_pointer(@selector(columnNumber ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithContentsOfURL:");
   arg2 = caml_wrap_pointer(@selector(initWithContentsOfURL:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithData:");
   arg2 = caml_wrap_pointer(@selector(initWithData:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("delegate:");
   arg2 = caml_wrap_pointer(@selector(delegate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDelegate:");
   arg2 = caml_wrap_pointer(@selector(setDelegate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setShouldProcessNamespaces:");
   arg2 = caml_wrap_pointer(@selector(setShouldProcessNamespaces:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setShouldReportNamespacePrefixes:");
   arg2 = caml_wrap_pointer(@selector(setShouldReportNamespacePrefixes:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setShouldResolveExternalEntities:");
   arg2 = caml_wrap_pointer(@selector(setShouldResolveExternalEntities:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("shouldProcessNamespaces:");
   arg2 = caml_wrap_pointer(@selector(shouldProcessNamespaces ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("shouldReportNamespacePrefixes:");
   arg2 = caml_wrap_pointer(@selector(shouldReportNamespacePrefixes ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("shouldResolveExternalEntities:");
   arg2 = caml_wrap_pointer(@selector(shouldResolveExternalEntities ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("parse:");
   arg2 = caml_wrap_pointer(@selector(parse ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("abortParsing:");
   arg2 = caml_wrap_pointer(@selector(abortParsing ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("parserError:");
   arg2 = caml_wrap_pointer(@selector(parserError ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSObject");
   arg2 = caml_wrap_id([NSObject class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("parserDidStartDocument:");
   arg2 = caml_wrap_pointer(@selector(parserDidStartDocument:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("parserDidEndDocument:");
   arg2 = caml_wrap_pointer(@selector(parserDidEndDocument:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_parser:foundNotationDeclarationWithName:publicID:systemID:");
   arg2 = caml_wrap_pointer(@selector(l_parser:foundNotationDeclarationWithName:publicID:systemID:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:");
   arg2 = caml_wrap_pointer(@selector(l_parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_parser:foundAttributeDeclarationWithName:forElement:l_type:defaultValue:");
   arg2 = caml_wrap_pointer(@selector(l_parser:foundAttributeDeclarationWithName:forElement:l_type:defaultValue:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_parser:foundElementDeclarationWithName:model:");
   arg2 = caml_wrap_pointer(@selector(l_parser:foundElementDeclarationWithName:model:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_parser:foundInternalEntityDeclarationWithName:value:");
   arg2 = caml_wrap_pointer(@selector(l_parser:foundInternalEntityDeclarationWithName:value:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_parser:foundExternalEntityDeclarationWithName:publicID:systemID:");
   arg2 = caml_wrap_pointer(@selector(l_parser:foundExternalEntityDeclarationWithName:publicID:systemID:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_parser:didStartElement:namespaceURI:qualifiedName:attributes:");
   arg2 = caml_wrap_pointer(@selector(l_parser:didStartElement:namespaceURI:qualifiedName:attributes:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_parser:didEndElement:namespaceURI:qualifiedName:");
   arg2 = caml_wrap_pointer(@selector(l_parser:didEndElement:namespaceURI:qualifiedName:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_parser:didStartMappingPrefix:toURI:");
   arg2 = caml_wrap_pointer(@selector(l_parser:didStartMappingPrefix:toURI:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_parser:didEndMappingPrefix:");
   arg2 = caml_wrap_pointer(@selector(l_parser:didEndMappingPrefix:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_parser:foundCharacters:");
   arg2 = caml_wrap_pointer(@selector(l_parser:foundCharacters:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_parser:foundIgnorableWhitespace:");
   arg2 = caml_wrap_pointer(@selector(l_parser:foundIgnorableWhitespace:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_parser:foundProcessingInstructionWithTarget:data:");
   arg2 = caml_wrap_pointer(@selector(l_parser:foundProcessingInstructionWithTarget:data:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_parser:foundComment:");
   arg2 = caml_wrap_pointer(@selector(l_parser:foundComment:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_parser:foundCDATA:");
   arg2 = caml_wrap_pointer(@selector(l_parser:foundCDATA:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_parser:resolveExternalEntityName:systemID:");
   arg2 = caml_wrap_pointer(@selector(l_parser:resolveExternalEntityName:systemID:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_parser:parseErrorOccurred:");
   arg2 = caml_wrap_pointer(@selector(l_parser:parseErrorOccurred:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_parser:validationErrorOccurred:");
   arg2 = caml_wrap_pointer(@selector(l_parser:validationErrorOccurred:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
