#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/Foundation.framework/Headers/NSPort.h>
value caml_init_NSPort(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSSocketPort");
   arg2 = caml_wrap_id([NSSocketPort class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("init:");
   arg2 = caml_wrap_pointer(@selector(init ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithTCPPort:");
   arg2 = caml_wrap_pointer(@selector(initWithTCPPort:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithProtocolFamily:socketType:protocol:address:");
   arg2 = caml_wrap_pointer(@selector(initWithProtocolFamily:socketType:protocol:address:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithProtocolFamily:socketType:protocol:socket:");
   arg2 = caml_wrap_pointer(@selector(initWithProtocolFamily:socketType:protocol:socket:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initRemoteWithTCPPort:host:");
   arg2 = caml_wrap_pointer(@selector(initRemoteWithTCPPort:host:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initRemoteWithProtocolFamily:socketType:protocol:address:");
   arg2 = caml_wrap_pointer(@selector(initRemoteWithProtocolFamily:socketType:protocol:address:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("protocolFamily:");
   arg2 = caml_wrap_pointer(@selector(protocolFamily ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("socketType:");
   arg2 = caml_wrap_pointer(@selector(socketType ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("protocol:");
   arg2 = caml_wrap_pointer(@selector(protocol ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("address:");
   arg2 = caml_wrap_pointer(@selector(address ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("socket:");
   arg2 = caml_wrap_pointer(@selector(socket ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSMessagePort");
   arg2 = caml_wrap_id([NSMessagePort class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("NSObject");
   arg2 = caml_wrap_id([NSObject class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("handleMachMessage:");
   arg2 = caml_wrap_pointer(@selector(handleMachMessage:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("handlePortMessage:");
   arg2 = caml_wrap_pointer(@selector(handlePortMessage:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSPort");
   arg2 = caml_wrap_id([NSPort class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("allocWithZone:");
   arg2 = caml_wrap_pointer(@selector(allocWithZone:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("port:");
   arg2 = caml_wrap_pointer(@selector(port ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("invalidate:");
   arg2 = caml_wrap_pointer(@selector(invalidate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isValid:");
   arg2 = caml_wrap_pointer(@selector(isValid ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDelegate:");
   arg2 = caml_wrap_pointer(@selector(setDelegate:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("delegate:");
   arg2 = caml_wrap_pointer(@selector(delegate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scheduleInRunLoop:forMode:");
   arg2 = caml_wrap_pointer(@selector(scheduleInRunLoop:forMode:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeFromRunLoop:forMode:");
   arg2 = caml_wrap_pointer(@selector(removeFromRunLoop:forMode:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("reservedSpaceLength:");
   arg2 = caml_wrap_pointer(@selector(reservedSpaceLength ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sendBeforeDate:components:from:reserved:");
   arg2 = caml_wrap_pointer(@selector(sendBeforeDate:components:from:reserved:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("sendBeforeDate:msgid:components:from:reserved:");
   arg2 = caml_wrap_pointer(@selector(sendBeforeDate:msgid:components:from:reserved:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addConnection:toRunLoop:forMode:");
   arg2 = caml_wrap_pointer(@selector(addConnection:toRunLoop:forMode:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeConnection:fromRunLoop:forMode:");
   arg2 = caml_wrap_pointer(@selector(removeConnection:fromRunLoop:forMode:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSMachPort");
   arg2 = caml_wrap_id([NSMachPort class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("portWithMachPort:");
   arg2 = caml_wrap_pointer(@selector(portWithMachPort:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithMachPort:");
   arg2 = caml_wrap_pointer(@selector(initWithMachPort:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("machPort:");
   arg2 = caml_wrap_pointer(@selector(machPort ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scheduleInRunLoop:forMode:");
   arg2 = caml_wrap_pointer(@selector(scheduleInRunLoop:forMode:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeFromRunLoop:forMode:");
   arg2 = caml_wrap_pointer(@selector(removeFromRunLoop:forMode:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
