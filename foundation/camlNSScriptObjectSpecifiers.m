#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/Foundation.framework/Headers/NSScriptObjectSpecifiers.h>
value caml_init_NSScriptObjectSpecifiers(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSIndexSpecifier");
   arg2 = caml_wrap_id([NSIndexSpecifier class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("initWithContainerClassDescription:containerSpecifier:key:index:");
   arg2 = caml_wrap_pointer(@selector(initWithContainerClassDescription:containerSpecifier:key:index:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("index:");
   arg2 = caml_wrap_pointer(@selector(index ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setIndex:");
   arg2 = caml_wrap_pointer(@selector(setIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSPropertySpecifier");
   arg2 = caml_wrap_id([NSPropertySpecifier class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("NSUniqueIDSpecifier");
   arg2 = caml_wrap_id([NSUniqueIDSpecifier class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("initWithContainerClassDescription:containerSpecifier:key:uniqueID:");
   arg2 = caml_wrap_pointer(@selector(initWithContainerClassDescription:containerSpecifier:key:uniqueID:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("uniqueID:");
   arg2 = caml_wrap_pointer(@selector(uniqueID ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setUniqueID:");
   arg2 = caml_wrap_pointer(@selector(setUniqueID:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSScriptObjectSpecifier");
   arg2 = caml_wrap_id([NSScriptObjectSpecifier class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("initWithContainerSpecifier:key:");
   arg2 = caml_wrap_pointer(@selector(initWithContainerSpecifier:key:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithContainerClassDescription:containerSpecifier:key:");
   arg2 = caml_wrap_pointer(@selector(initWithContainerClassDescription:containerSpecifier:key:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("childSpecifier:");
   arg2 = caml_wrap_pointer(@selector(childSpecifier ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setChildSpecifier:");
   arg2 = caml_wrap_pointer(@selector(setChildSpecifier:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("containerSpecifier:");
   arg2 = caml_wrap_pointer(@selector(containerSpecifier ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setContainerSpecifier:");
   arg2 = caml_wrap_pointer(@selector(setContainerSpecifier:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("containerIsObjectBeingTested:");
   arg2 = caml_wrap_pointer(@selector(containerIsObjectBeingTested ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setContainerIsObjectBeingTested:");
   arg2 = caml_wrap_pointer(@selector(setContainerIsObjectBeingTested:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("containerIsRangeContainerObject:");
   arg2 = caml_wrap_pointer(@selector(containerIsRangeContainerObject ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setContainerIsRangeContainerObject:");
   arg2 = caml_wrap_pointer(@selector(setContainerIsRangeContainerObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("key:");
   arg2 = caml_wrap_pointer(@selector(key ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setKey:");
   arg2 = caml_wrap_pointer(@selector(setKey:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("containerClassDescription:");
   arg2 = caml_wrap_pointer(@selector(containerClassDescription ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setContainerClassDescription:");
   arg2 = caml_wrap_pointer(@selector(setContainerClassDescription:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("keyClassDescription:");
   arg2 = caml_wrap_pointer(@selector(keyClassDescription ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("indicesOfObjectsByEvaluatingWithContainer:count:");
   arg2 = caml_wrap_pointer(@selector(indicesOfObjectsByEvaluatingWithContainer:count:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("objectsByEvaluatingWithContainers:");
   arg2 = caml_wrap_pointer(@selector(objectsByEvaluatingWithContainers:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("objectsByEvaluatingSpecifier:");
   arg2 = caml_wrap_pointer(@selector(objectsByEvaluatingSpecifier ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("evaluationErrorNumber:");
   arg2 = caml_wrap_pointer(@selector(evaluationErrorNumber ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setEvaluationErrorNumber:");
   arg2 = caml_wrap_pointer(@selector(setEvaluationErrorNumber:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("evaluationErrorSpecifier:");
   arg2 = caml_wrap_pointer(@selector(evaluationErrorSpecifier ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSPositionalSpecifier");
   arg2 = caml_wrap_id([NSPositionalSpecifier class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("initWithPosition:objectSpecifier:");
   arg2 = caml_wrap_pointer(@selector(initWithPosition:objectSpecifier:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setInsertionClassDescription:");
   arg2 = caml_wrap_pointer(@selector(setInsertionClassDescription:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("evaluate:");
   arg2 = caml_wrap_pointer(@selector(evaluate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("insertionContainer:");
   arg2 = caml_wrap_pointer(@selector(insertionContainer ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("insertionKey:");
   arg2 = caml_wrap_pointer(@selector(insertionKey ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("insertionIndex:");
   arg2 = caml_wrap_pointer(@selector(insertionIndex ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("insertionReplaces:");
   arg2 = caml_wrap_pointer(@selector(insertionReplaces ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSRangeSpecifier");
   arg2 = caml_wrap_id([NSRangeSpecifier class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("initWithContainerClassDescription:containerSpecifier:key:startSpecifier:endSpecifier:");
   arg2 = caml_wrap_pointer(@selector(initWithContainerClassDescription:containerSpecifier:key:startSpecifier:endSpecifier:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("startSpecifier:");
   arg2 = caml_wrap_pointer(@selector(startSpecifier ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setStartSpecifier:");
   arg2 = caml_wrap_pointer(@selector(setStartSpecifier:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("endSpecifier:");
   arg2 = caml_wrap_pointer(@selector(endSpecifier ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setEndSpecifier:");
   arg2 = caml_wrap_pointer(@selector(setEndSpecifier:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSWhoseSpecifier");
   arg2 = caml_wrap_id([NSWhoseSpecifier class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("initWithContainerClassDescription:containerSpecifier:key:test:");
   arg2 = caml_wrap_pointer(@selector(initWithContainerClassDescription:containerSpecifier:key:test:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("test:");
   arg2 = caml_wrap_pointer(@selector(test ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setTest:");
   arg2 = caml_wrap_pointer(@selector(setTest:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("startSubelementIdentifier:");
   arg2 = caml_wrap_pointer(@selector(startSubelementIdentifier ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setStartSubelementIdentifier:");
   arg2 = caml_wrap_pointer(@selector(setStartSubelementIdentifier:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("startSubelementIndex:");
   arg2 = caml_wrap_pointer(@selector(startSubelementIndex ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setStartSubelementIndex:");
   arg2 = caml_wrap_pointer(@selector(setStartSubelementIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("endSubelementIdentifier:");
   arg2 = caml_wrap_pointer(@selector(endSubelementIdentifier ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setEndSubelementIdentifier:");
   arg2 = caml_wrap_pointer(@selector(setEndSubelementIdentifier:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("endSubelementIndex:");
   arg2 = caml_wrap_pointer(@selector(endSubelementIndex ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setEndSubelementIndex:");
   arg2 = caml_wrap_pointer(@selector(setEndSubelementIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSNameSpecifier");
   arg2 = caml_wrap_id([NSNameSpecifier class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("initWithContainerClassDescription:containerSpecifier:key:name:");
   arg2 = caml_wrap_pointer(@selector(initWithContainerClassDescription:containerSpecifier:key:name:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("name:");
   arg2 = caml_wrap_pointer(@selector(name ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setName:");
   arg2 = caml_wrap_pointer(@selector(setName:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSRandomSpecifier");
   arg2 = caml_wrap_id([NSRandomSpecifier class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("NSObject");
   arg2 = caml_wrap_id([NSObject class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("objectSpecifier:");
   arg2 = caml_wrap_pointer(@selector(objectSpecifier ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("indicesOfObjectsByEvaluatingObjectSpecifier:");
   arg2 = caml_wrap_pointer(@selector(indicesOfObjectsByEvaluatingObjectSpecifier:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSRelativeSpecifier");
   arg2 = caml_wrap_id([NSRelativeSpecifier class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("initWithContainerClassDescription:containerSpecifier:key:relativePosition:baseSpecifier:");
   arg2 = caml_wrap_pointer(@selector(initWithContainerClassDescription:containerSpecifier:key:relativePosition:baseSpecifier:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("relativePosition:");
   arg2 = caml_wrap_pointer(@selector(relativePosition ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setRelativePosition:");
   arg2 = caml_wrap_pointer(@selector(setRelativePosition:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("baseSpecifier:");
   arg2 = caml_wrap_pointer(@selector(baseSpecifier ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setBaseSpecifier:");
   arg2 = caml_wrap_pointer(@selector(setBaseSpecifier:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSMiddleSpecifier");
   arg2 = caml_wrap_id([NSMiddleSpecifier class]);
   caml_callback2(*register_class,arg1,arg2);
   CAMLreturn(Val_int(0));
}
