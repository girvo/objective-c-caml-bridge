#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/Foundation.framework/Headers/NSScriptWhoseTests.h>
value caml_init_NSScriptWhoseTests(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSLogicalTest");
   arg2 = caml_wrap_id([NSLogicalTest class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("initAndTestWithTests:");
   arg2 = caml_wrap_pointer(@selector(initAndTestWithTests:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initOrTestWithTests:");
   arg2 = caml_wrap_pointer(@selector(initOrTestWithTests:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initNotTestWithTest:");
   arg2 = caml_wrap_pointer(@selector(initNotTestWithTest:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSScriptWhoseTest");
   arg2 = caml_wrap_id([NSScriptWhoseTest class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("isTrue:");
   arg2 = caml_wrap_pointer(@selector(isTrue ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSSpecifierTest");
   arg2 = caml_wrap_id([NSSpecifierTest class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("initWithObjectSpecifier:comparisonOperator:testObject:");
   arg2 = caml_wrap_pointer(@selector(initWithObjectSpecifier:comparisonOperator:testObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSObject");
   arg2 = caml_wrap_id([NSObject class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("scriptingIsEqualTo:");
   arg2 = caml_wrap_pointer(@selector(scriptingIsEqualTo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scriptingIsLessThanOrEqualTo:");
   arg2 = caml_wrap_pointer(@selector(scriptingIsLessThanOrEqualTo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scriptingIsLessThan:");
   arg2 = caml_wrap_pointer(@selector(scriptingIsLessThan:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scriptingIsGreaterThanOrEqualTo:");
   arg2 = caml_wrap_pointer(@selector(scriptingIsGreaterThanOrEqualTo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scriptingIsGreaterThan:");
   arg2 = caml_wrap_pointer(@selector(scriptingIsGreaterThan:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scriptingBeginsWith:");
   arg2 = caml_wrap_pointer(@selector(scriptingBeginsWith:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scriptingEndsWith:");
   arg2 = caml_wrap_pointer(@selector(scriptingEndsWith:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("scriptingContains:");
   arg2 = caml_wrap_pointer(@selector(scriptingContains:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isEqualTo:");
   arg2 = caml_wrap_pointer(@selector(isEqualTo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isLessThanOrEqualTo:");
   arg2 = caml_wrap_pointer(@selector(isLessThanOrEqualTo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isLessThan:");
   arg2 = caml_wrap_pointer(@selector(isLessThan:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isGreaterThanOrEqualTo:");
   arg2 = caml_wrap_pointer(@selector(isGreaterThanOrEqualTo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isGreaterThan:");
   arg2 = caml_wrap_pointer(@selector(isGreaterThan:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isNotEqualTo:");
   arg2 = caml_wrap_pointer(@selector(isNotEqualTo:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("doesContain:");
   arg2 = caml_wrap_pointer(@selector(doesContain:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isLike:");
   arg2 = caml_wrap_pointer(@selector(isLike:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isCaseInsensitiveLike:");
   arg2 = caml_wrap_pointer(@selector(isCaseInsensitiveLike:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
