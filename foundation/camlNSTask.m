#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/Foundation.framework/Headers/NSTask.h>
value caml_init_NSTask(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSTask");
   arg2 = caml_wrap_id([NSTask class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("launchedTaskWithLaunchPath:arguments:");
   arg2 = caml_wrap_pointer(@selector(launchedTaskWithLaunchPath:arguments:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("waitUntilExit:");
   arg2 = caml_wrap_pointer(@selector(waitUntilExit ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("init:");
   arg2 = caml_wrap_pointer(@selector(init ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setLaunchPath:");
   arg2 = caml_wrap_pointer(@selector(setLaunchPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setArguments:");
   arg2 = caml_wrap_pointer(@selector(setArguments:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setEnvironment:");
   arg2 = caml_wrap_pointer(@selector(setEnvironment:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setCurrentDirectoryPath:");
   arg2 = caml_wrap_pointer(@selector(setCurrentDirectoryPath:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setStandardInput:");
   arg2 = caml_wrap_pointer(@selector(setStandardInput:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setStandardOutput:");
   arg2 = caml_wrap_pointer(@selector(setStandardOutput:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setStandardError:");
   arg2 = caml_wrap_pointer(@selector(setStandardError:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("launchPath:");
   arg2 = caml_wrap_pointer(@selector(launchPath ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("arguments:");
   arg2 = caml_wrap_pointer(@selector(arguments ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("environment:");
   arg2 = caml_wrap_pointer(@selector(environment ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("currentDirectoryPath:");
   arg2 = caml_wrap_pointer(@selector(currentDirectoryPath ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("standardInput:");
   arg2 = caml_wrap_pointer(@selector(standardInput ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("standardOutput:");
   arg2 = caml_wrap_pointer(@selector(standardOutput ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("standardError:");
   arg2 = caml_wrap_pointer(@selector(standardError ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("launch:");
   arg2 = caml_wrap_pointer(@selector(launch ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("interrupt:");
   arg2 = caml_wrap_pointer(@selector(interrupt ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("terminate:");
   arg2 = caml_wrap_pointer(@selector(terminate ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("suspend:");
   arg2 = caml_wrap_pointer(@selector(suspend ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("resume:");
   arg2 = caml_wrap_pointer(@selector(resume ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("processIdentifier:");
   arg2 = caml_wrap_pointer(@selector(processIdentifier ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isRunning:");
   arg2 = caml_wrap_pointer(@selector(isRunning ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("terminationStatus:");
   arg2 = caml_wrap_pointer(@selector(terminationStatus ));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
