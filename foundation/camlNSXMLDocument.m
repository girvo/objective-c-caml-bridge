// THIS FILE IS GENERATED - ALL CHANGES WILL BE LOST AT THE NEXT BUILD
#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/Foundation.framework/Headers/NSXMLDocument.h>
value caml_init_NSXMLDocument(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSXMLDocument");
   arg2 = caml_wrap_id([NSXMLDocument class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("initWithXMLString:options:error:");
   arg2 = caml_wrap_pointer(@selector(initWithXMLString:options:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithContentsOfURL:options:error:");
   arg2 = caml_wrap_pointer(@selector(initWithContentsOfURL:options:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithData:options:error:");
   arg2 = caml_wrap_pointer(@selector(initWithData:options:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithRootElement:");
   arg2 = caml_wrap_pointer(@selector(initWithRootElement:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("replacementClassForClass:");
   arg2 = caml_wrap_pointer(@selector(replacementClassForClass:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setCharacterEncoding:");
   arg2 = caml_wrap_pointer(@selector(setCharacterEncoding:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("characterEncoding:");
   arg2 = caml_wrap_pointer(@selector(characterEncoding ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setVersion:");
   arg2 = caml_wrap_pointer(@selector(setVersion:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("version:");
   arg2 = caml_wrap_pointer(@selector(version ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setStandalone:");
   arg2 = caml_wrap_pointer(@selector(setStandalone:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isStandalone:");
   arg2 = caml_wrap_pointer(@selector(isStandalone ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDocumentContentKind:");
   arg2 = caml_wrap_pointer(@selector(setDocumentContentKind:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("documentContentKind:");
   arg2 = caml_wrap_pointer(@selector(documentContentKind ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setMIMEType:");
   arg2 = caml_wrap_pointer(@selector(setMIMEType:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_MIMEType:");
   arg2 = caml_wrap_pointer(@selector(l_MIMEType ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setDTD:");
   arg2 = caml_wrap_pointer(@selector(setDTD:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_DTD:");
   arg2 = caml_wrap_pointer(@selector(l_DTD ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setRootElement:");
   arg2 = caml_wrap_pointer(@selector(setRootElement:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("rootElement:");
   arg2 = caml_wrap_pointer(@selector(rootElement ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("insertChild:atIndex:");
   arg2 = caml_wrap_pointer(@selector(insertChild:atIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("insertChildren:atIndex:");
   arg2 = caml_wrap_pointer(@selector(insertChildren:atIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeChildAtIndex:");
   arg2 = caml_wrap_pointer(@selector(removeChildAtIndex:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setChildren:");
   arg2 = caml_wrap_pointer(@selector(setChildren:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addChild:");
   arg2 = caml_wrap_pointer(@selector(addChild:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("replaceChildAtIndex:withNode:");
   arg2 = caml_wrap_pointer(@selector(replaceChildAtIndex:withNode:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_XMLData:");
   arg2 = caml_wrap_pointer(@selector(l_XMLData ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("l_XMLDataWithOptions:");
   arg2 = caml_wrap_pointer(@selector(l_XMLDataWithOptions:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("objectByApplyingXSLT:arguments:error:");
   arg2 = caml_wrap_pointer(@selector(objectByApplyingXSLT:arguments:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("objectByApplyingXSLTString:arguments:error:");
   arg2 = caml_wrap_pointer(@selector(objectByApplyingXSLTString:arguments:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("objectByApplyingXSLTAtURL:arguments:error:");
   arg2 = caml_wrap_pointer(@selector(objectByApplyingXSLTAtURL:arguments:error:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("validateAndReturnError:");
   arg2 = caml_wrap_pointer(@selector(validateAndReturnError:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
