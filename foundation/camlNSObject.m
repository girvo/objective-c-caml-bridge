#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/Foundation.framework/Headers/NSObject.h>
value caml_init_NSObject(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSObject");
   arg2 = caml_wrap_id([NSObject class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("load:");
   arg2 = caml_wrap_pointer(@selector(load ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initialize:");
   arg2 = caml_wrap_pointer(@selector(initialize ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("init:");
   arg2 = caml_wrap_pointer(@selector(init ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("new:");
   arg2 = caml_wrap_pointer(@selector(new ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("allocWithZone:");
   arg2 = caml_wrap_pointer(@selector(allocWithZone:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("alloc:");
   arg2 = caml_wrap_pointer(@selector(alloc ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("dealloc:");
   arg2 = caml_wrap_pointer(@selector(dealloc ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("finalize:");
   arg2 = caml_wrap_pointer(@selector(finalize ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("copy:");
   arg2 = caml_wrap_pointer(@selector(copy ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("mutableCopy:");
   arg2 = caml_wrap_pointer(@selector(mutableCopy ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("copyWithZone:");
   arg2 = caml_wrap_pointer(@selector(copyWithZone:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("mutableCopyWithZone:");
   arg2 = caml_wrap_pointer(@selector(mutableCopyWithZone:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("superclass:");
   arg2 = caml_wrap_pointer(@selector(superclass ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("class:");
   arg2 = caml_wrap_pointer(@selector(class ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("poseAsClass:");
   arg2 = caml_wrap_pointer(@selector(poseAsClass:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("instancesRespondToSelector:");
   arg2 = caml_wrap_pointer(@selector(instancesRespondToSelector:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("conformsToProtocol:");
   arg2 = caml_wrap_pointer(@selector(conformsToProtocol:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("methodForSelector:");
   arg2 = caml_wrap_pointer(@selector(methodForSelector:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("instanceMethodForSelector:");
   arg2 = caml_wrap_pointer(@selector(instanceMethodForSelector:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("version:");
   arg2 = caml_wrap_pointer(@selector(version ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setVersion:");
   arg2 = caml_wrap_pointer(@selector(setVersion:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("doesNotRecognizeSelector:");
   arg2 = caml_wrap_pointer(@selector(doesNotRecognizeSelector:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("forwardInvocation:");
   arg2 = caml_wrap_pointer(@selector(forwardInvocation:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("methodSignatureForSelector:");
   arg2 = caml_wrap_pointer(@selector(methodSignatureForSelector:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("instanceMethodSignatureForSelector:");
   arg2 = caml_wrap_pointer(@selector(instanceMethodSignatureForSelector:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isSubclassOfClass:");
   arg2 = caml_wrap_pointer(@selector(isSubclassOfClass:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("description:");
   arg2 = caml_wrap_pointer(@selector(description ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("classForCoder:");
   arg2 = caml_wrap_pointer(@selector(classForCoder ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("replacementObjectForCoder:");
   arg2 = caml_wrap_pointer(@selector(replacementObjectForCoder:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("awakeAfterUsingCoder:");
   arg2 = caml_wrap_pointer(@selector(awakeAfterUsingCoder:));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
