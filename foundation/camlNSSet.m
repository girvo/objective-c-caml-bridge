#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/callback.h>
#import </System/Library/Frameworks/Foundation.framework/Headers/NSSet.h>
value caml_init_NSSet(value unit)
{
   CAMLparam0();
   CAMLlocal2(arg1, arg2);
   value *register_class = caml_named_value("register_class");
   value *register_selector = caml_named_value("register_selector");
   arg1 = caml_copy_string("NSCountedSet");
   arg2 = caml_wrap_id([NSCountedSet class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("initWithCapacity:");
   arg2 = caml_wrap_pointer(@selector(initWithCapacity:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithArray:");
   arg2 = caml_wrap_pointer(@selector(initWithArray:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithSet:");
   arg2 = caml_wrap_pointer(@selector(initWithSet:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("countForObject:");
   arg2 = caml_wrap_pointer(@selector(countForObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("objectEnumerator:");
   arg2 = caml_wrap_pointer(@selector(objectEnumerator ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addObject:");
   arg2 = caml_wrap_pointer(@selector(addObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeObject:");
   arg2 = caml_wrap_pointer(@selector(removeObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSMutableSet");
   arg2 = caml_wrap_id([NSMutableSet class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("setWithCapacity:");
   arg2 = caml_wrap_pointer(@selector(setWithCapacity:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithCapacity:");
   arg2 = caml_wrap_pointer(@selector(initWithCapacity:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addObjectsFromArray:");
   arg2 = caml_wrap_pointer(@selector(addObjectsFromArray:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("intersectSet:");
   arg2 = caml_wrap_pointer(@selector(intersectSet:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("minusSet:");
   arg2 = caml_wrap_pointer(@selector(minusSet:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeAllObjects:");
   arg2 = caml_wrap_pointer(@selector(removeAllObjects ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("unionSet:");
   arg2 = caml_wrap_pointer(@selector(unionSet:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setSet:");
   arg2 = caml_wrap_pointer(@selector(setSet:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("addObject:");
   arg2 = caml_wrap_pointer(@selector(addObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("removeObject:");
   arg2 = caml_wrap_pointer(@selector(removeObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("NSSet");
   arg2 = caml_wrap_id([NSSet class]);
   caml_callback2(*register_class,arg1,arg2);
   arg1 = caml_copy_string("set:");
   arg2 = caml_wrap_pointer(@selector(set ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setWithArray:");
   arg2 = caml_wrap_pointer(@selector(setWithArray:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setWithObject:");
   arg2 = caml_wrap_pointer(@selector(setWithObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setWithObjects:");
   arg2 = caml_wrap_pointer(@selector(setWithObjects:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithArray:");
   arg2 = caml_wrap_pointer(@selector(initWithArray:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithObjects:count:");
   arg2 = caml_wrap_pointer(@selector(initWithObjects:count:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithObjects:");
   arg2 = caml_wrap_pointer(@selector(initWithObjects:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithSet:");
   arg2 = caml_wrap_pointer(@selector(initWithSet:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("initWithSet:copyItems:");
   arg2 = caml_wrap_pointer(@selector(initWithSet:copyItems:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setWithSet:");
   arg2 = caml_wrap_pointer(@selector(setWithSet:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("setWithObjects:count:");
   arg2 = caml_wrap_pointer(@selector(setWithObjects:count:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("allObjects:");
   arg2 = caml_wrap_pointer(@selector(allObjects ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("anyObject:");
   arg2 = caml_wrap_pointer(@selector(anyObject ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("containsObject:");
   arg2 = caml_wrap_pointer(@selector(containsObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("description:");
   arg2 = caml_wrap_pointer(@selector(description ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("descriptionWithLocale:");
   arg2 = caml_wrap_pointer(@selector(descriptionWithLocale:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("intersectsSet:");
   arg2 = caml_wrap_pointer(@selector(intersectsSet:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isEqualToSet:");
   arg2 = caml_wrap_pointer(@selector(isEqualToSet:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("isSubsetOfSet:");
   arg2 = caml_wrap_pointer(@selector(isSubsetOfSet:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("makeObjectsPerformSelector:");
   arg2 = caml_wrap_pointer(@selector(makeObjectsPerformSelector:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("makeObjectsPerformSelector:withObject:");
   arg2 = caml_wrap_pointer(@selector(makeObjectsPerformSelector:withObject:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("count:");
   arg2 = caml_wrap_pointer(@selector(count ));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("member:");
   arg2 = caml_wrap_pointer(@selector(member:));
   caml_callback2(*register_selector, arg1, arg2);
   arg1 = caml_copy_string("objectEnumerator:");
   arg2 = caml_wrap_pointer(@selector(objectEnumerator ));
   caml_callback2(*register_selector, arg1, arg2);
   CAMLreturn(Val_int(0));
}
